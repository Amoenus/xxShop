<?xml version="1.0"?>
<doc>
    <assembly>
        <name>YSWL.OAuth</name>
    </assembly>
    <members>
        <member name="T:YSWL.OAuth.Denglu">
            <summary>
            Denglu.cc OAuth_2 的摘要说明
            内容：Denglu OAuth 2.0接口类文件
            作者：cyheng
            版本：v1.1
            日 期：2012-09-23
            </summary>
        </member>
        <member name="F:YSWL.OAuth.Denglu.domain">
            <summary>
            denglu API的域名，默认http://open.denglu.cc
            设置此属性以满足以后有做二级域名重定向需求的客户
            </summary>
        </member>
        <member name="F:YSWL.OAuth.Denglu.apiPath">
            <summary>
            DENGLU RESTful API的地址
            </summary>
        </member>
        <member name="F:YSWL.OAuth.Denglu.providers">
            <summary>
            Provider的枚举，里面包括了/transfer/[name]的地址后缀
            </summary>
        </member>
        <member name="T:YSWL.OAuth.Denglu.Verb">
            <summary>
            HTTP Methods
            </summary>
        </member>
        <member name="F:YSWL.OAuth.Denglu.version">
            <summary>
            此sdk的版本号，初始为1.0
            </summary>
        </member>
        <member name="M:YSWL.OAuth.Denglu.#ctor(System.String,System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="appID">灯鹭后台分配的appID {@link http://open.denglu.cc}</param>
            <param name="apiKey">灯鹭后台分配的apiKey {@link http://open.denglu.cc}</param>
            <param name="signatureMethod">签名算法，暂时只支持MD5</param>
        </member>
        <member name="M:YSWL.OAuth.Denglu.getAuthUrl(System.Boolean,System.String,System.String)">
            <summary>
            获取登录/绑定的链接
            </summary>
            <param name="isBind">是否用于绑定（非绑定则为登录）</param>
            <param name="Provider">供应商的种类，在provider枚举中获得</param>
            <param name="uid">用户网站的用户ID，绑定时需要</param>
        </member>
        <member name="M:YSWL.OAuth.Denglu.getUserInfoByToken(System.String)">
            <summary>
            根据token获取用户信息
            返回值示例
            {
            	"mediaID":7, // 媒体ID
            	"createTime":"2011-05-20 16:44:19", // 创建时间
            	"friendsCount":0, // 好友数
            	"location":null, // 地址
            	"favouritesCount":0, // 收藏数
            	"screenName":"denglu", // 显示姓名
            	"profileImageUrl":"http://head.xiaonei.com/photos/0/0/men_main.gif", // 个人头像
            	"mediaUserID":61, // 用户ID
            	"url":null, // 用户博客/主页地址
            	"city":null, // 城市
            	"description":null, // 个人描述
            	"createdAt":"", // 在媒体上的创建时间
            	"verified":0, // 认证标志
            	"name":null, // 友好显示名称
            	"domain":null, // 用户个性化URL
            	"province":null, // 省份
            	"followersCount":0, // 粉丝数
            	"gender":1, // 性别 1--男，0--女,2--未知
            	"statusesCount":0, // 微博/日记数
            	"personID":120 // 个人ID
            }
            </summary>
            <param name="token">从灯鹭获得的临时token</param>
        </member>
        <member name="M:YSWL.OAuth.Denglu.getMedia">
            <summary>
            获取当前应用ID绑定的所有社会化媒体及其属性
            返回值示例
            [
            	{
            		"mediaID":7, // ID
            		"mediaIconImageGif": "http://test.denglu.cc/images/denglu_second_icon_7.gif",
            //社会化媒体亮色Icon
            		"mediaIconImage": "http://test.denglu.cc/images/denglu_second_icon_7.png", //
            社会化媒体亮色Icon
            		"mediaNameEn":"renren", // 社会化媒体的名称的拼音
            		"mediaIconNoImageGif" :"http://test.denglu.cc/images/denglu_second_icon_no_7.
            gif", // 社会化媒体灰色Icon
            		"mediaIconNoImage": "http://test.denglu.cc/images/denglu_second_icon_no_7.
            png", // 社会化媒体灰色Icon
            		"mediaName":"人人网", // 社会化媒体的名称
            		"mediaImage":"http://test.denglu.cc/images/denglu_second_7.png" , //
            社会化媒体大图标
            		"shareFlag":0, // 是否有分享功能 0是1否
            		"apiKey":"704779c3dd474a44b612199e438ba8e2" // 社会化媒体的应用apikey
            	}
            ]
            </summary>
        </member>
        <member name="M:YSWL.OAuth.Denglu.bind(System.String,System.String,System.String,System.String)">
            <summary>
            用户绑定多个社会化媒体账号到已有账号上
            返回值示例
            {"result": "1"}
            </summary>
            <param name="mediaUID">从灯鹭获取的mediaUserID</param>
            <param name="uid">用户网站那边的用户ID</param>
            <param name="uname">用户网站的昵称</param>
            <param name="uemail">用户网站的邮箱</param>
        </member>
        <member name="M:YSWL.OAuth.Denglu.unbind(System.String)">
            <summary>
            用户解除绑定社会化媒体账号
            </summary>
            <param name="mediaUID">从灯鹭获取的mediaUserID</param>
        </member>
        <member name="M:YSWL.OAuth.Denglu.sendLoginFeed(System.String)">
            <summary>
            发送登录的新鲜事
            </summary>
            <param name="mediaUID">从灯鹭获取的mediaUserID</param>
        </member>
        <member name="M:YSWL.OAuth.Denglu.share(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            用户发布帖子、日志等信息时，可以把此信息分享到第三方
            </summary>
            <param name="mediaUserID"></param>
            <param name="content">分享显示的信息</param>
            <param name="url">查看信息的链接</param>
            <param name="uid">网站用户的唯一性标识ID</param>
            <param name="imageurl">图片的URL地址，必须以http开头。</param>
            <param name="videourl">视频的URL地址，必须以http开头。</param>
        </member>
        <member name="M:YSWL.OAuth.Denglu.signRequest(System.Collections.Generic.List{YSWL.OAuth.Parameter})">
            <summary>
            为HTTP请求加签名
            </summary>
            <param name="request"></param>
        </member>
        <member name="M:YSWL.OAuth.Denglu.makeRequest(System.Net.HttpWebRequest)">
            <summary>
            发送HTTP请求并获得响应
            </summary>
            <param name="request"></param>
        </member>
        <member name="M:YSWL.OAuth.Denglu.parseJson(System.String)">
            <summary>
            解析JSON字符串
            </summary>
            <param name="input"></param>
        </member>
        <member name="M:YSWL.OAuth.Denglu.getDTByJson_s(System.String)">
            <summary>
            将json数据以DT解析返回(作废)
            </summary>
            <param name="input">json字符串</param>
            <returns></returns>
        </member>
        <member name="M:YSWL.OAuth.Denglu.getDTByJson(System.String)">
            <summary>
            将json数据以DT解析返回
            </summary>
            <param name="input">json字符串</param>
            <returns></returns>
        </member>
        <member name="T:YSWL.OAuth.DengluException">
            <summary>
            灯鹭接口可能返回的错误类型对照表
            Code Description
            1 	参数错误，请参考API文档
            2 	站点不存在
            3 	时间戳有误
            4 	只支持md5签名
            5 	签名不正确
            6 	token已过期
            7 	媒体用户不存在
            8 	媒体用户已绑定其他用户
            9 	媒体用户已解绑
            10 	未知错误
            </summary>
        </member>
        <member name="T:YSWL.OAuth.ParameterComparer">
            <summary>
            用于排序参数
            </summary>
        </member>
        <member name="T:YSWL.OAuth.Http.Client.ClientHttpRequestCompletedEventArgs">
            <summary>
            Provides data when an asynchronous HTTP request execution completes.
            </summary>
            <see cref="T:YSWL.OAuth.Http.Client.IClientHttpRequest"/>
        </member>
        <member name="P:YSWL.OAuth.Http.Client.ClientHttpRequestCompletedEventArgs.Response">
            <summary>
            Gets the <see cref="T:YSWL.OAuth.Http.Client.IClientHttpResponse">response</see> result of the execution.
            </summary>
            <exception cref="T:System.InvalidOperationException">If the execution was canceled.</exception>
            <exception cref="T:System.Reflection.TargetInvocationException">If the execution failed.</exception>
        </member>
        <member name="M:YSWL.OAuth.Http.Client.ClientHttpRequestCompletedEventArgs.#ctor(YSWL.OAuth.Http.Client.IClientHttpResponse,System.Exception,System.Boolean,System.Object)">
            <summary>
            Creates a new instance of <see cref="T:YSWL.OAuth.Http.Client.ClientHttpRequestCompletedEventArgs"/>.
            </summary>
            <param name="response">The response of the execution.</param>
            <param name="exception">Any error that occurred during the asynchronous execution.</param>
            <param name="cancelled">A value indicating whether the asynchronous execution was canceled.</param>
            <param name="userState">The optional user-supplied state object.</param>
        </member>
        <member name="T:YSWL.OAuth.Http.Client.IClientHttpRequest">
            <summary>
            Represents a client-side HTTP request.
            </summary>
            <remarks>
            <para>
            Created via an implementation of the <see cref="T:YSWL.OAuth.Http.Client.IClientHttpRequestFactory"/>.
            </para>
            <para>
            A client HTTP request can be executed, 
            getting an <see cref="T:YSWL.OAuth.Http.Client.IClientHttpResponse"/> which can be read from.
            </para>
            </remarks>
            <seealso cref="T:YSWL.OAuth.Http.Client.IClientHttpRequestFactory"/>
            <seealso cref="T:YSWL.OAuth.Http.Client.IClientHttpResponse"/>
            <author>Arjen Poutsma</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="P:YSWL.OAuth.Http.Client.IClientHttpRequest.Method">
            <summary>
            Gets the HTTP method of the request.
            </summary>
        </member>
        <member name="P:YSWL.OAuth.Http.Client.IClientHttpRequest.Uri">
            <summary>
            Gets the URI of the request.
            </summary>
        </member>
        <member name="M:YSWL.OAuth.Http.Client.IClientHttpRequest.Execute">
            <summary>
            Execute this request, resulting in a <see cref="T:YSWL.OAuth.Http.Client.IClientHttpResponse" /> that can be read.
            </summary>
            <returns>The response result of the execution</returns>
        </member>
        <member name="M:YSWL.OAuth.Http.Client.IClientHttpRequest.ExecuteAsync(System.Object,System.Action{YSWL.OAuth.Http.Client.ClientHttpRequestCompletedEventArgs})">
            <summary>
            Execute this request asynchronously.
            </summary>
            <param name="state">
            An optional user-defined object that is passed to the method invoked 
            when the asynchronous operation completes.
            </param>
            <param name="executeCompleted">
            The <see cref="T:System.Action`1"/> to perform when the asynchronous execution completes.
            </param>
        </member>
        <member name="M:YSWL.OAuth.Http.Client.IClientHttpRequest.CancelAsync">
            <summary>
            Cancels a pending asynchronous operation.
            </summary>
        </member>
        <member name="T:YSWL.OAuth.Http.Client.IClientHttpRequestFactory">
            <summary>
            Factory for <see cref="T:YSWL.OAuth.Http.Client.IClientHttpRequest"/> objects. 
            Requests are created by the <see cref="M:CreateRequest"/> method.
            </summary>
            <author>Arjen Poutsma</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="M:YSWL.OAuth.Http.Client.IClientHttpRequestFactory.CreateRequest(System.Uri,YSWL.OAuth.Http.HttpMethod)">
            <summary>
            Create a new <see cref="T:YSWL.OAuth.Http.Client.IClientHttpRequest"/> for the specified URI and HTTP method.
            </summary>
            <param name="uri">The URI to create a request for.</param>
            <param name="method">The HTTP method to execute.</param>
            <returns>The created request</returns>
        </member>
        <member name="T:YSWL.OAuth.Http.Client.IClientHttpResponse">
            <summary>
            Represents a client-side HTTP response.
            </summary>
            <remarks>
            <para>
            Obtained via an 'execution' of the <see cref="T:YSWL.OAuth.Http.Client.IClientHttpRequest"/>.
            </para>
            <para>
            A client HTTP response must be <see cref="M:Close">closed</see>, 
            typically in a <code>finally</code> or via an <code>using</code> block.
            </para>
            </remarks>
            <seealso cref="T:YSWL.OAuth.Http.Client.IClientHttpRequest"/>
            <author>Arjen Poutsma</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="P:YSWL.OAuth.Http.Client.IClientHttpResponse.StatusCode">
            <summary>
            Gets the HTTP status code of the response.
            </summary>
        </member>
        <member name="P:YSWL.OAuth.Http.Client.IClientHttpResponse.StatusDescription">
            <summary>
            Gets the HTTP status description of the response.
            </summary>
        </member>
        <member name="M:YSWL.OAuth.Http.Client.IClientHttpResponse.Close">
            <summary>
            Closes this response, freeing any resources created.
            </summary>
        </member>
        <member name="T:YSWL.OAuth.Http.Client.Interceptor.BasicSigningRequestInterceptor">
            <summary>
            <see cref="T:YSWL.OAuth.Http.Client.Interceptor.IClientHttpRequestBeforeInterceptor"/> implementation that forces 
            HTTP Basic authentication for the request.
            </summary>
            <remarks>
            HTTP Basic authentication can also be configured using <see cref="T:YSWL.OAuth.Http.Client.WebClientHttpRequestFactory"/>, 
            but this implementation will not wait the challenge response from server 
            before to send the 'Authorization' header value.
            </remarks>
            <author>Bruno Baia</author>
        </member>
        <member name="M:YSWL.OAuth.Http.Client.Interceptor.BasicSigningRequestInterceptor.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of <see cref="T:YSWL.OAuth.Http.Client.Interceptor.BasicSigningRequestInterceptor"/> 
            with the given user name and password.
            </summary>
            <param name="userName">The user name for HTTP authentication.</param>
            <param name="password">The password for HTTP authentication.</param>
        </member>
        <member name="M:YSWL.OAuth.Http.Client.Interceptor.BasicSigningRequestInterceptor.BeforeExecute(YSWL.OAuth.Http.Client.Interceptor.IClientHttpRequestContext)">
            <summary>
            The callback method before the given request is executed.
            </summary>
            <remarks>
            This implementation adds the 'Authorization' header to the created request.
            </remarks>
            <param name="request">The request context.</param>
        </member>
        <member name="T:YSWL.OAuth.Http.Client.Interceptor.IClientHttpRequestAsyncExecution">
            <summary>
            Represents the context of an asynchronous client-side HTTP request execution, 
            given to an interceptor.
            </summary>
            <seealso cref="T:YSWL.OAuth.Http.Client.Interceptor.IClientHttpRequestAsyncInterceptor"/>
            <author>Bruno Baia</author>
        </member>
        <member name="P:YSWL.OAuth.Http.Client.Interceptor.IClientHttpRequestAsyncExecution.AsyncState">
            <summary>
            Gets or sets the optional user-defined object that is passed to the method invoked 
            when the asynchronous operation completes.
            </summary>
        </member>
        <member name="M:YSWL.OAuth.Http.Client.Interceptor.IClientHttpRequestAsyncExecution.ExecuteAsync">
            <summary>
            Execute the request asynchronously with the current context.
            </summary>
            <remarks>
            Used to invoke the next interceptor in the interceptor chain, 
            or - if the calling interceptor is last - execute the request itself.
            </remarks>
            <seealso cref="M:ExecuteAsync(Action{IClientHttpResponseAsyncContext} executeCompleted)"/>
        </member>
        <member name="M:YSWL.OAuth.Http.Client.Interceptor.IClientHttpRequestAsyncExecution.ExecuteAsync(System.Action{YSWL.OAuth.Http.Client.Interceptor.IClientHttpResponseAsyncContext})">
            <summary>
            Execute the request asynchronously with the current context and handle the response result.
            </summary>
            <remarks>
            Used to invoke the next interceptor in the interceptor chain, 
            or - if the calling interceptor is last - execute the request itself.
            </remarks>
            <param name="executeCompleted">
            The <see cref="T:System.Action`1"/> to perform when the asynchronous execution completes.
            </param>
            <seealso cref="M:ExecuteAsync()"/>
        </member>
        <member name="T:YSWL.OAuth.Http.Client.Interceptor.IClientHttpRequestAsyncInterceptor">
            <summary>
            Intercepts asynchronous client-side HTTP requests execution. 
            </summary>
            <seealso cref="T:YSWL.OAuth.Http.Client.Interceptor.IClientHttpRequestAsyncExecution"/>
            <author>Bruno Baia</author>
        </member>
        <member name="M:YSWL.OAuth.Http.Client.Interceptor.IClientHttpRequestAsyncInterceptor.ExecuteAsync(YSWL.OAuth.Http.Client.Interceptor.IClientHttpRequestAsyncExecution)">
            <summary>
            Intercept the given asynchronous request execution. 
            The given <see cref="T:YSWL.OAuth.Http.Client.Interceptor.IClientHttpRequestAsyncExecution"/> allows the interceptor 
            to pass on the request and the response to the next entity in the chain.
            </summary>
            <remarks>
            A typical implementation of this method would follow the following pattern: 
            <ul>
            <li>Examine the HTTP request.</li>
            <li>Optionally modify the request headers.</li>
            <li>Optionally modify the request body.</li>
            <li><strong>Either</strong>
            <ul>
            <li>execute the request asynchronously using the <see cref="M:IClientHttpRequestAsyncExecution.ExecuteAsync()"/> method,</li>
            <strong>or</strong>
            <li>execute the request asynchronously using the <see cref="M:IClientHttpRequestAsyncExecution.ExecuteAsync{Action{ClientHttpRequestCompletedEventArgs}} executeCompleted)"/> method 
            to examine, and optionally wrap the response,</li>
            <strong>or</strong>
            <li>do not execute the request to block the execution altogether.</li>
            </ul>
            </li>
            </ul>
            </remarks>
            <param name="execution">The asynchronous request execution context.</param>
        </member>
        <member name="T:YSWL.OAuth.Http.Client.Interceptor.IClientHttpRequestBeforeInterceptor">
            <summary>
            Intercepts client-side HTTP requests before their execution. 
            </summary>
            <remarks>
            <para>
            This interceptor cannot prevent the request execution, 
            unless an exception is thrown.
            </para>
            <para>
            The main advantage is that it can be used 
            for both synchronous and asynchronous request execution.
            </para>
            </remarks>
            <seealso cref="T:YSWL.OAuth.Http.Client.Interceptor.IClientHttpRequestContext"/>
            <author>Bruno Baia</author>
        </member>
        <member name="M:YSWL.OAuth.Http.Client.Interceptor.IClientHttpRequestBeforeInterceptor.BeforeExecute(YSWL.OAuth.Http.Client.Interceptor.IClientHttpRequestContext)">
            <summary>
            The callback method before the given request is executed.
            </summary>
            <remarks>
            A typical implementation of this method would follow the following pattern: 
            <ul>
            <li>Examine the HTTP request.</li>
            <li>Optionally modify the request headers.</li>
            <li>Optionally modify the request body.</li>
            </ul>
            </remarks>
            <param name="request">The request context.</param>
        </member>
        <member name="T:YSWL.OAuth.Http.Client.Interceptor.IClientHttpRequestContext">
            <summary>
            Represents the context of a client-side HTTP request, 
            given to an interceptor.
            </summary>
            <seealso cref="T:YSWL.OAuth.Http.Client.Interceptor.IClientHttpRequestBeforeInterceptor"/>
            <author>Bruno Baia</author>
        </member>
        <member name="P:YSWL.OAuth.Http.Client.Interceptor.IClientHttpRequestContext.Method">
            <summary>
            Gets the HTTP method of the request.
            </summary>
        </member>
        <member name="P:YSWL.OAuth.Http.Client.Interceptor.IClientHttpRequestContext.Uri">
            <summary>
            Gets the URI of the request.
            </summary>
        </member>
        <member name="P:YSWL.OAuth.Http.Client.Interceptor.IClientHttpRequestContext.Headers">
            <summary>
            Gets the request message headers.
            </summary>
        </member>
        <member name="P:YSWL.OAuth.Http.Client.Interceptor.IClientHttpRequestContext.Body">
            <summary>
            Gets or sets the delegate that writes the request body message as a stream.
            </summary>
        </member>
        <member name="T:YSWL.OAuth.Http.Client.Interceptor.IClientHttpRequestFactoryCreation">
            <summary>
            Represents the context of a client-side HTTP request creation, 
            given to an interceptor.
            </summary>
            <seealso cref="T:YSWL.OAuth.Http.Client.Interceptor.IClientHttpRequestFactoryInterceptor"/>
            <author>Bruno Baia</author>
        </member>
        <member name="P:YSWL.OAuth.Http.Client.Interceptor.IClientHttpRequestFactoryCreation.Method">
            <summary>
            Gets or sets the HTTP method of the request.
            </summary>
        </member>
        <member name="P:YSWL.OAuth.Http.Client.Interceptor.IClientHttpRequestFactoryCreation.Uri">
            <summary>
            Gets or sets the URI of the request.
            </summary>
        </member>
        <member name="M:YSWL.OAuth.Http.Client.Interceptor.IClientHttpRequestFactoryCreation.Create">
            <summary>
            Create the request with the current context.
            </summary>
            <remarks>
            Used to invoke the next interceptor in the interceptor chain, 
            or - if the calling interceptor is last - create the request itself.
            </remarks>
            <returns>The created request.</returns>
        </member>
        <member name="T:YSWL.OAuth.Http.Client.Interceptor.IClientHttpRequestFactoryInterceptor">
            <summary>
            Intercepts client-side HTTP requests creation. 
            </summary>
            <seealso cref="T:YSWL.OAuth.Http.Client.Interceptor.IClientHttpRequestFactoryCreation"/>
            <author>Bruno Baia</author>
        </member>
        <member name="M:YSWL.OAuth.Http.Client.Interceptor.IClientHttpRequestFactoryInterceptor.Create(YSWL.OAuth.Http.Client.Interceptor.IClientHttpRequestFactoryCreation)">
            <summary>
            Intercept the given request creation, and return the created request. 
            The given <see cref="T:YSWL.OAuth.Http.Client.Interceptor.IClientHttpRequestFactoryCreation"/> allows the interceptor 
            to pass on the request to the next entity in the chain.
            </summary>
            <remarks>
            A typical implementation of this method would follow the following pattern: 
            <ul>
            <li>Examine the HTTP uri and method.</li>
            <li>Optionally modify the request uri.</li>
            <li>Optionally modify the request method.</li>
            <li><strong>Either</strong>
            <ul>
            <li>create the request using the <see cref="M:IClientHttpRequestFactoryCreation.Create()"/> method,</li>
            <strong>or</strong>
            <li>create your own request.</li>
            </ul>
            </li>
            <li>Optionally modify the created request.</li>
            </ul>
            </remarks>
            <param name="creation">The request creation context.</param>
            <returns>The created request.</returns>
        </member>
        <member name="T:YSWL.OAuth.Http.Client.Interceptor.IClientHttpRequestInterceptor">
            <summary>
            Marker interfaces for client-side HTTP request interceptors. 
            </summary>
            <remarks>
            This interface is not used directly. 
            Use the various derived interfaces to intercept specific events.
            </remarks>
            <author>Bruno Baia</author>
        </member>
        <member name="T:YSWL.OAuth.Http.Client.Interceptor.IClientHttpRequestSyncExecution">
            <summary>
            Represents the context of a synchronous client-side HTTP request execution, 
            given to an interceptor.
            </summary>
            <seealso cref="T:YSWL.OAuth.Http.Client.Interceptor.IClientHttpRequestSyncInterceptor"/>
            <author>Arjen Poutsma</author>
            <author>Bruno Baia</author>
        </member>
        <member name="M:YSWL.OAuth.Http.Client.Interceptor.IClientHttpRequestSyncExecution.Execute">
            <summary>
            Execute the request synchronously with the current context, and return the response.
            </summary>
            <remarks>
            Used to invoke the next interceptor in the interceptor chain, 
            or - if the calling interceptor is last - execute the request itself.
            </remarks>
            <returns>The response result of the execution</returns>
        </member>
        <member name="T:YSWL.OAuth.Http.Client.Interceptor.IClientHttpRequestSyncInterceptor">
            <summary>
            Intercepts synchronous client-side HTTP requests execution. 
            </summary>
            <seealso cref="T:YSWL.OAuth.Http.Client.Interceptor.IClientHttpRequestSyncExecution"/>
            <author>Arjen Poutsma</author>
            <author>Bruno Baia</author>
        </member>
        <member name="M:YSWL.OAuth.Http.Client.Interceptor.IClientHttpRequestSyncInterceptor.Execute(YSWL.OAuth.Http.Client.Interceptor.IClientHttpRequestSyncExecution)">
            <summary>
            Intercept the given synchronous request execution. 
            The given <see cref="T:YSWL.OAuth.Http.Client.Interceptor.IClientHttpRequestSyncExecution"/> allows the interceptor 
            to pass on the request and the response to the next entity in the chain.
            </summary>
            <remarks>
            A typical implementation of this method would follow the following pattern: 
            <ul>
            <li>Examine the HTTP request.</li>
            <li>Optionally modify the request headers.</li>
            <li>Optionally modify the request body.</li>
            <li><strong>Either</strong>
            <ul>
            <li>execute the request synchronous using the <see cref="M:IClientHttpRequestExecution.Execute()"/> method,</li>
            <strong>or</strong>
            <li>do not execute the request to block the execution altogether.</li>
            </ul>
            </li>
            <li>Optionally wrap the response.</li>
            </ul>
            </remarks>
            <param name="execution">The request execution context.</param>
            <returns>The response result of the execution</returns>
        </member>
        <member name="T:YSWL.OAuth.Http.Client.Interceptor.IClientHttpResponseAsyncContext">
            <summary>
            Represents the asynchronous context of a client-side HTTP response, 
            given to an interceptor.
            </summary>
            <seealso cref="T:YSWL.OAuth.Http.Client.Interceptor.IClientHttpRequestAsyncExecution"/>
            <author>Bruno Baia</author>
        </member>
        <member name="P:YSWL.OAuth.Http.Client.Interceptor.IClientHttpResponseAsyncContext.Response">
            <summary>
            Gets or sets the <see cref="T:YSWL.OAuth.Http.Client.IClientHttpResponse">response</see> result of the execution.
            </summary>
        </member>
        <member name="P:YSWL.OAuth.Http.Client.Interceptor.IClientHttpResponseAsyncContext.Cancelled">
            <summary>
            Gets or sets a value indicating whether the asynchronous request execution has been cancelled.
            </summary>
        </member>
        <member name="P:YSWL.OAuth.Http.Client.Interceptor.IClientHttpResponseAsyncContext.Error">
            <summary>
            Gets or sets a value indicating which error occurred during the asynchronous request execution.
            </summary>
        </member>
        <member name="P:YSWL.OAuth.Http.Client.Interceptor.IClientHttpResponseAsyncContext.UserState">
            <summary>
            Gets or sets the state object passed to the asynchronous request execution.
            </summary>
        </member>
        <member name="T:YSWL.OAuth.Http.Client.Interceptor.InterceptingClientHttpRequest">
            <summary>
            Wrapper for an <see cref="T:YSWL.OAuth.Http.Client.IClientHttpRequest"/> that has support 
            for <see cref="T:YSWL.OAuth.Http.Client.Interceptor.IClientHttpRequestInterceptor"/>s.
            </summary>
            <author>Arjen Poutsma</author>
            <author>Bruno Baia</author>
        </member>
        <member name="P:YSWL.OAuth.Http.Client.Interceptor.InterceptingClientHttpRequest.TargetRequest">
            <summary>
            Gets the intercepted request.
            </summary>
        </member>
        <member name="M:YSWL.OAuth.Http.Client.Interceptor.InterceptingClientHttpRequest.#ctor(YSWL.OAuth.Http.Client.IClientHttpRequest,System.Collections.Generic.IEnumerable{YSWL.OAuth.Http.Client.Interceptor.IClientHttpRequestInterceptor})">
            <summary>
            Creates a new instance of the <see cref="T:YSWL.OAuth.Http.Client.Interceptor.InterceptingClientHttpRequest"/> with the given parameters.
            </summary>
            <param name="request">The request to wrap.</param>
            <param name="interceptors">The interceptors that are to be applied. Can be <c>null</c>.</param>
        </member>
        <member name="P:YSWL.OAuth.Http.Client.Interceptor.InterceptingClientHttpRequest.Method">
            <summary>
            Gets the HTTP method of the request.
            </summary>
        </member>
        <member name="P:YSWL.OAuth.Http.Client.Interceptor.InterceptingClientHttpRequest.Uri">
            <summary>
            Gets the URI of the request.
            </summary>
        </member>
        <member name="P:YSWL.OAuth.Http.Client.Interceptor.InterceptingClientHttpRequest.Headers">
            <summary>
            Gets the message headers.
            </summary>
        </member>
        <member name="P:YSWL.OAuth.Http.Client.Interceptor.InterceptingClientHttpRequest.Body">
            <summary>
            Gets or sets the delegate that writes the body message as a stream.
            </summary>
        </member>
        <member name="M:YSWL.OAuth.Http.Client.Interceptor.InterceptingClientHttpRequest.Execute">
            <summary>
            Execute this request, resulting in a <see cref="T:YSWL.OAuth.Http.Client.IClientHttpResponse" /> that can be read.
            </summary>
            <returns>The response result of the execution</returns>
        </member>
        <member name="M:YSWL.OAuth.Http.Client.Interceptor.InterceptingClientHttpRequest.ExecuteAsync(System.Object,System.Action{YSWL.OAuth.Http.Client.ClientHttpRequestCompletedEventArgs})">
            <summary>
            Execute this request asynchronously.
            </summary>
            <param name="state">
            An optional user-defined object that is passed to the method invoked 
            when the asynchronous operation completes.
            </param>
            <param name="executeCompleted">
            The <see cref="T:System.Action`1"/> to perform when the asynchronous execution completes.
            </param>
        </member>
        <member name="M:YSWL.OAuth.Http.Client.Interceptor.InterceptingClientHttpRequest.CancelAsync">
            <summary>
            Cancels a pending asynchronous operation.
            </summary>
        </member>
        <member name="T:YSWL.OAuth.Http.Client.Interceptor.InterceptingClientHttpRequestFactory">
            <summary>
            Wrapper for an <see cref="T:YSWL.OAuth.Http.Client.IClientHttpRequestFactory"/> that has support 
            for <see cref="T:YSWL.OAuth.Http.Client.Interceptor.IClientHttpRequestInterceptor"/>s.
            </summary>
            <author>Arjen Poutsma</author>
            <author>Bruno Baia</author>
        </member>
        <member name="P:YSWL.OAuth.Http.Client.Interceptor.InterceptingClientHttpRequestFactory.TargetRequestFactory">
            <summary>
            Gets the intercepted request factory.
            </summary>
        </member>
        <member name="M:YSWL.OAuth.Http.Client.Interceptor.InterceptingClientHttpRequestFactory.#ctor(YSWL.OAuth.Http.Client.IClientHttpRequestFactory,System.Collections.Generic.IEnumerable{YSWL.OAuth.Http.Client.Interceptor.IClientHttpRequestInterceptor})">
            <summary>
            Creates a new instance of the <see cref="T:YSWL.OAuth.Http.Client.Interceptor.InterceptingClientHttpRequestFactory"/> with the given parameters.
            </summary>
            <param name="requestFactory">The request factory to wrap.</param>
            <param name="interceptors">The interceptors that are to be applied. Can be <c>null</c>.</param>
        </member>
        <member name="M:YSWL.OAuth.Http.Client.Interceptor.InterceptingClientHttpRequestFactory.CreateRequest(System.Uri,YSWL.OAuth.Http.HttpMethod)">
            <summary>
            Create a new <see cref="T:YSWL.OAuth.Http.Client.IClientHttpRequest"/> for the specified URI and HTTP method.
            </summary>
            <param name="uri">The URI to create a request for.</param>
            <param name="method">The HTTP method to execute.</param>
            <returns>The created request</returns>
        </member>
        <member name="T:YSWL.OAuth.Http.Client.WebClientHttpRequest">
            <summary>
            <see cref="T:YSWL.OAuth.Http.Client.IClientHttpRequest"/> implementation that uses 
            .NET <see cref="P:YSWL.OAuth.Http.Client.WebClientHttpRequest.HttpWebRequest"/>'s class to execute requests.
            </summary>
            <seealso cref="T:YSWL.OAuth.Http.Client.WebClientHttpRequestFactory"/>
            <author>Bruno Baia</author>
        </member>
        <member name="P:YSWL.OAuth.Http.Client.WebClientHttpRequest.HttpWebRequest">
            <summary>
            Gets the <see cref="P:YSWL.OAuth.Http.Client.WebClientHttpRequest.HttpWebRequest"/> instance used by the request.
            </summary>
        </member>
        <member name="M:YSWL.OAuth.Http.Client.WebClientHttpRequest.#ctor(System.Net.HttpWebRequest)">
            <summary>
            Creates a new instance of <see cref="T:YSWL.OAuth.Http.Client.WebClientHttpRequest"/> 
            with the given <see cref="P:YSWL.OAuth.Http.Client.WebClientHttpRequest.HttpWebRequest"/> instance.
            </summary>
            <param name="request">The <see cref="P:YSWL.OAuth.Http.Client.WebClientHttpRequest.HttpWebRequest"/> instance to use.</param>
        </member>
        <member name="P:YSWL.OAuth.Http.Client.WebClientHttpRequest.Method">
            <summary>
            Gets the HTTP method of the request.
            </summary>
        </member>
        <member name="P:YSWL.OAuth.Http.Client.WebClientHttpRequest.Uri">
            <summary>
            Gets the URI of the request.
            </summary>
        </member>
        <member name="P:YSWL.OAuth.Http.Client.WebClientHttpRequest.Headers">
            <summary>
            Gets the message headers.
            </summary>
        </member>
        <member name="P:YSWL.OAuth.Http.Client.WebClientHttpRequest.Body">
            <summary>
            Sets the delegate that writes the body message as a stream.
            </summary>
        </member>
        <member name="M:YSWL.OAuth.Http.Client.WebClientHttpRequest.Execute">
            <summary>
            Execute this request, resulting in a <see cref="T:YSWL.OAuth.Http.Client.IClientHttpResponse" /> that can be read.
            </summary>
            <returns>The response result of the execution</returns>
            <see cref="T:System.InvalidOperationException">If the request is already executed or is currently executing.</see>
        </member>
        <member name="M:YSWL.OAuth.Http.Client.WebClientHttpRequest.ExecuteAsync(System.Object,System.Action{YSWL.OAuth.Http.Client.ClientHttpRequestCompletedEventArgs})">
            <summary>
            Execute this request asynchronously.
            </summary>
            <param name="state">
            An optional user-defined object that is passed to the method invoked 
            when the asynchronous operation completes.
            </param>
            <param name="executeCompleted">
            The <see cref="T:System.Action`1"/> to perform when the asynchronous execution completes.
            </param>
            <see cref="T:System.InvalidOperationException">If the request is already executed or is currently executing.</see>
        </member>
        <member name="M:YSWL.OAuth.Http.Client.WebClientHttpRequest.CancelAsync">
            <summary>
            Cancels a pending asynchronous operation.
            </summary>
        </member>
        <member name="M:YSWL.OAuth.Http.Client.WebClientHttpRequest.EnsureNotExecuted">
            <summary>
            Ensures that the request can be executed.
            </summary>
            <see cref="T:System.InvalidOperationException">If the request is already executed or is currently executing.</see>
        </member>
        <member name="M:YSWL.OAuth.Http.Client.WebClientHttpRequest.CreateClientHttpResponse(System.Net.HttpWebResponse)">
            <summary>
            Creates and returns an <see cref="T:YSWL.OAuth.Http.Client.IClientHttpResponse"/> implementation associated 
            with the request. 
            </summary>
            <param name="response">The <see cref="T:System.Net.HttpWebResponse"/> instance to use.</param>
            <returns>
            An <see cref="T:YSWL.OAuth.Http.Client.IClientHttpResponse"/> implementation associated with the request.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.Http.Client.WebClientHttpRequest.PrepareForExecution">
            <summary>
            Prepare the request for execution.
            </summary>
            <remarks>
            Default implementation copies headers to the .NET request. Can be overridden in subclasses.
            </remarks>
        </member>
        <member name="T:YSWL.OAuth.Http.Client.WebClientHttpRequestFactory">
            <summary>
            <see cref="T:YSWL.OAuth.Http.Client.IClientHttpRequestFactory"/> implementation that uses 
            .NET <see cref="T:System.Net.HttpWebRequest"/>'s class to create requests.
            </summary>
            <see cref="T:YSWL.OAuth.Http.Client.WebClientHttpRequest"/>
            <author>Bruno Baia</author>
        </member>
        <member name="P:YSWL.OAuth.Http.Client.WebClientHttpRequestFactory.AllowAutoRedirect">
            <summary>
            Gets or sets a boolean value that controls whether the request should follow redirection responses.
            </summary>
        </member>
        <member name="P:YSWL.OAuth.Http.Client.WebClientHttpRequestFactory.UseDefaultCredentials">
            <summary>
            Gets or sets a boolean value that controls whether default credentials are sent with this request.
            </summary>
        </member>
        <member name="P:YSWL.OAuth.Http.Client.WebClientHttpRequestFactory.CookieContainer">
            <summary>
            Gets or sets the cookies for the request.
            </summary>
        </member>
        <member name="P:YSWL.OAuth.Http.Client.WebClientHttpRequestFactory.Credentials">
            <summary>
            Gets or sets authentication information for the request.
            </summary>
        </member>
        <member name="P:YSWL.OAuth.Http.Client.WebClientHttpRequestFactory.ClientCertificates">
            <summary>
            Gets or sets the collection of security certificates that are associated with this request.
            </summary>
        </member>
        <member name="P:YSWL.OAuth.Http.Client.WebClientHttpRequestFactory.Proxy">
            <summary>
            Gets or sets proxy information for the request.
            </summary>
            <remarks>
            The default value is set by calling the <see cref="P:System.Net.GlobalProxySelection.Select"/> property.
            </remarks>
        </member>
        <member name="P:YSWL.OAuth.Http.Client.WebClientHttpRequestFactory.Timeout">
            <summary>
            Gets or sets the time-out value in milliseconds for synchronous request only.
            </summary>
            <remarks>
            The default is 100,000 milliseconds (100 seconds).
            </remarks>
        </member>
        <member name="P:YSWL.OAuth.Http.Client.WebClientHttpRequestFactory.Expect100Continue">
            <summary>
            Gets or sets a boolean value that determines whether 100-Continue behavior is used.
            </summary>
            <remarks>
            The default value is <see langword="true"/>.
            </remarks>
        </member>
        <member name="P:YSWL.OAuth.Http.Client.WebClientHttpRequestFactory.AutomaticDecompression">
            <summary>
            Gets or sets the type of decompression that is automatically used for the response result of this request.
            </summary>
        </member>
        <member name="M:YSWL.OAuth.Http.Client.WebClientHttpRequestFactory.CreateRequest(System.Uri,YSWL.OAuth.Http.HttpMethod)">
            <summary>
            Create a new <see cref="T:YSWL.OAuth.Http.Client.IClientHttpRequest"/> for the specified URI and HTTP method.
            </summary>
            <param name="uri">The URI to create a request for.</param>
            <param name="method">The HTTP method to execute.</param>
            <returns>The created request</returns>
        </member>
        <member name="T:YSWL.OAuth.Http.Client.WebClientHttpResponse">
            <summary>
            <see cref="T:YSWL.OAuth.Http.Client.IClientHttpResponse"/> implementation that uses 
            .NET <see cref="P:YSWL.OAuth.Http.Client.WebClientHttpResponse.HttpWebResponse"/>'s class to read responses.
            </summary>
            <author>Bruno Baia</author>
        </member>
        <member name="P:YSWL.OAuth.Http.Client.WebClientHttpResponse.HttpWebResponse">
            <summary>
            Gets the <see cref="P:YSWL.OAuth.Http.Client.WebClientHttpResponse.HttpWebResponse"/> instance used by the response.
            </summary>
        </member>
        <member name="M:YSWL.OAuth.Http.Client.WebClientHttpResponse.#ctor(System.Net.HttpWebResponse)">
            <summary>
            Creates a new instance of <see cref="T:YSWL.OAuth.Http.Client.WebClientHttpResponse"/> 
            with the given <see cref="P:YSWL.OAuth.Http.Client.WebClientHttpResponse.HttpWebResponse"/> instance.
            </summary>
            <param name="response">The <see cref="P:YSWL.OAuth.Http.Client.WebClientHttpResponse.HttpWebResponse"/> instance to use.</param>
        </member>
        <member name="P:YSWL.OAuth.Http.Client.WebClientHttpResponse.Headers">
            <summary>
            Gets the message headers.
            </summary>
        </member>
        <member name="P:YSWL.OAuth.Http.Client.WebClientHttpResponse.Body">
            <summary>
            Gets the body of the message as a stream.
            </summary>
        </member>
        <member name="P:YSWL.OAuth.Http.Client.WebClientHttpResponse.StatusCode">
            <summary>
            Gets the HTTP status code of the response.
            </summary>
        </member>
        <member name="P:YSWL.OAuth.Http.Client.WebClientHttpResponse.StatusDescription">
            <summary>
            Gets the HTTP status description of the response.
            </summary>
        </member>
        <member name="M:YSWL.OAuth.Http.Client.WebClientHttpResponse.Close">
            <summary>
            Closes this response, freeing any resources created.
            </summary>
        </member>
        <member name="M:YSWL.OAuth.Http.Client.WebClientHttpResponse.Initialize">
            <summary>
            Initialize the response.
            </summary>
            <remarks>
            Default implementation copies headers from the .NET response. Can be overridden in subclasses.
            </remarks>
        </member>
        <member name="T:YSWL.OAuth.Http.Converters.AbstractHttpMessageConverter">
            <summary>
            Base class for most <see cref="T:YSWL.OAuth.Http.Converters.IHttpMessageConverter"/> implementations.
            </summary>
            <remarks>
            This base class adds support for setting supported <see cref="T:YSWL.OAuth.Http.MediaType"/>s, through the
            <see cref="P:SupportedMediaTypes"/> property. 
            It also adds support for 'Content-Type' when writing to the HTTP message.
            </remarks>
            <author>Arjen Poutsma</author>
            <author>Juergen Hoeller</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="M:YSWL.OAuth.Http.Converters.AbstractHttpMessageConverter.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:YSWL.OAuth.Http.Converters.AbstractHttpMessageConverter"/> 
            with no supported media types.
            </summary>
        </member>
        <member name="M:YSWL.OAuth.Http.Converters.AbstractHttpMessageConverter.#ctor(YSWL.OAuth.Http.MediaType[])">
            <summary>
            Creates a new instance of the <see cref="T:YSWL.OAuth.Http.Converters.AbstractHttpMessageConverter"/> 
            with multiple supported media type.
            </summary>
            <param name="supportedMediaTypes">The supported media types.</param>
        </member>
        <member name="M:YSWL.OAuth.Http.Converters.AbstractHttpMessageConverter.CanRead(System.Type,YSWL.OAuth.Http.MediaType)">
            <summary>
            Indicates whether the given class can be read by this converter.
            </summary>
            <remarks>
            This implementation checks if the given class is <see cref="M:Supports(Type)">supported</see>, 
            and if the <see cref="P:SupportedMediaTypes">supported media types</see> <see cref="M:MediaType.Includes(MediaType)">include</see> 
            the given media type.
            </remarks>
            <param name="type">The class to test for readability</param>
            <param name="mediaType">
            The media type to read, can be null if not specified. Typically the value of a 'Content-Type' header.
            </param>
            <returns><see langword="true"/> if readable; otherwise <see langword="false"/></returns>
        </member>
        <member name="M:YSWL.OAuth.Http.Converters.AbstractHttpMessageConverter.CanWrite(System.Type,YSWL.OAuth.Http.MediaType)">
            <summary>
            Indicates whether the given class can be written by this converter.
            </summary>
            <remarks>
            This implementation checks if the given class is <see cref="M:Supports(Type)">supported</see>, 
            and if the <see cref="P:SupportedMediaTypes">supported media types</see> <see cref="M:MediaType.Includes(MediaType)">include</see> 
            the given media type.
            </remarks>
            <param name="type">The class to test for writability</param>
            <param name="mediaType">
            The media type to write, can be null if not specified. Typically the value of an 'Accept' header.
            </param>
            <returns><see langword="true"/> if writable; otherwise <see langword="false"/></returns>
        </member>
        <member name="P:YSWL.OAuth.Http.Converters.AbstractHttpMessageConverter.SupportedMediaTypes">
            <summary>
            Gets or sets the list of <see cref="T:YSWL.OAuth.Http.MediaType"/> objects supported by this converter.
            </summary>
        </member>
        <member name="M:YSWL.OAuth.Http.Converters.AbstractHttpMessageConverter.Read``1(YSWL.OAuth.Http.IHttpInputMessage)">
            <summary>
            Read an object of the given type form the given HTTP message, and returns it.
            </summary>
            <remarks>
            This implementation simple delegates to <see cre="ReadInternal"/> method. 
            Future implementations might add some default behavior, however.
            </remarks>
            <typeparam name="T">
            The type of object to return. This type must have previously been passed to the 
            <see cref="M:CanRead"/> method of this interface, which must have returned <see langword="true"/>.
            </typeparam>
            <param name="message">The HTTP message to read from.</param>
            <returns>The converted object.</returns>
            <exception cref="T:YSWL.OAuth.Http.Converters.HttpMessageNotReadableException">In case of conversion errors</exception>
        </member>
        <member name="M:YSWL.OAuth.Http.Converters.AbstractHttpMessageConverter.Write(System.Object,YSWL.OAuth.Http.MediaType,YSWL.OAuth.Http.IHttpOutputMessage)">
            <summary>
            Write an given object to the given HTTP message.
            </summary>
            <remarks>
            This implementation delegates to <see cref="M:GetDefaultContentType"/> method if a content 
            type was not provided, and calls <see cref="M:WriteInternal"/>.
            </remarks>
            <param name="content">
            The object to write to the HTTP message. The type of this object must have previously been 
            passed to the <see cref="M:CanWrite"/> method of this interface, which must have returned <see langword="true"/>.
            </param>
            <param name="contentType">
            The content type to use when writing. May be null to indicate that the default content type of the converter must be used. 
            If not null, this media type must have previously been passed to the <see cref="M:CanWrite"/> method of this interface, 
            which must have returned <see langword="true"/>.
            </param>
            <param name="message">The HTTP message to write to.</param>
            <exception cref="T:YSWL.OAuth.Http.Converters.HttpMessageNotWritableException">In case of conversion errors</exception>
        </member>
        <member name="M:YSWL.OAuth.Http.Converters.AbstractHttpMessageConverter.CanRead(YSWL.OAuth.Http.MediaType)">
            <summary>
            Returns true if any of the <see cref="P:SupportedMediaTypes">supported media types</see> include the given media type.
            </summary>
            <param name="mediaType">
            The media type to read, can be null if not specified. Typically the value of a 'Content-Type' header.
            </param>
            <returns>
            <see langword="true"/> if the supported media types include the media type, or if the media type is null.
            </returns>        
        </member>
        <member name="M:YSWL.OAuth.Http.Converters.AbstractHttpMessageConverter.CanWrite(YSWL.OAuth.Http.MediaType)">
            <summary>
            Returns true if the given media type includes any of the <see cref="P:SupportedMediaTypes">supported media types</see>.
            </summary>
            <param name="mediaType">
            The media type to write, can be null if not specified. Typically the value of an 'Accept' header.
            </param>
            <returns>
            <see langword="true"/> if the supported media types are compatible with the media type, or if the media type is null.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.Http.Converters.AbstractHttpMessageConverter.GetDefaultContentType(System.Object)">
            <summary>
            Returns the default content type for the given object. 
            Called when <see cref="M:Write"/> is invoked without a specified content type parameter.
            </summary>
            <remarks>
            By default, this returns the first element of the <see cref="P:SupportedMediaTypes"/> property, if any.
            </remarks>
            <param name="content">The object to return the content type for.</param>
            <returns>The <see cref="T:YSWL.OAuth.Http.MediaType">content type</see>, or null if not known.</returns>
        </member>
        <member name="M:YSWL.OAuth.Http.Converters.AbstractHttpMessageConverter.GetContentTypeCharset(YSWL.OAuth.Http.MediaType,System.Text.Encoding)">
            <summary>
            Returns the <see cref="T:System.Text.Encoding">character set</see> for the given Internet media type.
            </summary>
            <param name="contentType">The Internet media type.</param>
            <param name="defaultEncoding">
            The default character to use if not specified by the media type.
            </param>
            <returns>The character set.</returns>
        </member>
        <member name="M:YSWL.OAuth.Http.Converters.AbstractHttpMessageConverter.Supports(System.Type)">
            <summary>
            Indicates whether the given class is supported by this converter.
            </summary>
            <param name="type">The type to test for support.</param>
            <returns><see langword="true"/> if supported; otherwise <see langword="false"/></returns>
        </member>
        <member name="M:YSWL.OAuth.Http.Converters.AbstractHttpMessageConverter.ReadInternal``1(YSWL.OAuth.Http.IHttpInputMessage)">
            <summary>
            Abstract template method that reads the actualy object. Invoked from <see cref="M:Read"/>.
            </summary>
            <typeparam name="T">The type of object to return.</typeparam>
            <param name="message">The HTTP message to read from.</param>
            <returns>The converted object.</returns>
            <exception cref="T:YSWL.OAuth.Http.Converters.HttpMessageNotReadableException">In case of conversion errors</exception>
        </member>
        <member name="M:YSWL.OAuth.Http.Converters.AbstractHttpMessageConverter.WriteInternal(System.Object,YSWL.OAuth.Http.IHttpOutputMessage)">
            <summary>
            Abstract template method that writes the actual body. Invoked from <see cref="M:Write"/>.
            </summary>
            <param name="content">The object to write to the HTTP message.</param>
            <param name="message">The HTTP message to write to.</param>
            <exception cref="T:YSWL.OAuth.Http.Converters.HttpMessageNotWritableException">In case of conversion errors</exception>
        </member>
        <member name="T:YSWL.OAuth.Http.Converters.ByteArrayHttpMessageConverter">
            <summary>
            Implementation of <see cref="T:YSWL.OAuth.Http.Converters.IHttpMessageConverter"/> that can read and write byte arrays.
            </summary>
            <remarks>
            By default, this converter supports all media types '*/*', and writes with a 'Content-Type' 
            of 'application/octet-stream'. 
            This can be overridden by setting the <see cref="P:SupportedMediaTypes"/> property.
            </remarks>
            <author>Arjen Poutsma</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="M:YSWL.OAuth.Http.Converters.ByteArrayHttpMessageConverter.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:YSWL.OAuth.Http.Converters.ByteArrayHttpMessageConverter"/> 
            with 'application/octet-stream', and '*/*' media types.
            </summary>
        </member>
        <member name="M:YSWL.OAuth.Http.Converters.ByteArrayHttpMessageConverter.Supports(System.Type)">
            <summary>
            Indicates whether the given class is supported by this converter.
            </summary>
            <param name="type">The type to test for support.</param>
            <returns><see langword="true"/> if supported; otherwise <see langword="false"/></returns>
        </member>
        <member name="M:YSWL.OAuth.Http.Converters.ByteArrayHttpMessageConverter.ReadInternal``1(YSWL.OAuth.Http.IHttpInputMessage)">
            <summary>
            Abstract template method that reads the actualy object. Invoked from <see cref="M:Read"/>.
            </summary>
            <typeparam name="T">The type of object to return.</typeparam>
            <param name="message">The HTTP message to read from.</param>
            <returns>The converted object.</returns>
            <exception cref="T:YSWL.OAuth.Http.Converters.HttpMessageNotReadableException">In case of conversion errors</exception>
        </member>
        <member name="M:YSWL.OAuth.Http.Converters.ByteArrayHttpMessageConverter.WriteInternal(System.Object,YSWL.OAuth.Http.IHttpOutputMessage)">
            <summary>
            Abstract template method that writes the actual body. Invoked from <see cref="M:Write"/>.
            </summary>
            <param name="content">The object to write to the HTTP message.</param>
            <param name="message">The HTTP message to write to.</param>
            <exception cref="T:YSWL.OAuth.Http.Converters.HttpMessageNotWritableException">In case of conversion errors</exception>
        </member>
        <member name="T:YSWL.OAuth.Http.Converters.Feed.AbstractFeedHttpMessageConverter">
            <summary>
            Base class for Atom and RSS Feed message converters 
            using the <see cref="T:System.ServiceModel.Syndication.SyndicationFeed"/> class.
            </summary>
            <author>Bruno Baia</author>
        </member>
        <member name="M:YSWL.OAuth.Http.Converters.Feed.AbstractFeedHttpMessageConverter.#ctor(YSWL.OAuth.Http.MediaType[])">
            <summary>
            Creates a new instance of the <see cref="T:YSWL.OAuth.Http.Converters.Xml.AbstractXmlHttpMessageConverter"/> 
            with multiple supported media type.
            </summary>
            <param name="supportedMediaTypes">The supported media types.</param>
        </member>
        <member name="M:YSWL.OAuth.Http.Converters.Feed.AbstractFeedHttpMessageConverter.Supports(System.Type)">
            <summary>
            Indicates whether the given class is supported by this converter.
            </summary>
            <param name="type">The type to test for support.</param>
            <returns><see langword="true"/> if supported; otherwise <see langword="false"/></returns>
        </member>
        <member name="M:YSWL.OAuth.Http.Converters.Feed.AbstractFeedHttpMessageConverter.ReadXml``1(System.Xml.XmlReader)">
            <summary>
            Abstract template method that reads the actualy object using a <see cref="T:System.Xml.XmlReader"/>. Invoked from <see cref="M:ReadInternal"/>.
            </summary>
            <typeparam name="T">The type of object to return.</typeparam>
            <param name="xmlReader">The XmlReader to use.</param>
            <returns>The converted object.</returns>
        </member>
        <member name="M:YSWL.OAuth.Http.Converters.Feed.AbstractFeedHttpMessageConverter.GetXmlReaderSettings">
            <summary>
            Returns the <see cref="T:System.Xml.XmlReaderSettings">XmlReader settings</see> 
            used by this converter to read from the HTTP message.
            </summary>
            <returns>The XmlReader settings.</returns>
        </member>
        <member name="T:YSWL.OAuth.Http.Converters.Feed.Atom10FeedHttpMessageConverter">
            <summary>
            Implementation of <see cref="T:YSWL.OAuth.Http.Converters.IHttpMessageConverter"/> that can read and write Atom feeds 
            using the <see cref="T:System.ServiceModel.Syndication.SyndicationFeed"/> class.
            </summary>
            <remarks>
            By default, this converter reads and writes the media type 'application/atom+xml' media type. 
            This can be overridden by setting the <see cref="P:SupportedMediaTypes"/> property.
            </remarks>
            <author>Bruno Baia</author>
        </member>
        <member name="M:YSWL.OAuth.Http.Converters.Feed.Atom10FeedHttpMessageConverter.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:YSWL.OAuth.Http.Converters.Feed.Atom10FeedHttpMessageConverter"/> 
            with 'application/atom+xml' media type. 
            </summary>
        </member>
        <member name="M:YSWL.OAuth.Http.Converters.Feed.Atom10FeedHttpMessageConverter.WriteXml(System.Xml.XmlWriter,System.Object)">
            <summary>
            Abstract template method that writes the actual body using a <see cref="T:System.Xml.XmlWriter"/>. Invoked from <see cref="M:WriteInternal"/>.
            </summary>
            <param name="xmlWriter">The XmlWriter to use.</param>
            <param name="content">The object to write to the HTTP message.</param>
        </member>
        <member name="T:YSWL.OAuth.Http.Converters.Feed.Rss20FeedHttpMessageConverter">
            <summary>
            Implementation of <see cref="T:YSWL.OAuth.Http.Converters.IHttpMessageConverter"/> that can read and write RSS feeds 
            using the <see cref="T:System.ServiceModel.Syndication.SyndicationFeed"/> class.
            </summary>
            <remarks>
            By default, this converter reads and writes the media type 'application/rss+xml' media type. 
            This can be overridden by setting the <see cref="P:SupportedMediaTypes"/> property.
            </remarks>
            <author>Bruno Baia</author>
        </member>
        <member name="M:YSWL.OAuth.Http.Converters.Feed.Rss20FeedHttpMessageConverter.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:YSWL.OAuth.Http.Converters.Feed.Rss20FeedHttpMessageConverter"/> 
            with 'application/rss+xml' media type. 
            </summary>
        </member>
        <member name="M:YSWL.OAuth.Http.Converters.Feed.Rss20FeedHttpMessageConverter.WriteXml(System.Xml.XmlWriter,System.Object)">
            <summary>
            Abstract template method that writes the actual body using a <see cref="T:System.Xml.XmlWriter"/>. Invoked from <see cref="M:WriteInternal"/>.
            </summary>
            <param name="xmlWriter">The XmlWriter to use.</param>
            <param name="content">The object to write to the HTTP message.</param>
        </member>
        <member name="T:YSWL.OAuth.Http.Converters.FileInfoHttpMessageConverter">
            <summary>
            Implementation of <see cref="T:YSWL.OAuth.Http.Converters.IHttpMessageConverter"/> that can write files.
            </summary>
            <remarks>
            A mapping between file extension and mime types is used to determine the Content-Type of written files. 
            If no Content-Type is available, 'application/octet-stream' is used.
            </remarks>
            <author>Bruno Baia</author>
        </member>
        <member name="M:YSWL.OAuth.Http.Converters.FileInfoHttpMessageConverter.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:YSWL.OAuth.Http.Converters.FileInfoHttpMessageConverter"/>.
            </summary>
        </member>
        <member name="M:YSWL.OAuth.Http.Converters.FileInfoHttpMessageConverter.CanRead(System.Type,YSWL.OAuth.Http.MediaType)">
            <summary>
            Indicates whether the given class can be read by this converter.
            </summary>
            <param name="type">The class to test for readability</param>
            <param name="mediaType">
            The media type to read, can be null if not specified. Typically the value of a 'Content-Type' header.
            </param>
            <returns><see langword="true"/> if readable; otherwise <see langword="false"/></returns>
        </member>
        <member name="M:YSWL.OAuth.Http.Converters.FileInfoHttpMessageConverter.CanWrite(System.Type,YSWL.OAuth.Http.MediaType)">
            <summary>
            Indicates whether the given class can be written by this converter.
            </summary>
            <param name="type">The class to test for writability</param>
            <param name="mediaType">
            The media type to write, can be null if not specified. Typically the value of an 'Accept' header.
            </param>
            <returns><see langword="true"/> if writable; otherwise <see langword="false"/></returns>
        </member>
        <member name="M:YSWL.OAuth.Http.Converters.FileInfoHttpMessageConverter.Read``1(YSWL.OAuth.Http.IHttpInputMessage)">
            <summary>
            Read an object of the given type form the given HTTP message, and returns it.
            </summary>
            <typeparam name="T">
            The type of object to return. This type must have previously been passed to the 
            <see cref="M:CanRead"/> method of this interface, which must have returned <see langword="true"/>.
            </typeparam>
            <param name="message">The HTTP message to read from.</param>
            <returns>The converted object.</returns>
            <exception cref="T:YSWL.OAuth.Http.Converters.HttpMessageNotReadableException">In case of conversion errors</exception>
        </member>
        <member name="M:YSWL.OAuth.Http.Converters.FileInfoHttpMessageConverter.Write(System.Object,YSWL.OAuth.Http.MediaType,YSWL.OAuth.Http.IHttpOutputMessage)">
            <summary>
            Write an given object to the given HTTP message.
            </summary>
            <param name="content">
            The object to write to the HTTP message. The type of this object must have previously been 
            passed to the <see cref="M:CanWrite"/> method of this interface, which must have returned <see langword="true"/>.
            </param>
            <param name="contentType">
            The content type to use when writing. May be null to indicate that the default content type of the converter must be used. 
            If not null, this media type must have previously been passed to the <see cref="M:CanWrite"/> method of this interface, 
            which must have returned <see langword="true"/>.
            </param>
            <param name="message">The HTTP message to write to.</param>
            <exception cref="T:YSWL.OAuth.Http.Converters.HttpMessageNotWritableException">In case of conversion errors</exception>
        </member>
        <member name="T:YSWL.OAuth.Http.Converters.FormHttpMessageConverter">
            <summary>
            Implementation of <see cref="T:YSWL.OAuth.Http.Converters.IHttpMessageConverter"/> that can handle form data, 
            including multipart form data (i.e. file uploads).
            </summary>
            <remarks>
            <para>
            This converter supports the 'application/x-www-form-urlencoded' and 'multipart/form-data' media 
            types, and read the 'application/x-www-form-urlencoded' media type (but not 'multipart/form-data').
            </para>
            <para>
            This converter uses UTF-8 to write form data as recommended by the W3C.
            </para>
            <para>
            In other words, this converter can read and write 'normal' HTML forms (as <see cref="T:System.Collections.Specialized.NameValueCollection"/>), 
            and it can write multipart form (as <see cref="T:System.Collections.Generic.IDictionary`2"/>). 
            When writing multipart, this converter uses other <see cref="T:YSWL.OAuth.Http.Converters.IHttpMessageConverter"/> to write the respective MIME parts. 
            By default, basic converters are registered (supporting <see cref="T:System.String"/>, <see cref="T:System.IO.FileInfo"/> 
            and <see cref="T:YSWL.OAuth.IO.IResource"/>, for instance); these can be overridden by setting <see cref="P:PartConverters"/> property.
            </para>
            <para>
            For example, the following snippet shows how to submit an HTML form:
            <code>
            RestTemplate template = new RestTemplate(); // FormHttpMessageConverter is configured by default
            NameValueCollection form = new NameValueCollection();
            form.Add("field 1", "value 1");
            form.Add("field 2", "value 2");
            form.Add("field 2", "value 3");
            template.PostForLocation("http://example.com/myForm", form);
            </code>
            </para>
            <para>
            The following snippet shows how to do a file upload:
            <code>
            RestTemplate template = new RestTemplate();
            IDictionary&lt;string, object> parts = new Dictionary&lt;string, object>();
            parts.Add("field 1", "value 1");
            parts.Add("file", new FileResource(@"C:\myDir\myFile.jpg"));
            template.PostForLocation("http://example.com/myFileUpload", parts);
            </code>
            </para>
            </remarks>
            <author>Arjen Poutsma</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="F:YSWL.OAuth.Http.Converters.FormHttpMessageConverter.DEFAULT_CHARSET">
            <summary>
            Default encoding for forms.
            </summary>
        </member>
        <member name="P:YSWL.OAuth.Http.Converters.FormHttpMessageConverter.PartConverters">
            <summary>
            Gets or sets the message body converters to use. 
            These converters are used to convert objects to MIME parts.
            </summary>
        </member>
        <member name="M:YSWL.OAuth.Http.Converters.FormHttpMessageConverter.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:YSWL.OAuth.Http.Converters.FormHttpMessageConverter"/>.
            </summary>
        </member>
        <member name="M:YSWL.OAuth.Http.Converters.FormHttpMessageConverter.CanRead(System.Type,YSWL.OAuth.Http.MediaType)">
            <summary>
            Indicates whether the given class can be read by this converter.
            </summary>
            <param name="type">The class to test for readability</param>
            <param name="mediaType">
            The media type to read, can be null if not specified. Typically the value of a 'Content-Type' header.
            </param>
            <returns><see langword="true"/> if readable; otherwise <see langword="false"/></returns>
        </member>
        <member name="M:YSWL.OAuth.Http.Converters.FormHttpMessageConverter.CanWrite(System.Type,YSWL.OAuth.Http.MediaType)">
            <summary>
            Indicates whether the given class can be written by this converter.
            </summary>
            <param name="type">The class to test for writability</param>
            <param name="mediaType">
            The media type to write, can be null if not specified. Typically the value of an 'Accept' header.
            </param>
            <returns><see langword="true"/> if writable; otherwise <see langword="false"/></returns>
        </member>
        <member name="P:YSWL.OAuth.Http.Converters.FormHttpMessageConverter.SupportedMediaTypes">
            <summary>
            Gets the list of <see cref="T:YSWL.OAuth.Http.MediaType"/> objects supported by this converter.
            </summary>
        </member>
        <member name="M:YSWL.OAuth.Http.Converters.FormHttpMessageConverter.Read``1(YSWL.OAuth.Http.IHttpInputMessage)">
            <summary>
            Read an object of the given type form the given HTTP message, and returns it.
            </summary>
            <typeparam name="T">
            The type of object to return. This type must have previously been passed to the 
            <see cref="M:CanRead"/> method of this interface, which must have returned <see langword="true"/>.
            </typeparam>
            <param name="message">The HTTP message to read from.</param>
            <returns>The converted object.</returns>
            <exception cref="T:YSWL.OAuth.Http.Converters.HttpMessageNotReadableException">In case of conversion errors</exception>
        </member>
        <member name="M:YSWL.OAuth.Http.Converters.FormHttpMessageConverter.Write(System.Object,YSWL.OAuth.Http.MediaType,YSWL.OAuth.Http.IHttpOutputMessage)">
            <summary>
            Write an given object to the given HTTP message.
            </summary>
            <param name="content">
            The object to write to the HTTP message. The type of this object must have previously been 
            passed to the <see cref="M:CanWrite"/> method of this interface, which must have returned <see langword="true"/>.
            </param>
            <param name="contentType">
            The content type to use when writing. May be null to indicate that the default content type of the converter must be used. 
            If not null, this media type must have previously been passed to the <see cref="M:CanWrite"/> method of this interface, 
            which must have returned <see langword="true"/>.
            </param>
            <param name="message">The HTTP message to write to.</param>
            <exception cref="T:YSWL.OAuth.Http.Converters.HttpMessageNotWritableException">In case of conversion errors</exception>
        </member>
        <member name="M:YSWL.OAuth.Http.Converters.FormHttpMessageConverter.GenerateMultipartBoundary">
            <summary>
            Generates a multipart boundary.
            </summary>
            <remarks>
            Default implementation returns a random boundary. Can be overridden in subclasses.
            </remarks>
            <returns>A multipart boundary</returns>
        </member>
        <member name="M:YSWL.OAuth.Http.Converters.FormHttpMessageConverter.GetMultipartFilename(System.Object)">
            <summary>
            Return the filename of the given multipart part to be used for the 'Content-Disposition' header.
            </summary>
            <remarks>
            Default implementation returns <see cref="P:FileInfo.Name"/> if the part is a <see cref="T:System.IO.FileInfo"/>, 
            extracts the file name from the URI if the part is a <see cref="T:YSWL.OAuth.IO.IResource"/> 
            and <see langword="null"/> in other cases. Can be overridden in subclasses.
            </remarks>
            <param name="part">The part to determine the file name for</param>
            <returns>The filename, or <see langword="null"/> if not known</returns>
        </member>
        <member name="M:YSWL.OAuth.Http.Converters.FormHttpMessageConverter.GetContentDispositionFormData(System.String,System.String)">
            <summary>
            Return the value of the 'Content-Disposition' header for 'form-data'.
            </summary>
            <param name="name">The field name</param>
            <param name="filename">The filename, may be <see langwrod="null"/></param>
            <returns>The value of the 'Content-Disposition' header</returns>
        </member>
        <member name="T:YSWL.OAuth.Http.Converters.FormHttpMessageConverter.MultipartHttpOutputMessage">
            <summary>
            Implementation of <see cref="T:YSWL.OAuth.Http.IHttpOutputMessage"/> used for writing multipart data.
            </summary>
        </member>
        <member name="T:YSWL.OAuth.Http.Converters.HttpMessageConversionException">
            <summary>
            Exception thrown by <see cref="T:YSWL.OAuth.Http.Converters.IHttpMessageConverter"/> implementations when the conversion fails.
            </summary>
            <author>Arjen Poutsma</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="M:YSWL.OAuth.Http.Converters.HttpMessageConversionException.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:YSWL.OAuth.Http.Converters.HttpMessageConversionException"/> class.
            </summary>
        </member>
        <member name="M:YSWL.OAuth.Http.Converters.HttpMessageConversionException.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:YSWL.OAuth.Http.Converters.HttpMessageConversionException"/> class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
        </member>
        <member name="M:YSWL.OAuth.Http.Converters.HttpMessageConversionException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the <see cref="T:YSWL.OAuth.Http.Converters.HttpMessageConversionException"/> class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="rootCause">
            The root exception that is being wrapped.
            </param>
        </member>
        <member name="M:YSWL.OAuth.Http.Converters.HttpMessageConversionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the <see cref="T:YSWL.OAuth.Http.Converters.HttpMessageConversionException"/> class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="T:YSWL.OAuth.Http.Converters.HttpMessageNotReadableException">
            <summary>
            Exception thrown by <see cref="T:YSWL.OAuth.Http.Converters.IHttpMessageConverter"/> implementations 
            when reading from HTTP message fails.
            </summary>
            <author>Arjen Poutsma</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="M:YSWL.OAuth.Http.Converters.HttpMessageNotReadableException.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:YSWL.OAuth.Http.Converters.HttpMessageNotReadableException"/> class.
            </summary>
        </member>
        <member name="M:YSWL.OAuth.Http.Converters.HttpMessageNotReadableException.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:YSWL.OAuth.Http.Converters.HttpMessageNotReadableException"/> class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
        </member>
        <member name="M:YSWL.OAuth.Http.Converters.HttpMessageNotReadableException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the <see cref="T:YSWL.OAuth.Http.Converters.HttpMessageNotReadableException"/> class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="rootCause">
            The root exception that is being wrapped.
            </param>
        </member>
        <member name="M:YSWL.OAuth.Http.Converters.HttpMessageNotReadableException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the <see cref="T:YSWL.OAuth.Http.Converters.HttpMessageNotReadableException"/> class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="T:YSWL.OAuth.Http.Converters.HttpMessageNotWritableException">
            <summary>
            Exception thrown by <see cref="T:YSWL.OAuth.Http.Converters.IHttpMessageConverter"/> implementations 
            when writing to HTTP message fails.
            </summary>
            <author>Arjen Poutsma</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="M:YSWL.OAuth.Http.Converters.HttpMessageNotWritableException.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:YSWL.OAuth.Http.Converters.HttpMessageNotWritableException"/> class.
            </summary>
        </member>
        <member name="M:YSWL.OAuth.Http.Converters.HttpMessageNotWritableException.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:YSWL.OAuth.Http.Converters.HttpMessageNotWritableException"/> class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
        </member>
        <member name="M:YSWL.OAuth.Http.Converters.HttpMessageNotWritableException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the <see cref="T:YSWL.OAuth.Http.Converters.HttpMessageNotWritableException"/> class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="rootCause">
            The root exception that is being wrapped.
            </param>
        </member>
        <member name="M:YSWL.OAuth.Http.Converters.HttpMessageNotWritableException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the <see cref="T:YSWL.OAuth.Http.Converters.HttpMessageNotWritableException"/> class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="T:YSWL.OAuth.Http.Converters.IHttpMessageConverter">
            <summary>
            Strategy interface that specifies a converter that can convert from and to HTTP messages.
            </summary>
            <author>Arjen Poutsma</author>
            <author>Juergen Hoeller</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="M:YSWL.OAuth.Http.Converters.IHttpMessageConverter.CanRead(System.Type,YSWL.OAuth.Http.MediaType)">
            <summary>
            Indicates whether the given class can be read by this converter.
            </summary>
            <param name="type">The class to test for readability</param>
            <param name="mediaType">
            The media type to read, can be null if not specified. Typically the value of a 'Content-Type' header.
            </param>
            <returns><see langword="true"/> if readable; otherwise <see langword="false"/></returns>
        </member>
        <member name="M:YSWL.OAuth.Http.Converters.IHttpMessageConverter.CanWrite(System.Type,YSWL.OAuth.Http.MediaType)">
            <summary>
            Indicates whether the given class can be written by this converter.
            </summary>
            <param name="type">The class to test for writability</param>
            <param name="mediaType">
            The media type to write, can be null if not specified. Typically the value of an 'Accept' header.
            </param>
            <returns><see langword="true"/> if writable; otherwise <see langword="false"/></returns>
        </member>
        <member name="P:YSWL.OAuth.Http.Converters.IHttpMessageConverter.SupportedMediaTypes">
            <summary>
            Gets the list of <see cref="T:YSWL.OAuth.Http.MediaType"/> objects supported by this converter.
            </summary>        
        </member>
        <member name="M:YSWL.OAuth.Http.Converters.IHttpMessageConverter.Read``1(YSWL.OAuth.Http.IHttpInputMessage)">
            <summary>
            Read an object of the given type form the given HTTP message, and returns it.
            </summary>
            <typeparam name="T">
            The type of object to return. This type must have previously been passed to the 
            <see cref="M:CanRead"/> method of this interface, which must have returned <see langword="true"/>.
            </typeparam>
            <param name="message">The HTTP message to read from.</param>
            <returns>The converted object.</returns>
            <exception cref="T:YSWL.OAuth.Http.Converters.HttpMessageNotReadableException">In case of conversion errors</exception>
        </member>
        <member name="M:YSWL.OAuth.Http.Converters.IHttpMessageConverter.Write(System.Object,YSWL.OAuth.Http.MediaType,YSWL.OAuth.Http.IHttpOutputMessage)">
            <summary>
            Write an given object to the given HTTP message.
            </summary>
            <param name="content">
            The object to write to the HTTP message. The type of this object must have previously been 
            passed to the <see cref="M:CanWrite"/> method of this interface, which must have returned <see langword="true"/>.
            </param>
            <param name="contentType">
            The content type to use when writing. May be null to indicate that the default content type of the converter must be used. 
            If not null, this media type must have previously been passed to the <see cref="M:CanWrite"/> method of this interface, 
            which must have returned <see langword="true"/>.
            </param>
            <param name="message">The HTTP message to write to.</param>
            <exception cref="T:YSWL.OAuth.Http.Converters.HttpMessageNotWritableException">In case of conversion errors</exception>
        </member>
        <member name="T:YSWL.OAuth.Http.Converters.Json.DataContractJsonHttpMessageConverter">
            <summary>
            Implementation of <see cref="T:YSWL.OAuth.Http.Converters.IHttpMessageConverter"/> that can read and write JSON 
            using <see cref="T:System.Runtime.Serialization.Json.DataContractJsonSerializer"/>.
            </summary>
            <remarks>
            By default, this converter supports 'application/json' media type. 
            This can be overridden by setting the <see cref="P:SupportedMediaTypes"/> property.
            </remarks>
            <author>Bruno Baia</author>
        </member>
        <member name="F:YSWL.OAuth.Http.Converters.Json.DataContractJsonHttpMessageConverter.DEFAULT_CHARSET">
            <summary>
            Default encoding for JSON.
            </summary>
        </member>
        <member name="P:YSWL.OAuth.Http.Converters.Json.DataContractJsonHttpMessageConverter.KnownTypes">
            <summary>
            Gets or sets types that may be present in the object graph.
            </summary>
        </member>
        <member name="P:YSWL.OAuth.Http.Converters.Json.DataContractJsonHttpMessageConverter.RequiresAttribute">
            <summary>
            Indicates whether this converter supports only classes decorated with 
            <see cref="T:System.Runtime.Serialization.DataContractAttribute"/> and <see cref="T:System.Runtime.Serialization.CollectionDataContractAttribute"/>. 
            Default value is <c>false</c>.
            </summary>
        </member>
        <member name="M:YSWL.OAuth.Http.Converters.Json.DataContractJsonHttpMessageConverter.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:YSWL.OAuth.Http.Converters.Json.DataContractJsonHttpMessageConverter"/> 
            with the media type 'application/json'. 
            </summary>
        </member>
        <member name="M:YSWL.OAuth.Http.Converters.Json.DataContractJsonHttpMessageConverter.#ctor(System.Boolean)">
            <summary>
            Creates a new instance of the <see cref="T:YSWL.OAuth.Http.Converters.Json.DataContractJsonHttpMessageConverter"/> 
            with the media type 'application/json'. 
            </summary>
            <param name="requiresAttribute">
            If <c>true</c>, supports only classes decorated with 
            <see cref="T:System.Runtime.Serialization.DataContractAttribute"/> and <see cref="T:System.Runtime.Serialization.CollectionDataContractAttribute"/>. 
            </param>
        </member>
        <member name="M:YSWL.OAuth.Http.Converters.Json.DataContractJsonHttpMessageConverter.Supports(System.Type)">
            <summary>
            Indicates whether the given class is supported by this converter.
            </summary>
            <param name="type">The type to test for support.</param>
            <returns><see langword="true"/> if supported; otherwise <see langword="false"/></returns>
        </member>
        <member name="M:YSWL.OAuth.Http.Converters.Json.DataContractJsonHttpMessageConverter.ReadInternal``1(YSWL.OAuth.Http.IHttpInputMessage)">
            <summary>
            Abstract template method that reads the actualy object. Invoked from <see cref="M:Read"/>.
            </summary>
            <typeparam name="T">The type of object to return.</typeparam>
            <param name="message">The HTTP message to read from.</param>
            <returns>The converted object.</returns>
            <exception cref="T:YSWL.OAuth.Http.Converters.HttpMessageNotReadableException">In case of conversion errors</exception>
        </member>
        <member name="M:YSWL.OAuth.Http.Converters.Json.DataContractJsonHttpMessageConverter.WriteInternal(System.Object,YSWL.OAuth.Http.IHttpOutputMessage)">
            <summary>
            Abstract template method that writes the actual body. Invoked from <see cref="M:Write"/>.
            </summary>
            <param name="content">The object to write to the HTTP message.</param>
            <param name="message">The HTTP message to write to.</param>
            <exception cref="T:YSWL.OAuth.Http.Converters.HttpMessageNotWritableException">In case of conversion errors</exception>
        </member>
        <member name="M:YSWL.OAuth.Http.Converters.Json.DataContractJsonHttpMessageConverter.GetSerializer(System.Type)">
            <summary>
            Creates an instance of <see cref="T:System.Runtime.Serialization.Json.DataContractJsonSerializer"/> to 
            serialize or deserialize an object of the specified type.
            </summary>
            <param name="type">The type of instances to serialize or deserialize.</param>
            <returns>The serializer to use.</returns>
        </member>
        <member name="T:YSWL.OAuth.Http.Converters.Json.JsonHttpMessageConverter">
            <summary>
            Implementation of <see cref="T:YSWL.OAuth.Http.Converters.IHttpMessageConverter"/> that can read and write JSON 
            using <see cref="T:System.Runtime.Serialization.Json.DataContractJsonSerializer"/>.
            </summary>
            <remarks>
            By default, this converter supports 'application/json' media type. 
            This can be overridden by setting the <see cref="P:SupportedMediaTypes"/> property.
            </remarks>
            <author>Bruno Baia</author>
        </member>
        <member name="M:YSWL.OAuth.Http.Converters.Json.JsonHttpMessageConverter.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:YSWL.OAuth.Http.Converters.Json.JsonHttpMessageConverter"/> 
            with the media type 'application/json'. 
            </summary>
        </member>
        <member name="M:YSWL.OAuth.Http.Converters.Json.JsonHttpMessageConverter.#ctor(System.Boolean)">
            <summary>
            Creates a new instance of the <see cref="T:YSWL.OAuth.Http.Converters.Json.JsonHttpMessageConverter"/> 
            with the media type 'application/json'. 
            </summary>
            <param name="requiresAttribute">
            If <c>true</c>, supports only classes decorated with 
            <see cref="T:System.Runtime.Serialization.DataContractAttribute"/> and <see cref="T:System.Runtime.Serialization.CollectionDataContractAttribute"/>. 
            </param>
        </member>
        <member name="T:YSWL.OAuth.Http.Converters.Json.SpringJsonHttpMessageConverter">
            <summary>
            Implementation of <see cref="T:YSWL.OAuth.Http.Converters.IHttpMessageConverter"/> that can read and write JSON 
            using the YSWL.OAuth.Json library.
            </summary>
            <remarks>
            <para>
            This implementation supports getting/setting values from JSON directly, 
            without the need to deserialize/serialize to a .NET class.
            </para>
            <para>
            By default, this converter supports 'application/json' media type. 
            This can be overridden by setting the <see cref="P:SupportedMediaTypes"/> property.
            </para>
            </remarks>
            <author>Bruno Baia</author>
        </member>
        <member name="F:YSWL.OAuth.Http.Converters.Json.SpringJsonHttpMessageConverter.DEFAULT_CHARSET">
            <summary>
            Default encoding for JSON strings.
            </summary>
        </member>
        <member name="P:YSWL.OAuth.Http.Converters.Json.SpringJsonHttpMessageConverter.JsonMapper">
            <summary>
            Gets the underlying <see cref="P:YSWL.OAuth.Http.Converters.Json.SpringJsonHttpMessageConverter.JsonMapper"/> used for converting custom types.
            </summary>
        </member>
        <member name="M:YSWL.OAuth.Http.Converters.Json.SpringJsonHttpMessageConverter.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:YSWL.OAuth.Http.Converters.Json.SpringJsonHttpMessageConverter"/> 
            with the media type 'application/json'.
            </summary>
        </member>
        <member name="M:YSWL.OAuth.Http.Converters.Json.SpringJsonHttpMessageConverter.#ctor(YSWL.OAuth.Json.JsonMapper)">
            <summary>
            Creates a new instance of the <see cref="T:YSWL.OAuth.Http.Converters.Json.SpringJsonHttpMessageConverter"/> 
            with the media type 'application/json'.
            </summary>
            <param name="mapper">A <see cref="P:YSWL.OAuth.Http.Converters.Json.SpringJsonHttpMessageConverter.JsonMapper"/> to use for converting custom types.</param>
        </member>
        <member name="M:YSWL.OAuth.Http.Converters.Json.SpringJsonHttpMessageConverter.CanRead(System.Type,YSWL.OAuth.Http.MediaType)">
            <summary>
            Indicates whether the given class can be read by this converter.
            </summary>
            <param name="type">The class to test for readability</param>
            <param name="mediaType">
            The media type to read, can be null if not specified. Typically the value of a 'Content-Type' header.
            </param>
            <returns><see langword="true"/> if readable; otherwise <see langword="false"/></returns>
        </member>
        <member name="M:YSWL.OAuth.Http.Converters.Json.SpringJsonHttpMessageConverter.CanWrite(System.Type,YSWL.OAuth.Http.MediaType)">
            <summary>
            Indicates whether the given class can be written by this converter.
            </summary>
            <param name="type">The class to test for writability</param>
            <param name="mediaType">
            The media type to write, can be null if not specified. Typically the value of an 'Accept' header.
            </param>
            <returns><see langword="true"/> if writable; otherwise <see langword="false"/></returns>
        </member>
        <member name="M:YSWL.OAuth.Http.Converters.Json.SpringJsonHttpMessageConverter.Supports(System.Type)">
            <summary>
            Indicates whether the given class is supported by this converter.
            </summary>
            <param name="type">The type to test for support.</param>
            <returns><see langword="true"/> if supported; otherwise <see langword="false"/></returns>
        </member>
        <member name="M:YSWL.OAuth.Http.Converters.Json.SpringJsonHttpMessageConverter.ReadInternal``1(YSWL.OAuth.Http.IHttpInputMessage)">
            <summary>
            Abstract template method that reads the actualy object. Invoked from <see cref="M:Read"/>.
            </summary>
            <typeparam name="T">The type of object to return.</typeparam>
            <param name="message">The HTTP message to read from.</param>
            <returns>The converted object.</returns>
            <exception cref="T:YSWL.OAuth.Http.Converters.HttpMessageNotReadableException">In case of conversion errors</exception>
        </member>
        <member name="M:YSWL.OAuth.Http.Converters.Json.SpringJsonHttpMessageConverter.WriteInternal(System.Object,YSWL.OAuth.Http.IHttpOutputMessage)">
            <summary>
            Abstract template method that writes the actual body. Invoked from <see cref="M:Write"/>.
            </summary>
            <param name="content">The object to write to the HTTP message.</param>
            <param name="message">The HTTP message to write to.</param>
            <exception cref="T:YSWL.OAuth.Http.Converters.HttpMessageNotWritableException">In case of conversion errors</exception>
        </member>
        <member name="T:YSWL.OAuth.Http.Converters.Json.MsJsonHttpMessageConverter">
            <summary>
            Implementation of <see cref="T:YSWL.OAuth.Http.Converters.IHttpMessageConverter"/> that can read and write JSON 
            using the YSWL.OAuth.Json library.
            </summary>
            <remarks>
            <para>
            This implementation supports getting/setting values from JSON directly, 
            without the need to deserialize/serialize to a .NET class.
            </para>
            <para>
            By default, this converter supports 'application/json' media type. 
            This can be overridden by setting the <see cref="P:SupportedMediaTypes"/> property.
            </para>
            </remarks>
            <author>Ben</author>
        </member>
        <member name="F:YSWL.OAuth.Http.Converters.Json.MsJsonHttpMessageConverter.DEFAULT_CHARSET">
            <summary>
            Default encoding for JSON strings.
            </summary>
        </member>
        <member name="P:YSWL.OAuth.Http.Converters.Json.MsJsonHttpMessageConverter.JsonMapper">
            <summary>
            Gets the underlying <see cref="P:YSWL.OAuth.Http.Converters.Json.MsJsonHttpMessageConverter.JsonMapper"/> used for converting custom types.
            </summary>
        </member>
        <member name="M:YSWL.OAuth.Http.Converters.Json.MsJsonHttpMessageConverter.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:YSWL.OAuth.Http.Converters.Json.MsJsonHttpMessageConverter"/> 
            with the media type 'application/json'.
            </summary>
        </member>
        <member name="M:YSWL.OAuth.Http.Converters.Json.MsJsonHttpMessageConverter.#ctor(YSWL.OAuth.Json.JsonMapper)">
            <summary>
            Creates a new instance of the <see cref="T:YSWL.OAuth.Http.Converters.Json.MsJsonHttpMessageConverter"/> 
            with the media type 'application/json'.
            </summary>
            <param name="mapper">A <see cref="P:YSWL.OAuth.Http.Converters.Json.MsJsonHttpMessageConverter.JsonMapper"/> to use for converting custom types.</param>
        </member>
        <member name="M:YSWL.OAuth.Http.Converters.Json.MsJsonHttpMessageConverter.CanRead(System.Type,YSWL.OAuth.Http.MediaType)">
            <summary>
            Indicates whether the given class can be read by this converter.
            </summary>
            <param name="type">The class to test for readability</param>
            <param name="mediaType">
            The media type to read, can be null if not specified. Typically the value of a 'Content-Type' header.
            </param>
            <returns><see langword="true"/> if readable; otherwise <see langword="false"/></returns>
        </member>
        <member name="M:YSWL.OAuth.Http.Converters.Json.MsJsonHttpMessageConverter.CanWrite(System.Type,YSWL.OAuth.Http.MediaType)">
            <summary>
            Indicates whether the given class can be written by this converter.
            </summary>
            <param name="type">The class to test for writability</param>
            <param name="mediaType">
            The media type to write, can be null if not specified. Typically the value of an 'Accept' header.
            </param>
            <returns><see langword="true"/> if writable; otherwise <see langword="false"/></returns>
        </member>
        <member name="M:YSWL.OAuth.Http.Converters.Json.MsJsonHttpMessageConverter.Supports(System.Type)">
            <summary>
            Indicates whether the given class is supported by this converter.
            </summary>
            <param name="type">The type to test for support.</param>
            <returns><see langword="true"/> if supported; otherwise <see langword="false"/></returns>
        </member>
        <member name="M:YSWL.OAuth.Http.Converters.Json.MsJsonHttpMessageConverter.ReadInternal``1(YSWL.OAuth.Http.IHttpInputMessage)">
            <summary>
            Abstract template method that reads the actualy object. Invoked from <see cref="M:Read"/>.
            </summary>
            <typeparam name="T">The type of object to return.</typeparam>
            <param name="message">The HTTP message to read from.</param>
            <returns>The converted object.</returns>
            <exception cref="T:YSWL.OAuth.Http.Converters.HttpMessageNotReadableException">In case of conversion errors</exception>
        </member>
        <member name="M:YSWL.OAuth.Http.Converters.Json.MsJsonHttpMessageConverter.WriteInternal(System.Object,YSWL.OAuth.Http.IHttpOutputMessage)">
            <summary>
            Abstract template method that writes the actual body. Invoked from <see cref="M:Write"/>.
            </summary>
            <param name="content">The object to write to the HTTP message.</param>
            <param name="message">The HTTP message to write to.</param>
            <exception cref="T:YSWL.OAuth.Http.Converters.HttpMessageNotWritableException">In case of conversion errors</exception>
        </member>
        <member name="T:YSWL.OAuth.Http.Converters.Json.TextJsonHttpMessageConverter">
            <summary>
            Implementation of <see cref="T:YSWL.OAuth.Http.Converters.IHttpMessageConverter"/> that can read and write strings.
            </summary>
            <remarks>
            By default, this converter supports all media types '*/*', and writes with a 'Content-Type' 
            of 'text/plain'. 
            This can be overridden by setting the <see cref="P:SupportedMediaTypes"/> property.
            </remarks>
            <author>Ben</author>
        </member>
        <member name="F:YSWL.OAuth.Http.Converters.Json.TextJsonHttpMessageConverter.DEFAULT_CHARSET">
            <summary>
            Default encoding for JSON strings.
            </summary>
        </member>
        <member name="P:YSWL.OAuth.Http.Converters.Json.TextJsonHttpMessageConverter.JsonMapper">
            <summary>
            Gets the underlying <see cref="P:YSWL.OAuth.Http.Converters.Json.TextJsonHttpMessageConverter.JsonMapper"/> used for converting custom types.
            </summary>
        </member>
        <member name="M:YSWL.OAuth.Http.Converters.Json.TextJsonHttpMessageConverter.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:YSWL.OAuth.Http.Converters.Json.TextJsonHttpMessageConverter"/> 
            with the media type 'ALL'.
            </summary>
        </member>
        <member name="M:YSWL.OAuth.Http.Converters.Json.TextJsonHttpMessageConverter.#ctor(YSWL.OAuth.Json.JsonMapper)">
            <summary>
            Creates a new instance of the <see cref="T:YSWL.OAuth.Http.Converters.Json.TextJsonHttpMessageConverter"/> 
            with the media type 'ALL'.
            </summary>
            <param name="mapper">A <see cref="P:YSWL.OAuth.Http.Converters.Json.TextJsonHttpMessageConverter.JsonMapper"/> to use for converting custom types.</param>
        </member>
        <member name="M:YSWL.OAuth.Http.Converters.Json.TextJsonHttpMessageConverter.CanRead(System.Type,YSWL.OAuth.Http.MediaType)">
            <summary>
            Indicates whether the given class can be read by this converter.
            </summary>
            <param name="type">The class to test for readability</param>
            <param name="mediaType">
            The media type to read, can be null if not specified. Typically the value of a 'Content-Type' header.
            </param>
            <returns><see langword="true"/> if readable; otherwise <see langword="false"/></returns>
        </member>
        <member name="M:YSWL.OAuth.Http.Converters.Json.TextJsonHttpMessageConverter.CanWrite(System.Type,YSWL.OAuth.Http.MediaType)">
            <summary>
            Indicates whether the given class can be written by this converter.
            </summary>
            <param name="type">The class to test for writability</param>
            <param name="mediaType">
            The media type to write, can be null if not specified. Typically the value of an 'Accept' header.
            </param>
            <returns><see langword="true"/> if writable; otherwise <see langword="false"/></returns>
        </member>
        <member name="M:YSWL.OAuth.Http.Converters.Json.TextJsonHttpMessageConverter.Supports(System.Type)">
            <summary>
            Indicates whether the given class is supported by this converter.
            </summary>
            <param name="type">The type to test for support.</param>
            <returns><see langword="true"/> if supported; otherwise <see langword="false"/></returns>
        </member>
        <member name="M:YSWL.OAuth.Http.Converters.Json.TextJsonHttpMessageConverter.ReadInternal``1(YSWL.OAuth.Http.IHttpInputMessage)">
            <summary>
            Abstract template method that reads the actualy object. Invoked from <see cref="M:Read"/>.
            </summary>
            <typeparam name="T">The type of object to return.</typeparam>
            <param name="message">The HTTP message to read from.</param>
            <returns>The converted object.</returns>
            <exception cref="T:YSWL.OAuth.Http.Converters.HttpMessageNotReadableException">In case of conversion errors</exception>
        </member>
        <member name="M:YSWL.OAuth.Http.Converters.Json.TextJsonHttpMessageConverter.WriteInternal(System.Object,YSWL.OAuth.Http.IHttpOutputMessage)">
            <summary>
            Abstract template method that writes the actual body. Invoked from <see cref="M:Write"/>.
            </summary>
            <param name="content">The object to write to the HTTP message.</param>
            <param name="message">The HTTP message to write to.</param>
            <exception cref="T:YSWL.OAuth.Http.Converters.HttpMessageNotWritableException">In case of conversion errors</exception>
        </member>
        <member name="T:YSWL.OAuth.Http.Converters.ResourceHttpMessageConverter">
            <summary>
            Implementation of <see cref="T:YSWL.OAuth.Http.Converters.IHttpMessageConverter"/> that can read and write <see cref="T:YSWL.OAuth.IO.IResource"/>s.
            </summary>
            <remarks>
            <para>
            By default, this converter supports all media types.
            </para>
            <para>
            A mapping between file extension and mime types is used to determine the Content-Type of written files. 
            If no Content-Type is available, 'application/octet-stream' is used.
            </para>
            <para>
            This can be overridden by setting the <see cref="P:SupportedMediaTypes"/> property.
            </para>
            </remarks>
            <author>Arjen Poutsma</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="P:YSWL.OAuth.Http.Converters.ResourceHttpMessageConverter.MimeMapping">
            <summary>
            Gets or sets the mapping between file extension and mime types.
            </summary>
        </member>
        <member name="M:YSWL.OAuth.Http.Converters.ResourceHttpMessageConverter.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:YSWL.OAuth.Http.Converters.FileInfoHttpMessageConverter"/>.
            </summary>
        </member>
        <member name="M:YSWL.OAuth.Http.Converters.ResourceHttpMessageConverter.Supports(System.Type)">
            <summary>
            Indicates whether the given class is supported by this converter.
            </summary>
            <param name="type">The type to test for support.</param>
            <returns><see langword="true"/> if supported; otherwise <see langword="false"/></returns>
        </member>
        <member name="M:YSWL.OAuth.Http.Converters.ResourceHttpMessageConverter.ReadInternal``1(YSWL.OAuth.Http.IHttpInputMessage)">
            <summary>
            Abstract template method that reads the actualy object. Invoked from <see cref="M:Read"/>.
            </summary>
            <typeparam name="T">The type of object to return.</typeparam>
            <param name="message">The HTTP message to read from.</param>
            <returns>The converted object.</returns>
            <exception cref="T:YSWL.OAuth.Http.Converters.HttpMessageNotReadableException">In case of conversion errors</exception>
        </member>
        <member name="M:YSWL.OAuth.Http.Converters.ResourceHttpMessageConverter.WriteInternal(System.Object,YSWL.OAuth.Http.IHttpOutputMessage)">
            <summary>
            Abstract template method that writes the actual body. Invoked from <see cref="M:Write"/>.
            </summary>
            <param name="content">The object to write to the HTTP message.</param>
            <param name="message">The HTTP message to write to.</param>
            <exception cref="T:YSWL.OAuth.Http.Converters.HttpMessageNotWritableException">In case of conversion errors</exception>
        </member>
        <member name="M:YSWL.OAuth.Http.Converters.ResourceHttpMessageConverter.GetDefaultContentType(System.Object)">
            <summary>
            Returns the default content type for the given object. 
            Called when <see cref="M:Write"/> is invoked without a specified content type parameter.
            </summary>
            <remarks>
            This implementation uses the mapping between file extension and mime types is used 
            to determine the Content-Type of written files. 
            If no Content-Type is available, 'application/octet-stream' is used.
            </remarks>
            <param name="content">The object to return the content type for.</param>
            <returns>The <see cref="T:YSWL.OAuth.Http.MediaType">content type</see>, or null if not known.</returns>
        </member>
        <member name="T:YSWL.OAuth.Http.Converters.StringHttpMessageConverter">
            <summary>
            Implementation of <see cref="T:YSWL.OAuth.Http.Converters.IHttpMessageConverter"/> that can read and write strings.
            </summary>
            <remarks>
            By default, this converter supports all media types '*/*', and writes with a 'Content-Type' 
            of 'text/plain'. 
            This can be overridden by setting the <see cref="P:SupportedMediaTypes"/> property.
            </remarks>
            <author>Arjen Poutsma</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="F:YSWL.OAuth.Http.Converters.StringHttpMessageConverter.DEFAULT_CHARSET">
            <summary>
            Default encoding for strings.
            </summary>
        </member>
        <member name="M:YSWL.OAuth.Http.Converters.StringHttpMessageConverter.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:YSWL.OAuth.Http.Converters.StringHttpMessageConverter"/> 
            with 'text/plain; charset=utf-8', and '*/*' media types.
            </summary>
        </member>
        <member name="M:YSWL.OAuth.Http.Converters.StringHttpMessageConverter.Supports(System.Type)">
            <summary>
            Indicates whether the given class is supported by this converter.
            </summary>
            <param name="type">The type to test for support.</param>
            <returns><see langword="true"/> if supported; otherwise <see langword="false"/></returns>
        </member>
        <member name="M:YSWL.OAuth.Http.Converters.StringHttpMessageConverter.ReadInternal``1(YSWL.OAuth.Http.IHttpInputMessage)">
            <summary>
            Abstract template method that reads the actualy object. Invoked from <see cref="M:Read"/>.
            </summary>
            <typeparam name="T">The type of object to return.</typeparam>
            <param name="message">The HTTP message to read from.</param>
            <returns>The converted object.</returns>
            <exception cref="T:YSWL.OAuth.Http.Converters.HttpMessageNotReadableException">In case of conversion errors</exception>
        </member>
        <member name="M:YSWL.OAuth.Http.Converters.StringHttpMessageConverter.WriteInternal(System.Object,YSWL.OAuth.Http.IHttpOutputMessage)">
            <summary>
            Abstract template method that writes the actual body. Invoked from <see cref="M:Write"/>.
            </summary>
            <param name="content">The object to write to the HTTP message.</param>
            <param name="message">The HTTP message to write to.</param>
            <exception cref="T:YSWL.OAuth.Http.Converters.HttpMessageNotWritableException">In case of conversion errors</exception>
        </member>
        <member name="T:YSWL.OAuth.Http.Converters.Xml.AbstractXmlHttpMessageConverter">
            <summary>
            Base class for <see cref="T:YSWL.OAuth.Http.Converters.IHttpMessageConverter"/> that convert from/to XML.
            </summary>
            <remarks>
            By default, subclasses of this converter support 'text/xml', 'application/xml', and 'application/*-xml' media types. 
            This can be overridden by setting the <see cref="P:SupportedMediaTypes"/> property.
            </remarks>
            <author>Bruno Baia</author>
        </member>
        <member name="F:YSWL.OAuth.Http.Converters.Xml.AbstractXmlHttpMessageConverter.DEFAULT_CHARSET">
            <summary>
            Default encoding for XML.
            </summary>
        </member>
        <member name="M:YSWL.OAuth.Http.Converters.Xml.AbstractXmlHttpMessageConverter.#ctor(YSWL.OAuth.Http.MediaType[])">
            <summary>
            Creates a new instance of the <see cref="T:YSWL.OAuth.Http.Converters.AbstractHttpMessageConverter"/> 
            with multiple supported media type.
            </summary>
            <param name="supportedMediaTypes">The supported media types.</param>
        </member>
        <member name="M:YSWL.OAuth.Http.Converters.Xml.AbstractXmlHttpMessageConverter.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:YSWL.OAuth.Http.Converters.AbstractHttpMessageConverter"/> that sets 
            the <see cref="P:SupportedMediaTypes"/> to 'text/xml' and 'application/xml', and 'application/*-xml'.
            </summary>
        </member>
        <member name="M:YSWL.OAuth.Http.Converters.Xml.AbstractXmlHttpMessageConverter.ReadInternal``1(YSWL.OAuth.Http.IHttpInputMessage)">
            <summary>
            Abstract template method that reads the actualy object. Invoked from <see cref="M:Read"/>.
            </summary>
            <typeparam name="T">The type of object to return.</typeparam>
            <param name="message">The HTTP message to read from.</param>
            <returns>The converted object.</returns>
            <exception cref="T:YSWL.OAuth.Http.Converters.HttpMessageNotReadableException">In case of conversion errors</exception>
        </member>
        <member name="M:YSWL.OAuth.Http.Converters.Xml.AbstractXmlHttpMessageConverter.WriteInternal(System.Object,YSWL.OAuth.Http.IHttpOutputMessage)">
            <summary>
            Abstract template method that writes the actual body. Invoked from <see cref="M:Write"/>.
            </summary>
            <param name="content">The object to write to the HTTP message.</param>
            <param name="message">The HTTP message to write to.</param>
            <exception cref="T:YSWL.OAuth.Http.Converters.HttpMessageNotWritableException">In case of conversion errors</exception>
        </member>
        <member name="M:YSWL.OAuth.Http.Converters.Xml.AbstractXmlHttpMessageConverter.ReadXml``1(System.Xml.XmlReader)">
            <summary>
            Abstract template method that reads the actualy object using a <see cref="T:System.Xml.XmlReader"/>. Invoked from <see cref="M:ReadInternal"/>.
            </summary>
            <typeparam name="T">The type of object to return.</typeparam>
            <param name="xmlReader">The XmlReader to use.</param>
            <returns>The converted object.</returns>
        </member>
        <member name="M:YSWL.OAuth.Http.Converters.Xml.AbstractXmlHttpMessageConverter.WriteXml(System.Xml.XmlWriter,System.Object)">
            <summary>
            Abstract template method that writes the actual body using a <see cref="T:System.Xml.XmlWriter"/>. Invoked from <see cref="M:WriteInternal"/>.
            </summary>
            <param name="xmlWriter">The XmlWriter to use.</param>
            <param name="content">The object to write to the HTTP message.</param>
        </member>
        <member name="M:YSWL.OAuth.Http.Converters.Xml.AbstractXmlHttpMessageConverter.GetXmlReaderSettings">
            <summary>
            Returns the <see cref="T:System.Xml.XmlReaderSettings">XmlReader settings</see> 
            used by this converter to read from the HTTP message.
            </summary>
            <returns>The XmlReader settings.</returns>
        </member>
        <member name="M:YSWL.OAuth.Http.Converters.Xml.AbstractXmlHttpMessageConverter.GetXmlWriterSettings">
            <summary>
            Returns the <see cref="T:System.Xml.XmlWriterSettings">XmlWriter settings</see> 
            used by this converter to write to the HTTP message.
            </summary>
            <returns>The XmlWriter settings.</returns>
        </member>
        <member name="T:YSWL.OAuth.Http.Converters.Xml.DataContractHttpMessageConverter">
            <summary>
            Implementation of <see cref="T:YSWL.OAuth.Http.Converters.IHttpMessageConverter"/> that can read and write XML 
            using <see cref="T:System.Runtime.Serialization.DataContractSerializer"/>.
            </summary>
            <remarks>
            <para>
            By default, this converter supports 'text/xml', 'application/xml', and 'application/*-xml' media types. 
            This can be overridden by setting the <see cref="P:SupportedMediaTypes"/> property.
            </para>
            </remarks>
            <author>Bruno Baia</author>
        </member>
        <member name="P:YSWL.OAuth.Http.Converters.Xml.DataContractHttpMessageConverter.KnownTypes">
            <summary>
            Gets or sets types that may be present in the object graph.
            </summary>
        </member>
        <member name="P:YSWL.OAuth.Http.Converters.Xml.DataContractHttpMessageConverter.RequiresAttribute">
            <summary>
            Indicates whether this converter supports only classes decorated with 
            <see cref="T:System.Runtime.Serialization.DataContractAttribute"/> and <see cref="T:System.Runtime.Serialization.CollectionDataContractAttribute"/>. 
            Default value is <c>false</c>.
            </summary>
        </member>
        <member name="M:YSWL.OAuth.Http.Converters.Xml.DataContractHttpMessageConverter.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:YSWL.OAuth.Http.Converters.Xml.DataContractHttpMessageConverter"/> 
            with 'text/xml', 'application/xml', and 'application/*-xml' media types.
            </summary>
        </member>
        <member name="M:YSWL.OAuth.Http.Converters.Xml.DataContractHttpMessageConverter.#ctor(System.Boolean)">
            <summary>
            Creates a new instance of the <see cref="T:YSWL.OAuth.Http.Converters.Xml.DataContractHttpMessageConverter"/> 
            with 'text/xml', 'application/xml', and 'application/*-xml' media types.
            </summary>
            <param name="requiresAttribute">
            If <c>true</c>, supports only classes decorated with 
            <see cref="T:System.Runtime.Serialization.DataContractAttribute"/> and <see cref="T:System.Runtime.Serialization.CollectionDataContractAttribute"/>. 
            </param>
        </member>
        <member name="M:YSWL.OAuth.Http.Converters.Xml.DataContractHttpMessageConverter.Supports(System.Type)">
            <summary>
            Indicates whether the given class is supported by this converter.
            </summary>
            <param name="type">The type to test for support.</param>
            <returns><see langword="true"/> if supported; otherwise <see langword="false"/></returns>
        </member>
        <member name="M:YSWL.OAuth.Http.Converters.Xml.DataContractHttpMessageConverter.ReadXml``1(System.Xml.XmlReader)">
            <summary>
            Abstract template method that reads the actualy object using a <see cref="T:System.Xml.XmlReader"/>. Invoked from <see cref="M:ReadInternal"/>.
            </summary>
            <typeparam name="T">The type of object to return.</typeparam>
            <param name="xmlReader">The XmlReader to use.</param>
            <returns>The converted object.</returns>
        </member>
        <member name="M:YSWL.OAuth.Http.Converters.Xml.DataContractHttpMessageConverter.WriteXml(System.Xml.XmlWriter,System.Object)">
            <summary>
            Abstract template method that writes the actual body using a <see cref="T:System.Xml.XmlWriter"/>. Invoked from <see cref="M:WriteInternal"/>.
            </summary>
            <param name="xmlWriter">The XmlWriter to use.</param>
            <param name="content">The object to write to the HTTP message.</param>
        </member>
        <member name="M:YSWL.OAuth.Http.Converters.Xml.DataContractHttpMessageConverter.GetSerializer(System.Type)">
            <summary>
            Creates an instance of <see cref="T:System.Runtime.Serialization.DataContractSerializer"/> to 
            serialize or deserialize an object of the specified type.
            </summary>
            <param name="type">The type of instances to serialize or deserialize.</param>
            <returns>The serializer to use.</returns>
        </member>
        <member name="T:YSWL.OAuth.Http.Converters.Xml.XElementHttpMessageConverter">
            <summary>
            Implementation of <see cref="T:YSWL.OAuth.Http.Converters.IHttpMessageConverter"/> that can read and write XML 
            from a <see cref="T:System.Xml.Linq.XElement"/> (Linq to XML).
            </summary>
            <remarks>
            By default, this converter supports 'text/xml', 'application/xml', and 'application/*-xml' media types. 
            This can be overridden by setting the <see cref="P:SupportedMediaTypes"/> property.
            </remarks>
            <author>Bruno Baia</author>
        </member>
        <member name="M:YSWL.OAuth.Http.Converters.Xml.XElementHttpMessageConverter.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:YSWL.OAuth.Http.Converters.Xml.XElementHttpMessageConverter"/> 
            with 'text/xml', 'application/xml', and 'application/*-xml' media types.
            </summary>
        </member>
        <member name="M:YSWL.OAuth.Http.Converters.Xml.XElementHttpMessageConverter.Supports(System.Type)">
            <summary>
            Indicates whether the given class is supported by this converter.
            </summary>
            <param name="type">The type to test for support.</param>
            <returns><see langword="true"/> if supported; otherwise <see langword="false"/></returns>
        </member>
        <member name="M:YSWL.OAuth.Http.Converters.Xml.XElementHttpMessageConverter.ReadXml``1(System.Xml.XmlReader)">
            <summary>
            Abstract template method that reads the actualy object using a <see cref="T:System.Xml.XmlReader"/>. Invoked from <see cref="M:ReadInternal"/>.
            </summary>
            <typeparam name="T">The type of object to return.</typeparam>
            <param name="xmlReader">The XmlReader to use.</param>
            <returns>The converted object.</returns>
        </member>
        <member name="M:YSWL.OAuth.Http.Converters.Xml.XElementHttpMessageConverter.WriteXml(System.Xml.XmlWriter,System.Object)">
            <summary>
            Abstract template method that writes the actual body using a <see cref="T:System.Xml.XmlWriter"/>. Invoked from <see cref="M:WriteInternal"/>.
            </summary>
            <param name="xmlWriter">The XmlWriter to use.</param>
            <param name="content">The object to write to the HTTP message.</param>
        </member>
        <member name="T:YSWL.OAuth.Http.Converters.Xml.XmlDocumentHttpMessageConverter">
            <summary>
            Implementation of <see cref="T:YSWL.OAuth.Http.Converters.IHttpMessageConverter"/> that can read and write XML 
            from a <see cref="T:System.Xml.XmlDocument"/>.
            </summary>
            <remarks>
            By default, this converter supports 'text/xml', 'application/xml', and 'application/*-xml' media types. 
            This can be overridden by setting the <see cref="P:SupportedMediaTypes"/> property.
            </remarks>
            <author>Bruno Baia</author>
        </member>
        <member name="M:YSWL.OAuth.Http.Converters.Xml.XmlDocumentHttpMessageConverter.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:YSWL.OAuth.Http.Converters.Xml.XmlDocumentHttpMessageConverter"/> 
            with 'text/xml', 'application/xml', and 'application/*-xml' media types.
            </summary>
        </member>
        <member name="M:YSWL.OAuth.Http.Converters.Xml.XmlDocumentHttpMessageConverter.Supports(System.Type)">
            <summary>
            Indicates whether the given class is supported by this converter.
            </summary>
            <param name="type">The type to test for support.</param>
            <returns><see langword="true"/> if supported; otherwise <see langword="false"/></returns>
        </member>
        <member name="M:YSWL.OAuth.Http.Converters.Xml.XmlDocumentHttpMessageConverter.ReadXml``1(System.Xml.XmlReader)">
            <summary>
            Abstract template method that reads the actualy object using a <see cref="T:System.Xml.XmlReader"/>. Invoked from <see cref="M:ReadInternal"/>.
            </summary>
            <typeparam name="T">The type of object to return.</typeparam>
            <param name="xmlReader">The XmlReader to use.</param>
            <returns>The converted object.</returns>
        </member>
        <member name="M:YSWL.OAuth.Http.Converters.Xml.XmlDocumentHttpMessageConverter.WriteXml(System.Xml.XmlWriter,System.Object)">
            <summary>
            Abstract template method that writes the actual body using a <see cref="T:System.Xml.XmlWriter"/>. Invoked from <see cref="M:WriteInternal"/>.
            </summary>
            <param name="xmlWriter">The XmlWriter to use.</param>
            <param name="content">The object to write to the HTTP message.</param>
        </member>
        <member name="T:YSWL.OAuth.Http.Converters.Xml.XmlSerializableHttpMessageConverter">
            <summary>
            Implementation of <see cref="T:YSWL.OAuth.Http.Converters.IHttpMessageConverter"/> that can read and write XML 
            using <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <remarks>
            By default, this converter supports 'text/xml', 'application/xml', and 'application/*-xml' media types. 
            This can be overridden by setting the <see cref="P:SupportedMediaTypes"/> property.
            </remarks>
            <author>Bruno Baia</author>
        </member>
        <member name="P:YSWL.OAuth.Http.Converters.Xml.XmlSerializableHttpMessageConverter.KnownTypes">
            <summary>
            Gets or sets types that may be present in the object graph.
            </summary>
        </member>
        <member name="M:YSWL.OAuth.Http.Converters.Xml.XmlSerializableHttpMessageConverter.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:YSWL.OAuth.Http.Converters.Xml.XmlSerializableHttpMessageConverter"/> 
            with 'text/xml', 'application/xml', and 'application/*-xml' media types.
            </summary>
        </member>
        <member name="M:YSWL.OAuth.Http.Converters.Xml.XmlSerializableHttpMessageConverter.Supports(System.Type)">
            <summary>
            Indicates whether the given class is supported by this converter.
            </summary>
            <param name="type">The type to test for support.</param>
            <returns><see langword="true"/> if supported; otherwise <see langword="false"/></returns>
        </member>
        <member name="M:YSWL.OAuth.Http.Converters.Xml.XmlSerializableHttpMessageConverter.ReadXml``1(System.Xml.XmlReader)">
            <summary>
            Abstract template method that reads the actualy object using a <see cref="T:System.Xml.XmlReader"/>. Invoked from <see cref="M:ReadInternal"/>.
            </summary>
            <typeparam name="T">The type of object to return.</typeparam>
            <param name="xmlReader">The XmlReader to use.</param>
            <returns>The converted object.</returns>
        </member>
        <member name="M:YSWL.OAuth.Http.Converters.Xml.XmlSerializableHttpMessageConverter.WriteXml(System.Xml.XmlWriter,System.Object)">
            <summary>
            Abstract template method that writes the actual body using a <see cref="T:System.Xml.XmlWriter"/>. Invoked from <see cref="M:WriteInternal"/>.
            </summary>
            <param name="xmlWriter">The XmlWriter to use.</param>
            <param name="content">The object to write to the HTTP message.</param>
        </member>
        <member name="M:YSWL.OAuth.Http.Converters.Xml.XmlSerializableHttpMessageConverter.GetSerializer(System.Type)">
            <summary>
            Creates an instance of <see cref="T:System.Xml.Serialization.XmlSerializer"/> to 
            serialize or deserialize an object of the specified type.
            </summary>
            <param name="type">The type of instances to serialize or deserialize.</param>
            <returns>The serializer to use.</returns>
        </member>
        <member name="T:YSWL.OAuth.Http.HttpEntity">
            <summary>
            Represents an HTTP entity message, as defined in the HTTP specification. 
            <a href="http://tools.ietf.org/html/rfc2616#section-7">HTTP 1.1, section 7</a>
            </summary>
            <author>Arjen Poutsma</author>
            <author>Bruno Baia</author>
        </member>
        <member name="P:YSWL.OAuth.Http.HttpEntity.Headers">
            <summary>
            Gets the entity headers.
            </summary>
        </member>
        <member name="P:YSWL.OAuth.Http.HttpEntity.Body">
            <summary>
            Gets the entity body. May be null.
            </summary>
        </member>
        <member name="P:YSWL.OAuth.Http.HttpEntity.HasBody">
            <summary>
            Indicates whether this entity has a body.
            </summary>
            <returns></returns>
        </member>
        <member name="M:YSWL.OAuth.Http.HttpEntity.#ctor">
            <summary>
            Creates a new, empty instance of <see cref="T:YSWL.OAuth.Http.HttpEntity"/> with no body or headers.
            </summary>
        </member>
        <member name="M:YSWL.OAuth.Http.HttpEntity.#ctor(System.Object)">
            <summary>
            Creates a new instance of <see cref="T:YSWL.OAuth.Http.HttpEntity"/> with the given body.
            </summary>
            <param name="body">The entity body.</param>
        </member>
        <member name="M:YSWL.OAuth.Http.HttpEntity.#ctor(YSWL.OAuth.Http.HttpHeaders)">
            <summary>
            Creates a new instance of <see cref="T:YSWL.OAuth.Http.HttpEntity"/> with the given headers.
            </summary>
            <param name="headers">The entity headers.</param>
        </member>
        <member name="M:YSWL.OAuth.Http.HttpEntity.#ctor(System.Object,YSWL.OAuth.Http.HttpHeaders)">
            <summary>
            Creates a new instance of <see cref="T:YSWL.OAuth.Http.HttpEntity"/> with the given body and headers.
            </summary>
            <param name="body">The entity body.</param>
            <param name="headers">The entity headers.</param>
        </member>
        <member name="T:YSWL.OAuth.Http.HttpHeaders">
            <summary>
            Represents HTTP request and response headers, mapping string header names to list of string values.
            </summary>
            <author>Arjen Poutsma</author>
            <author>Bruno Baia (.NET)</author>    
        </member>
        <member name="M:YSWL.OAuth.Http.HttpHeaders.#ctor">
            <summary>
            Creates a new, empty instance of the <see cref="T:YSWL.OAuth.Http.HttpHeaders"/> object. 
            </summary>
        </member>
        <member name="M:YSWL.OAuth.Http.HttpHeaders.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the <see cref="T:YSWL.OAuth.Http.HttpHeaders"/> class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data 
            about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information 
            about the source or destination.
            </param>
        </member>
        <member name="P:YSWL.OAuth.Http.HttpHeaders.Accept">
            <summary>
            Gets or sets the array of acceptable <see cref="T:YSWL.OAuth.Http.MediaType">media types</see>, 
            as specified by the 'Accept' header.
            </summary>
            <remarks>
            Returns an empty array when the acceptable media types are unspecified.
            </remarks>
        </member>
        <member name="P:YSWL.OAuth.Http.HttpHeaders.Allow">
            <summary>
            Gets or sets the array of allowed <see cref="T:YSWL.OAuth.Http.HttpMethod">HTTP methods</see>, 
            as specified by the 'Allow' header.
            </summary>
            <remarks>
            Returns an empty array when the allowed methods are unspecified.
            </remarks>
        </member>
        <member name="P:YSWL.OAuth.Http.HttpHeaders.CacheControl">
            <summary>
            Gets or sets the value of the 'Cache-Control' header.
            </summary>
        </member>
        <member name="P:YSWL.OAuth.Http.HttpHeaders.ContentLength">
            <summary>
            Gets or sets the length of the body in bytes, 
            as specified by the 'Content-Length' header.
            </summary>
            <remarks>
            Returns -1 when the content-length is unknown.
            </remarks>
        </member>
        <member name="P:YSWL.OAuth.Http.HttpHeaders.ContentType">
            <summary>
            Gets or sets the <see cref="T:YSWL.OAuth.Http.MediaType">media type</see> of the body, 
            as specified by the 'Content-Type' header.
            </summary>
            <remarks>
            Returns <see langword="null"/> when the content type is unknown.
            </remarks>
        </member>
        <member name="P:YSWL.OAuth.Http.HttpHeaders.Date">
            <summary>
            Gets or sets the date and time at which the message was created, 
            as specified by the 'Date' header.
            </summary>
            <remarks>
            Returns <see langword="null"/> when the date is unknown.
            </remarks>
        </member>
        <member name="P:YSWL.OAuth.Http.HttpHeaders.ETag">
            <summary>
            Gets or sets the entity tag of the body, as specified by the 'ETag' header.
            </summary>
        </member>
        <member name="P:YSWL.OAuth.Http.HttpHeaders.Expires">
            <summary>
            Gets or sets the date and time at which the message is no longer valid, 
            as specified by the 'Expires' header.
            </summary>
        </member>
        <member name="P:YSWL.OAuth.Http.HttpHeaders.IfModifiedSince">
            <summary>
            Gets or sets the date and time as specified by the 'If-Modified-Since' header.
            </summary>
            <remarks>
            Returns <see langword="null"/> when the date is unknown.
            </remarks>
        </member>
        <member name="P:YSWL.OAuth.Http.HttpHeaders.IfNoneMatch">
            <summary>
            Gets or sets the value of the 'If-None-Match' header.
            </summary>
        </member>
        <member name="P:YSWL.OAuth.Http.HttpHeaders.LastModified">
            <summary>
            Gets or sets the time the resource was last changed, 
            as specified by the 'Last-Modified' header.
            </summary>
            <remarks>
            Returns <see langword="null"/> when the date is unknown.
            </remarks>
        </member>
        <member name="P:YSWL.OAuth.Http.HttpHeaders.Location">
            <summary>
            Gets or sets the (new) location of a resource, 
            as specified by the 'Location' header.
            </summary>
        </member>
        <member name="P:YSWL.OAuth.Http.HttpHeaders.Pragma">
            <summary>
            Gets or sets the value of the 'Pragma' header.
            </summary>
        </member>
        <member name="M:YSWL.OAuth.Http.HttpHeaders.GetSingleValue(System.String)">
            <summary>
            Return the header value for the given header name, if any.
            </summary>
            <param name="headerName">The header name</param>
            <returns>The first header value; or <see langword="null"/></returns>
            <exception cref="T:System.NotSupportedException">
            If multiple values are stored for the given header name.
            </exception>
        </member>
        <member name="M:YSWL.OAuth.Http.HttpHeaders.GetMultiValues(System.String)">
            <summary>
            Return an array of header values for the given header name, if any.
            </summary>
            <param name="headerName">The header name</param>
            <returns>The array of header values; or <see langword="null"/></returns>
        </member>
        <member name="T:YSWL.OAuth.Http.HttpMethod">
            <summary>
            Represents an HTTP request method as defined in the HTTP specification. 
            <a href="http://tools.ietf.org/html/rfc2616#section-5.1.1">HTTP 1.1, section 5.1.1</a>
            </summary>
            <remarks>
            HTTP method equality and hashing are case insensitive.
            </remarks>
            <author>Bruno Baia</author>
        </member>
        <member name="F:YSWL.OAuth.Http.HttpMethod.OPTIONS">
            <summary>
            The OPTIONS method.
            </summary>
        </member>
        <member name="F:YSWL.OAuth.Http.HttpMethod.GET">
            <summary>
            The GET method.
            </summary>
        </member>
        <member name="F:YSWL.OAuth.Http.HttpMethod.HEAD">
            <summary>
            The HEAD method.
            </summary>
        </member>
        <member name="F:YSWL.OAuth.Http.HttpMethod.POST">
            <summary>
            The POST method.
            </summary>
        </member>
        <member name="F:YSWL.OAuth.Http.HttpMethod.PUT">
            <summary>
            The PUT method.
            </summary>
        </member>
        <member name="F:YSWL.OAuth.Http.HttpMethod.DELETE">
            <summary>
            The DELETE method.
            </summary>
        </member>
        <member name="F:YSWL.OAuth.Http.HttpMethod.TRACE">
            <summary>
            The TRACE method.
            </summary>
        </member>
        <member name="F:YSWL.OAuth.Http.HttpMethod.CONNECT">
            <summary>
            The CONNECT method.
            </summary>
        </member>
        <member name="M:YSWL.OAuth.Http.HttpMethod.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:YSWL.OAuth.Http.HttpMethod"/> with the given HTTP method value.
            </summary>
            <param name="method">The HTTP method as a string value.</param>
        </member>
        <member name="M:YSWL.OAuth.Http.HttpMethod.Equals(YSWL.OAuth.Http.HttpMethod)">
            <summary>
            Indicates whether the current HTTP method is equal to another <see cref="T:YSWL.OAuth.Http.HttpMethod"/>.
            </summary>
            <param name="other">An <see cref="T:YSWL.OAuth.Http.HttpMethod"/> to compare with this HTTP method.</param>
            <returns>
            <see langword="true"/> if the specified <see cref="T:YSWL.OAuth.Http.HttpMethod"/> is equal to the current HTTP method; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.Http.HttpMethod.Equals(System.Object)">
            <summary>
            Indicates whether the current HTTP method is equal to another <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">An <see cref="T:System.Object"/> to compare with this HTTP method.</param>
            <returns>
            <see langword="true"/> if the specified <see cref="T:System.Object"/> is equal to the current HTTP method; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.Http.HttpMethod.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <remarks>
            This method is suitable for use in hashing algorithms and data structures like a hash table.
            </remarks>
            <returns>
            A hash code for the current HTTP method.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.Http.HttpMethod.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current HTTP method.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current HTTP method.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.Http.HttpMethod.op_Equality(YSWL.OAuth.Http.HttpMethod,YSWL.OAuth.Http.HttpMethod)">
            <summary>
            Determines whether two specified HTTP methods have the same value.
            </summary>
            <param name="method1">The first HTTP method to compare, or <see langword="null"/>.</param>
            <param name="method2">The second HTTP method to compare, or <see langword="null"/>.</param>
            <returns>
            <see langword="true"/> if values are the same; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.Http.HttpMethod.op_Inequality(YSWL.OAuth.Http.HttpMethod,YSWL.OAuth.Http.HttpMethod)">
            <summary>
            Determines whether two specified HTTP methods have different values.
            </summary>
            <param name="method1">The first HTTP method to compare, or <see langword="null"/>.</param>
            <param name="method2">The second HTTP method to compare, or <see langword="null"/>.</param>
            <returns>
            <see langword="true"/> if values are differents; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:YSWL.OAuth.Http.HttpResponseMessage">
            <summary>
            Represents an HTTP response message, with no body, as defined in the HTTP specification. 
            <a href="http://tools.ietf.org/html/rfc2616#section-6">HTTP 1.1, section 6</a>
            </summary>
            <author>Bruno Baia</author>
        </member>
        <member name="P:YSWL.OAuth.Http.HttpResponseMessage.Headers">
            <summary>
            Gets the response headers.
            </summary>
        </member>
        <member name="P:YSWL.OAuth.Http.HttpResponseMessage.StatusCode">
            <summary>
            Gets the HTTP status code of the response.
            </summary>
        </member>
        <member name="P:YSWL.OAuth.Http.HttpResponseMessage.StatusDescription">
            <summary>
            Gets the HTTP status description of the response.
            </summary>
        </member>
        <member name="M:YSWL.OAuth.Http.HttpResponseMessage.#ctor(System.Net.HttpStatusCode,System.String)">
            <summary>
            Creates a new instance of <see cref="T:YSWL.OAuth.Http.HttpResponseMessage"/> with the given status code and status description.
            </summary>
            <param name="statusCode">The HTTP status code.</param>
            <param name="statusDescription">The HTTP status description.</param>
        </member>
        <member name="M:YSWL.OAuth.Http.HttpResponseMessage.#ctor(YSWL.OAuth.Http.HttpHeaders,System.Net.HttpStatusCode,System.String)">
            <summary>
            Creates a new instance of <see cref="T:YSWL.OAuth.Http.HttpResponseMessage"/> with the given headers, status code and status description.
            </summary>
            <param name="headers">The response headers.</param>
            <param name="statusCode">The HTTP status code.</param>
            <param name="statusDescription">The HTTP status description.</param>
        </member>
        <member name="T:YSWL.OAuth.Http.HttpResponseMessage`1">
            <summary>
            Represents an HTTP response message, as defined in the HTTP specification. 
            <a href="http://tools.ietf.org/html/rfc2616#section-6">HTTP 1.1, section 6</a>
            </summary>
            <typeparam name="T">The type of the response body.</typeparam>
            <author>Bruno Baia</author>
        </member>
        <member name="P:YSWL.OAuth.Http.HttpResponseMessage`1.Body">
            <summary>
            Gets the response body. May be null.
            </summary>
        </member>
        <member name="M:YSWL.OAuth.Http.HttpResponseMessage`1.#ctor(`0,System.Net.HttpStatusCode,System.String)">
            <summary>
            Creates a new instance of <see cref="T:YSWL.OAuth.Http.HttpResponseMessage`1"/> with the given body, status code and status description.
            </summary>
            <param name="body">The response body.</param>
            <param name="statusCode">The HTTP status code.</param>
            <param name="statusDescription">The HTTP status description.</param>
        </member>
        <member name="M:YSWL.OAuth.Http.HttpResponseMessage`1.#ctor(`0,YSWL.OAuth.Http.HttpHeaders,System.Net.HttpStatusCode,System.String)">
            <summary>
            Creates a new instance of <see cref="T:YSWL.OAuth.Http.HttpResponseMessage`1"/> with the given body, headers, status code and status description.
            </summary>
            <param name="body">The response body.</param>
            <param name="headers">The response headers.</param>
            <param name="statusCode">The HTTP status code.</param>
            <param name="statusDescription">The HTTP status description.</param>
        </member>
        <member name="T:YSWL.OAuth.Http.HttpUtils">
            <summary>
            Miscellaneous HTTP utility methods.
            </summary>
            <author>Bruno Baia</author>
        </member>
        <member name="M:YSWL.OAuth.Http.HttpUtils.FormDecode(System.String)">
            <summary>
            Decodes 'application/x-www-form-urlencoded' data.
            </summary>
            <param name="s">The string to decode.</param>
            <returns>The decoded string.</returns>
        </member>
        <member name="M:YSWL.OAuth.Http.HttpUtils.FormEncode(System.String)">
            <summary>
            Encodes 'application/x-www-form-urlencoded' data.
            </summary>
            <param name="s">The string to encode.</param>
            <returns>The encoded string.</returns>
        </member>
        <member name="M:YSWL.OAuth.Http.HttpUtils.UrlDecode(System.String)">
            <summary>
            Decodes URI data according to RFC 3986.
            </summary>
            <param name="s">The string to decode.</param>
            <returns>The decoded string.</returns>
        </member>
        <member name="M:YSWL.OAuth.Http.HttpUtils.UrlEncode(System.String)">
            <summary>
            Encodes URI data according to RFC 3986.
            </summary>
            <param name="s">The string to encode.</param>
            <returns>The encoded string.</returns>
        </member>
        <member name="T:YSWL.OAuth.Http.IHttpInputMessage">
            <summary>
            Represents an HTTP message, consisting of <see cref="P:Headers">headers</see> 
            and a readable <see cref="P:Body">body</see>.
            </summary>
            <remarks>
            Typically implemented by an HTTP request on the server-side, or a response on the client-side.
            </remarks>
            <author>Arjen Poutsma</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="P:YSWL.OAuth.Http.IHttpInputMessage.Headers">
            <summary>
            Gets the message headers.
            </summary>
        </member>
        <member name="P:YSWL.OAuth.Http.IHttpInputMessage.Body">
            <summary>
            Gets the body of the message as a stream.
            </summary>
        </member>
        <member name="T:YSWL.OAuth.Http.IHttpOutputMessage">
            <summary>
            Represents an HTTP message, consisting of <see cref="P:Headers">headers</see> 
            and a writable <see cref="P:Body">body</see>.
            </summary>
            <remarks>
            Typically implemented by an HTTP request on the client-side, or a response on the server-side.
            </remarks>
            <author>Arjen Poutsma</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="P:YSWL.OAuth.Http.IHttpOutputMessage.Headers">
            <summary>
            Gets the message headers.
            </summary>
        </member>
        <member name="P:YSWL.OAuth.Http.IHttpOutputMessage.Body">
            <summary>
            Sets the delegate that writes the body message as a stream.
            </summary>
        </member>
        <member name="T:YSWL.OAuth.Http.MediaType">
            <summary>
            Represents an Internet Media Type, as defined in the HTTP specification. 
            <a href="http://tools.ietf.org/html/rfc2616#section-3.7">HTTP 1.1, section 3.7</a>
            </summary>
            <remarks>
            Consists of a <see cref="P:Type"/> and a <see cref="P:SubType"/>.  
            Also has functionality to parse media types from a string using <see cref="M:Parse(string)"/>.
            </remarks>
            <author>Arjen Poutsma</author>
            <author>Juergen Hoeller</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="F:YSWL.OAuth.Http.MediaType.ALL">
            <summary>
            The media type that includes all media ranges (i.e. '*/*').
            </summary>
        </member>
        <member name="F:YSWL.OAuth.Http.MediaType.APPLICATION_ATOM_XML">
            <summary>
            The media type for 'application/atom+xml'.
            </summary>
        </member>
        <member name="F:YSWL.OAuth.Http.MediaType.APPLICATION_FORM_URLENCODED">
            <summary>
            The media type for 'application/x-www-form-urlencoded'.
            </summary>
        </member>
        <member name="F:YSWL.OAuth.Http.MediaType.APPLICATION_JSON">
            <summary>
            The media type for 'application/json'.
            </summary>
        </member>
        <member name="F:YSWL.OAuth.Http.MediaType.APPLICATION_OCTET_STREAM">
            <summary>
            The media type for 'application/octet-stream'.
            </summary>
        </member>
        <member name="F:YSWL.OAuth.Http.MediaType.APPLICATION_XHTML_XML">
            <summary>
            The media type for 'application/xhtml+xml'.
            </summary>
        </member>
        <member name="F:YSWL.OAuth.Http.MediaType.IMAGE_GIF">
            <summary>
            The media type for 'image/gif'.
            </summary>
        </member>
        <member name="F:YSWL.OAuth.Http.MediaType.IMAGE_JPEG">
            <summary>
            The media type for 'image/jpeg'.
            </summary>
        </member>
        <member name="F:YSWL.OAuth.Http.MediaType.IMAGE_PNG">
            <summary>
            The media type for 'image/png'.
            </summary>
        </member>
        <member name="F:YSWL.OAuth.Http.MediaType.APPLICATION_XML">
            <summary>
            The media type for 'image/xml'.
            </summary>
        </member>
        <member name="F:YSWL.OAuth.Http.MediaType.MULTIPART_FORM_DATA">
            <summary>
            The media type for 'multipart/form-data'.
            </summary>
        </member>
        <member name="F:YSWL.OAuth.Http.MediaType.TEXT_HTML">
            <summary>
            The media type for 'text/html'.
            </summary>
        </member>
        <member name="F:YSWL.OAuth.Http.MediaType.TEXT_PLAIN">
            <summary>
            The media type for 'text/plain'.
            </summary>
        </member>
        <member name="F:YSWL.OAuth.Http.MediaType.TEXT_XML">
            <summary>
            The media type for 'text/xml'.
            </summary>
        </member>
        <member name="P:YSWL.OAuth.Http.MediaType.Type">
            <summary>
            Gets the primary type.
            </summary>
        </member>
        <member name="P:YSWL.OAuth.Http.MediaType.Subtype">
            <summary>
            Gets the subtype.
            </summary>
        </member>
        <member name="P:YSWL.OAuth.Http.MediaType.IsWildcardType">
            <summary>
            Indicate whether the type is the wildcard character '*', or not.
            </summary>
        </member>
        <member name="P:YSWL.OAuth.Http.MediaType.IsWildcardSubtype">
            <summary>
            Indicate whether the subtype is the wildcard character '*', or not.
            </summary>
        </member>
        <member name="P:YSWL.OAuth.Http.MediaType.CharSet">
            <summary>
            Gets the character set, as indicated by a 'charset' parameter, if any.
            </summary>
        </member>
        <member name="P:YSWL.OAuth.Http.MediaType.QualityValue">
            <summary>
            Gets the quality value, as indicated by a 'q' parameter, if any. 
            Defaults to '1.0'.
            </summary>
        </member>
        <member name="M:YSWL.OAuth.Http.MediaType.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:YSWL.OAuth.Http.MediaType"/> for the given primary type. 
            The subtype is set to '*', parameters are empty.
            </summary>
            <param name="type">The primary type.</param>
        </member>
        <member name="M:YSWL.OAuth.Http.MediaType.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of <see cref="T:YSWL.OAuth.Http.MediaType"/> for the given primary type and subtype. 
            The parameters are empty.
            </summary>
            <param name="type">The primary type.</param>
            <param name="subtype">The subtype.</param>
        </member>
        <member name="M:YSWL.OAuth.Http.MediaType.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a new instance of <see cref="T:YSWL.OAuth.Http.MediaType"/> for the given primary type, subtype and character set. 
            </summary>
            <param name="type">The primary type.</param>
            <param name="subtype">The subtype.</param>
            <param name="charSet">The character set</param>
        </member>
        <member name="M:YSWL.OAuth.Http.MediaType.#ctor(System.String,System.String,System.Text.Encoding)">
            <summary>
            Creates a new instance of <see cref="T:YSWL.OAuth.Http.MediaType"/> for the given primary type, subtype and character set. 
            </summary>
            <param name="type">The primary type.</param>
            <param name="subtype">The subtype.</param>
            <param name="charSet">The character set</param>
        </member>
        <member name="M:YSWL.OAuth.Http.MediaType.#ctor(System.String,System.String,System.Double)">
            <summary>
            Creates a new instance of <see cref="T:YSWL.OAuth.Http.MediaType"/> for the given primary type, subtype and quality value. 
            </summary>
            <param name="type">The primary type.</param>
            <param name="subtype">The subtype.</param>
            <param name="qualityValue">The quality value</param>
        </member>
        <member name="M:YSWL.OAuth.Http.MediaType.#ctor(YSWL.OAuth.Http.MediaType,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Creates a new instance of <see cref="T:YSWL.OAuth.Http.MediaType"/> by copying the type and subtype of the given MediaType, 
            and allows for different parameter.
            </summary>
            <param name="otherMediaType">The other media type.</param>
            <param name="parameters">The parameters, may be null.</param>
        </member>
        <member name="M:YSWL.OAuth.Http.MediaType.#ctor(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Creates a new instance of <see cref="T:YSWL.OAuth.Http.MediaType"/> for the given primary type, subtype and parameters. 
            </summary>
            <param name="type">The primary type.</param>
            <param name="subtype">The subtype.</param>
            <param name="parameters">The parameters, may be null.</param>
        </member>
        <member name="M:YSWL.OAuth.Http.MediaType.Equals(YSWL.OAuth.Http.MediaType)">
            <summary>
            Indicates whether the current media type is equal to another <see cref="T:YSWL.OAuth.Http.MediaType"/>.
            </summary>
            <param name="other">A <see cref="T:YSWL.OAuth.Http.MediaType"/> to compare with this media type.</param>
            <returns>
            <see langword="true"/> if the specified <see cref="T:YSWL.OAuth.Http.MediaType"/> is equal to the current media type; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.Http.MediaType.Equals(System.Object)">
            <summary>
            Indicates whether the current media type is equal to another <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">An <see cref="T:System.Object"/> to compare with this media type.</param>
            <returns>
            <see langword="true"/> if the specified <see cref="T:System.Object"/> is equal to the current media type; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.Http.MediaType.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <remarks>
            This method is suitable for use in hashing algorithms and data structures like a hash table.
            </remarks>
            <returns>
            A hash code for the current media type.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.Http.MediaType.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current media type.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current media type.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.Http.MediaType.op_Equality(YSWL.OAuth.Http.MediaType,YSWL.OAuth.Http.MediaType)">
            <summary>
            Determines whether two specified media types have the same value.
            </summary>
            <param name="mediaType1">The first media type to compare, or <see langword="null"/>.</param>
            <param name="mediaType2">The second media type to compare, or <see langword="null"/>.</param>
            <returns>
            <see langword="true"/> if values are the same; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.Http.MediaType.op_Inequality(YSWL.OAuth.Http.MediaType,YSWL.OAuth.Http.MediaType)">
            <summary>
            Determines whether two specified media types have different values.
            </summary>
            <param name="mediaType1">The first media type to compare, or <see langword="null"/>.</param>
            <param name="mediaType2">The second media type to compare, or <see langword="null"/>.</param>
            <returns>
            <see langword="true"/> if values are differents; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.Http.MediaType.GetParameter(System.String)">
            <summary>
            Return a generic parameter value, given a parameter name.
            </summary>
            <param name="name">The parameter name.</param>
            <returns>The parameter value; or null if not present.</returns>
        </member>
        <member name="M:YSWL.OAuth.Http.MediaType.Includes(YSWL.OAuth.Http.MediaType)">
            <summary>
            Indicate whether this <see cref="T:MediaType"/> includes the given media type.
            </summary>
            <remarks>
            For instance, 'text/*' includes 'text/plain', 'text/html', and 
            'application/*+xml' includes 'application/soap+xml', etc. 
            This method is non-symmetric.
            </remarks>
            <param name="otherMediaType">The reference media type with which to compare.</param>
            <returns>
            <see langword="true"/> if this media type includes the given media type; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.Http.MediaType.IsCompatibleWith(YSWL.OAuth.Http.MediaType)">
            <summary>
            Indicate whether this <see cref="T:MediaType"/> is compatible with the given media type.
            </summary>
            <remarks>
            For instance, 'text/*' is compatible 'text/plain', 'text/html', and vice versa.
            In effect, this method is similar to <see cref="M:Includes(MediaType)"/>, except that it's symmetric.
            </remarks>
            <param name="otherMediaType">The reference media type with which to compare.</param>
            <returns>
            <see langword="true"/> if this media type is compatible with the given media type; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.Http.MediaType.CompareTo(YSWL.OAuth.Http.MediaType)">
            <summary>
            Compares this <see cref="T:YSWL.OAuth.Http.MediaType"/> to another alphabetically.
            </summary>
            <param name="other">The media type to compare with this object.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects 
            being compared. The return value has the following meanings: Value Meaning 
            Less than zero This object is less than the other parameter.  Zero This object 
            is equal to other. Greater than zero This object is greater than other.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.Http.MediaType.Parse(System.String)">
            <summary>
            Parse the given String into a single <see cref="T:YSWL.OAuth.Http.MediaType"/>.
            </summary>
            <remarks>
            This method can be used to parse a 'Content-Type' header.
            </remarks>
            <param name="mediaType">The string to parse.</param>
            <returns>The media type.</returns>
        </member>
        <member name="M:YSWL.OAuth.Http.MediaType.ToString(System.Collections.Generic.IEnumerable{YSWL.OAuth.Http.MediaType})">
            <summary>
            Return a string representation of the given list of <see cref="T:YSWL.OAuth.Http.MediaType"/> objects.
            </summary>
            <remarks>
            This method can be used to for an 'Accept' or 'Content-Type' header.
            </remarks>
            <param name="mediaTypes">The list of media types to convert.</param>
            <returns>The string representation of the given list.</returns>
        </member>
        <member name="M:YSWL.OAuth.Http.MediaType.SortBySpecificity(System.Collections.Generic.List{YSWL.OAuth.Http.MediaType})">
            <summary>
            Sorts the given list of <see cref="T:YSWL.OAuth.Http.MediaType"/> objects by specificity. 
            <a href="http://tools.ietf.org/html/rfc2616#section-14.1">HTTP 1.1, section 14.1</a>
            </summary>
            <remarks>
            <para>
            Given two media types:
            <ol>
                <li>if either media type has a wildcard type, then the media type without the 
                wildcard is ordered before the other.</li>
                <li>if the two media types have different types, then they are considered equal and 
                remain their current order.</li>
                <li>if either media type has a wildcard subtype, then the media type without 
                the wildcard is sorted before the other.</li>
                <li>if the two media types have different subtypes, then they are considered equal 
                and remain their current order.</li>
                <li>if the two media types have different quality value, then the media type 
                with the highest quality value is ordered before the other.</li>
                <li>if the two media types have a different amount of parameters, then the 
                media type with the most parameters is ordered before the other.</li>
            </ol>
            </para>
            <para>
            For example:
            <blockquote>audio/basic &lt; audio/* &lt; *&#047;*</blockquote>
            <blockquote>audio/* &lt; audio/*;q=0.7; audio/*;q=0.3</blockquote>
            <blockquote>audio/basic;level=1 &lt; audio/basic</blockquote>
            <blockquote>audio/basic == text/html</blockquote>
            <blockquote>audio/basic == audio/wave</blockquote>
            </para>
            </remarks>
            <param name="mediaTypes">The list of media types to be sorted.</param>
        </member>
        <member name="M:YSWL.OAuth.Http.MediaType.SortByQualityValue(System.Collections.Generic.List{YSWL.OAuth.Http.MediaType})">
            <summary>
            Sorts the given list of <see cref="T:YSWL.OAuth.Http.MediaType"/> objects by quality value.
            </summary>
            <remarks>
            <para>
            Given two media types:
            <ol>
                <li>if the two media types have different quality value, then the media type 
                with the highest quality value is ordered before the other.</li>
                <li>if either media type has a wildcard type, then the media type without the 
                wildcard is ordered before the other.</li>
                <li>if the two media types have different types, then they are considered equal and 
                remain their current order.</li>
                <li>if either media type has a wildcard subtype, then the media type without 
                the wildcard is sorted before the other.</li>
                <li>if the two media types have different subtypes, then they are considered equal 
                and remain their current order.</li>
                <li>if the two media types have a different amount of parameters, then the 
                media type with the most parameters is ordered before the other.</li>
            </ol>
            </para>
            </remarks>
            <param name="mediaTypes">The list of media types to be sorted</param>
        </member>
        <member name="F:YSWL.OAuth.Http.MediaType.SPECIFICITY_COMPARER">
            <summary>
            <see cref="T:System.Collections.Generic.IComparer`1"/> implementation by specificity value.
            </summary>
        </member>
        <member name="F:YSWL.OAuth.Http.MediaType.QUALITY_VALUE_COMPARER">
            <summary>
            <see cref="T:System.Collections.Generic.IComparer`1"/> implementation by quality value.
            </summary>
        </member>
        <member name="T:YSWL.OAuth.IApiBinding">
            <summary>
            Base interface that may be implemented by API bindings.
            Provides a simple boolean tester that can be used to determine if the API binding has been authorized for a specific user.
            </summary>
            <author>Keith Donald</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="P:YSWL.OAuth.IApiBinding.IsAuthorized">
            <summary>
            Returns true if this API binding has been authorized on behalf of a specific user.
            </summary>
            <remarks>
            If so, calls to the API are signed with the user's authorization credentials, indicating an application is invoking the API on a user's behalf. 
            If not, API calls do not contain any user authorization information. 
            Callers can use this status flag to determine if API operations requiring authorization can be invoked.
            </remarks>
        </member>
        <member name="T:YSWL.OAuth.IO.AbstractResource">
            <summary>
            Convenience base class for <see cref="T:YSWL.OAuth.IO.IResource"/> implementations.
            </summary>
            <author>Bruno Baia</author>
            <seealso cref="T:YSWL.OAuth.IO.IResource"/>
        </member>
        <member name="M:YSWL.OAuth.IO.AbstractResource.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:YSWL.OAuth.IO.AbstractResource"/> class.
            </summary>
        </member>
        <member name="P:YSWL.OAuth.IO.AbstractResource.IsOpen">
            <summary>
            Gets a value indicating whether or not this resource represents a handle with an open stream? 
            Returns <see langword="true"/> if the source cannot be read multiple times.
            </summary>
            <remarks>
            This implementation always returns <see langword="false"/>.
            </remarks>
        </member>
        <member name="P:YSWL.OAuth.IO.AbstractResource.Uri">
            <summary>
            Gets the <see cref="T:System.Uri"/> handle for this resource, 
            or <see langword="null"/> if the source cannot be represented by an <see cref="T:System.Uri"/>.
            </summary>
        </member>
        <member name="M:YSWL.OAuth.IO.AbstractResource.GetStream">
            <summary>
            Returns a <see cref="T:System.IO.Stream"/> for this resource.
            </summary>
            <remarks>
            Clients of this interface must be aware that every access of this 
            method will create a <i>fresh</i> <see cref="T:System.IO.Stream"/>;
            it is the responsibility of the calling code to close any such <see cref="T:System.IO.Stream"/>.
            </remarks>
            <returns>
            An <see cref="T:System.IO.Stream"/>.
            </returns>
            <seealso cref="P:YSWL.OAuth.IO.IResource.IsOpen"/>
        </member>
        <member name="M:YSWL.OAuth.IO.AbstractResource.GetResourceNameWithoutProtocol(System.String)">
            <summary>
            Strips any protocol name from the supplied <paramref name="resourceName"/>.
            </summary>
            <remarks>
            If the supplied <paramref name="resourceName"/> does not have any protocol associated with it, 
            then the supplied <paramref name="resourceName"/> will be returned as-is.
            </remarks>
            <example>
            <code language="C#">
            GetResourceNameWithoutProtocol("http://www.mycompany.com/resource.txt");
            // returns www.mycompany.com/resource.txt
            </code>
            </example>
            <param name="resourceName">The name of the resource.</param>
            <returns>The name of the resource without the protocol name.</returns>
        </member>
        <member name="T:YSWL.OAuth.IO.AssemblyResource">
            <summary>
            An <see cref="T:YSWL.OAuth.IO.IResource"/> implementation for resources stored within assemblies 
            (aka embedded resources).
            </summary>
            <remarks>
            This implementation expects any resource name passed to the
            constructor to adhere to the following format:
            <code>
            assembly://<i>assemblyName</i>/<i>namespace</i>/<i>resourceName</i>
            </code>
            </remarks>
            <author>Bruno Baia</author>
            <seealso cref="T:YSWL.OAuth.IO.IResource"/>
        </member>
        <member name="M:YSWL.OAuth.IO.AssemblyResource.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:YSWL.OAuth.IO.AssemblyResource"/> class 
            with the specified resource name.
            </summary>
            <param name="resourceName">
            The resource name that must follow the format 'assembly://assemblyName/namespace/resourceName'.
            </param>
            <exception cref="T:System.UriFormatException">
            If the supplied <paramref name="resourceName"/> did not conform to the expected format.
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">
            If the assembly specified in the supplied <paramref name="resourceName"/> could not be found.
            </exception>
        </member>
        <member name="M:YSWL.OAuth.IO.AssemblyResource.#ctor(System.String,System.Type)">
            <summary>
            Creates a new instance of the <see cref="T:YSWL.OAuth.IO.AssemblyResource"/> class.
            <para/>
            Uses the specified <paramref name="type"/> to obtain the assembly and namespace for the resource.
            </summary>
            <param name="fileName">The name of the file in the assembly.</param>
            <param name="type">The type to determine the assembly and the namespace.</param>
        </member>
        <member name="M:YSWL.OAuth.IO.AssemblyResource.Initialize(System.String,System.String,System.Reflection.Assembly)">
            <summary>
            Initializes a new instance of the <see cref="T:YSWL.OAuth.IO.AssemblyResource"/> class. 
            </summary>
            <param name="fileName">The name of the file in the assembly.</param>
            <param name="ns">The namespace to use to generate the full resource name.</param>
            <param name="assembly">The assembly containing the resource.</param>
        </member>
        <member name="P:YSWL.OAuth.IO.AssemblyResource.Uri">
            <summary>
            Gets the <see cref="T:System.Uri"/> handle for this resource.
            <para/>
            The URI follows the format 'assembly://assemblyName/namespace/resourceName'.
            </summary>
        </member>
        <member name="M:YSWL.OAuth.IO.AssemblyResource.GetStream">
            <summary>
            Returns a <see cref="T:System.IO.Stream"/> for this resource.
            </summary>
            <remarks>
            Clients of this interface must be aware that every access of this 
            method will create a <i>fresh</i> <see cref="T:System.IO.Stream"/>;
            it is the responsibility of the calling code to close any such <see cref="T:System.IO.Stream"/>.
            </remarks>
            <returns>
            An <see cref="T:System.IO.Stream"/>.
            </returns>
            <seealso cref="P:YSWL.OAuth.IO.IResource.IsOpen"/>
        </member>
        <member name="M:YSWL.OAuth.IO.AssemblyResource.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current resource.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current resource.
            </returns>
        </member>
        <member name="T:YSWL.OAuth.IO.ByteArrayResource">
            <summary>
            A byte array backed resource.
            </summary>
            <author>Bruno Baia</author>
            <seealso cref="T:YSWL.OAuth.IO.IResource"/>
        </member>
        <member name="M:YSWL.OAuth.IO.ByteArrayResource.#ctor(System.Byte[])">
            <summary>
            Creates a new instance of the <see cref="T:YSWL.OAuth.IO.ByteArrayResource"/> class.
            </summary>
            <param name="bytes">The byte array for this resource.</param>
        </member>
        <member name="P:YSWL.OAuth.IO.ByteArrayResource.Bytes">
            <summary>
            Gets the byte array encapsulated by this resource.
            </summary>
        </member>
        <member name="P:YSWL.OAuth.IO.ByteArrayResource.IsOpen">
            <summary>
            Gets a value indicating whether or not this resource represents a handle with an open stream? 
            Returns <see langword="true"/> if the source cannot be read multiple times.
            </summary>
            <remarks>
            This implementation always returns <see langword="false"/>.
            </remarks>
        </member>
        <member name="P:YSWL.OAuth.IO.ByteArrayResource.Uri">
            <summary>
            Gets the <see cref="T:System.Uri"/> handle for this resource, 
            or <see langword="null"/> if the source cannot be represented by an <see cref="T:System.Uri"/>.
            </summary>
            <remarks>
            This implementation always returns <see langword="null"/>, 
            assuming that the resource cannot be represented as an <see cref="T:System.Uri"/>.
            </remarks>
        </member>
        <member name="M:YSWL.OAuth.IO.ByteArrayResource.GetStream">
            <summary>
            Returns a <see cref="T:System.IO.Stream"/> for this resource.
            </summary>
            <remarks>
            Clients of this interface must be aware that every access of this 
            method will create a <i>fresh</i> <see cref="T:System.IO.Stream"/>;
            it is the responsibility of the calling code to close any such <see cref="T:System.IO.Stream"/>.
            </remarks>
            <returns>
            An <see cref="T:System.IO.Stream"/>.
            </returns>
            <seealso cref="P:YSWL.OAuth.IO.IResource.IsOpen"/>
        </member>
        <member name="M:YSWL.OAuth.IO.ByteArrayResource.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current resource.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current resource.
            </returns>
        </member>
        <member name="T:YSWL.OAuth.IO.FileResource">
            <summary>
            A <see cref="T:System.IO.FileInfo"/> backed resource.
            </summary>
            <author>Bruno Baia</author>
            <seealso cref="T:YSWL.OAuth.IO.IResource"/>
        </member>
        <member name="M:YSWL.OAuth.IO.FileResource.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:YSWL.OAuth.IO.FileResource"/> class.
            </summary>
            <param name="resourceName">The name of the file system resource.</param>
        </member>
        <member name="P:YSWL.OAuth.IO.FileResource.File">
            <summary>
            Gets the underlying <see cref="T:System.IO.FileInfo"/> handle for this resource.
            </summary>
        </member>
        <member name="P:YSWL.OAuth.IO.FileResource.Uri">
            <summary>
            Gets the <see cref="T:System.Uri"/> handle for this resource.
            </summary>
        </member>
        <member name="M:YSWL.OAuth.IO.FileResource.GetStream">
            <summary>
            Returns a <see cref="T:System.IO.Stream"/> for this resource.
            </summary>
            <remarks>
            Clients of this interface must be aware that every access of this 
            method will create a <i>fresh</i> <see cref="T:System.IO.Stream"/>;
            it is the responsibility of the calling code to close any such <see cref="T:System.IO.Stream"/>.
            </remarks>
            <returns>
            An <see cref="T:System.IO.Stream"/>.
            </returns>
            <seealso cref="P:YSWL.OAuth.IO.IResource.IsOpen"/>
        </member>
        <member name="M:YSWL.OAuth.IO.FileResource.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current resource.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current resource.
            </returns>
        </member>
        <member name="T:YSWL.OAuth.IO.IResource">
            <summary>
            The central abstraction for access to resources such as <see cref="T:System.IO.Stream"/>s.
            </summary>
            <remarks>
            <para>
            This interface encapsulates a resource descriptor that abstracts away from the underlying type of resource; 
            possible resource types include files, memory streams, and databases (this list is not exhaustive).
            </para>
            <para>
            A <see cref="T:System.IO.Stream"/> can definitely be opened and accessed for every such resource; 
            if the resource exists in a physical form (for example, the resource is not an in-memory stream 
            or one that has been extracted from an assembly or ZIP file), a <see cref="T:System.Uri"/> 
            can also be accessed. The actual behavior is implementation-specific.
            </para>
            <para>
            Third party extensions or libraries that want to integrate external resources 
            are encouraged expose such resources via this abstraction.
            </para>
            </remarks>
            <author>Bruno Baia</author>
        </member>
        <member name="P:YSWL.OAuth.IO.IResource.IsOpen">
            <summary>
            Gets a value indicating whether or not this resource represents a handle with an open stream? 
            Returns <see langword="true"/> if the source cannot be read multiple times.
            </summary>
        </member>
        <member name="P:YSWL.OAuth.IO.IResource.Uri">
            <summary>
            Gets the <see cref="T:System.Uri"/> handle for this resource, 
            or <see langword="null"/> if the source cannot be represented by an <see cref="T:System.Uri"/>.
            </summary>
        </member>
        <member name="M:YSWL.OAuth.IO.IResource.GetStream">
            <summary>
            Returns a <see cref="T:System.IO.Stream"/> for this resource.
            </summary>
            <remarks>
            Clients of this interface must be aware that every access of this 
            method will create a <i>fresh</i> <see cref="T:System.IO.Stream"/>;
            it is the responsibility of the calling code to close any such <see cref="T:System.IO.Stream"/>.
            </remarks>
            <returns>
            An <see cref="T:System.IO.Stream"/>.
            </returns>
            <seealso cref="P:YSWL.OAuth.IO.IResource.IsOpen"/>
        </member>
        <member name="T:YSWL.OAuth.IO.StreamResource">
            <summary>
            <see cref="T:YSWL.OAuth.IO.IResource"/> adapter implementation for a <see cref="T:System.IO.Stream"/>.
            </summary>
            <remarks>
            <para>
            In contrast to other <see cref="T:YSWL.OAuth.IO.IResource"/> implementations, 
            this is an adapter for an already opened resource - the <see cref="P:YSWL.OAuth.IO.IResource.IsOpen"/> 
            therefore always returns <see langword="true"/>.
            </para>
            <para>
            Do not use this class if you need to keep the resource descriptor somewhere, 
            or if you need to read a stream multiple times.
            </para>
            </remarks>
            <author>Bruno Baia</author>
            <seealso cref="T:YSWL.OAuth.IO.IResource"/>
        </member>
        <member name="M:YSWL.OAuth.IO.StreamResource.#ctor(System.IO.Stream)">
            <summary>
            Creates a new instance of the <see cref="T:YSWL.OAuth.IO.StreamResource"/> class.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to use.</param>
        </member>
        <member name="P:YSWL.OAuth.IO.StreamResource.IsOpen">
            <summary>
            Gets a value indicating whether or not this resource represents a handle with an open stream? 
            Returns <see langword="true"/> if the source cannot be read multiple times.
            </summary>
            <remarks>
            This implementation always returns <see langword="true"/>.
            </remarks>
        </member>
        <member name="P:YSWL.OAuth.IO.StreamResource.Uri">
            <summary>
            Gets the <see cref="T:System.Uri"/> handle for this resource, 
            or <see langword="null"/> if the source cannot be represented by an <see cref="T:System.Uri"/>.
            </summary>
            <remarks>
            This implementation always returns <see langword="null"/>, 
            assuming that the resource cannot be represented as an <see cref="T:System.Uri"/>.
            </remarks>
        </member>
        <member name="M:YSWL.OAuth.IO.StreamResource.GetStream">
            <summary>
            Returns a <see cref="T:System.IO.Stream"/> for this resource.
            </summary>
            <remarks>
            Clients of this interface must be aware that every access of this 
            method will create a <i>fresh</i> <see cref="T:System.IO.Stream"/>;
            it is the responsibility of the calling code to close any such <see cref="T:System.IO.Stream"/>.
            </remarks>
            <returns>
            An <see cref="T:System.IO.Stream"/>.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If the underlying <see cref="T:System.IO.Stream"/> has already been read.
            </exception>
            <seealso cref="P:YSWL.OAuth.IO.IResource.IsOpen"/>
        </member>
        <member name="M:YSWL.OAuth.IO.StreamResource.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current resource.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current resource.
            </returns>
        </member>
        <member name="T:YSWL.OAuth.IServiceProvider`1">
            <summary>
            Top-level marker interface defining a ServiceProvider.
            A ServiceProvider provides access to a API that the application can invoke on behalf of a provider user.
            </summary>
            <remarks>
            For example, the FacebookServiceProvider could expose a FacebookApi that the application can invoke on behalf of Facebook user "Keith Donald".
            Defines a single parameterized type T representing a strongly-typed Java binding to the provider's API that can be obtained and invoked by the application.
            Does not define any operations since the provider authorization flow needed to construct an authorized API binding is protocol specific, for example, OAuth1 or OAuth2.
            </remarks>
            <typeparam name="T">The service provider's API type.</typeparam>
            <author>Keith Donald</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="T:YSWL.OAuth.Json.IJsonDeserializer">
            <summary>
            An interface to deserialize object of arbitrary type from JSON.
            </summary>
            <author>Bruno Baia</author>
        </member>
        <member name="M:YSWL.OAuth.Json.IJsonDeserializer.Deserialize(YSWL.OAuth.Json.JsonValue,YSWL.OAuth.Json.JsonMapper)">
            <summary>
            Deserialize the specified <paramref name="value"/> to a custom object.
            </summary>
            <param name="value">The <see cref="T:YSWL.OAuth.Json.JsonValue"/> to deserialize.</param>
            <param name="mapper">The <see cref="T:YSWL.OAuth.Json.JsonMapper"/> to use.</param>
            <returns>An object created from the passed <see cref="T:YSWL.OAuth.Json.JsonValue"/>.</returns>
        </member>
        <member name="T:YSWL.OAuth.Json.IJsonSerializer">
            <summary>
            An interface to serialize object of arbitrary type into JSON.
            </summary>
            <author>Bruno Baia</author>
        </member>
        <member name="M:YSWL.OAuth.Json.IJsonSerializer.Serialize(System.Object,YSWL.OAuth.Json.JsonMapper)">
            <summary>
            Serialize the specified <paramref name="obj"/> to a <see cref="T:YSWL.OAuth.Json.JsonValue"/>.
            </summary>
            <param name="obj">The object to serialize.</param>
            <param name="mapper">The <see cref="T:YSWL.OAuth.Json.JsonMapper"/> to use.</param>
            <returns>A <see cref="T:YSWL.OAuth.Json.JsonValue"/> object created from the passed objects.</returns>
        </member>
        <member name="T:YSWL.OAuth.Json.JsonArray">
            <summary>
            Defines a JSON array structure. 
            A JSON array is a list of <see cref="T:YSWL.OAuth.Json.JsonValue"/>s.
            </summary>
            <remarks>
            Specification details, see http://www.json.org/
            </remarks>
            <seealso cref="T:YSWL.OAuth.Json.JsonValue"/>
            <author>Bruno Baia</author>
        </member>
        <member name="M:YSWL.OAuth.Json.JsonArray.#ctor(YSWL.OAuth.Json.JsonValue[])">
            <summary>
            Creates a new instance of <see cref="T:YSWL.OAuth.Json.JsonArray"/>.
            </summary>
        </member>
        <member name="M:YSWL.OAuth.Json.JsonArray.GetValue(System.Int32)">
            <summary>
            Returns the <see cref="T:YSWL.OAuth.Json.JsonValue"/> at the specified entry index.
            </summary>
            <param name="index">The zero-based index of the entry that contains the value to get.</param>
            <returns>
            The <see cref="T:YSWL.OAuth.Json.JsonValue"/> at the specified index 
            or <see langword="null"/> if the entry does not exists.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.Json.JsonArray.GetValues">
            <summary>
            Returns all <see cref="T:YSWL.OAuth.Json.JsonValue"/>s of the JSON array structure.
            </summary>
            <returns>The collection of <see cref="T:YSWL.OAuth.Json.JsonValue"/>s.</returns>
        </member>
        <member name="M:YSWL.OAuth.Json.JsonArray.AddValue(YSWL.OAuth.Json.JsonValue)">
            <summary>
            Adds a <see cref="T:YSWL.OAuth.Json.JsonValue"/> to the end of the JSON array structure.
            </summary>
            <param name="value">The <see cref="T:YSWL.OAuth.Json.JsonValue"/> to add.</param>
        </member>
        <member name="T:YSWL.OAuth.Json.JsonException">
            <summary>
            The exception that is thrown while processing (parsing, generating or mapping) JSON content.
            </summary>
            <author>Bruno Baia</author>
        </member>
        <member name="M:YSWL.OAuth.Json.JsonException.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:YSWL.OAuth.Json.JsonException"/> class.
            </summary>
        </member>
        <member name="M:YSWL.OAuth.Json.JsonException.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:YSWL.OAuth.Json.JsonException"/> class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
        </member>
        <member name="M:YSWL.OAuth.Json.JsonException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the <see cref="T:YSWL.OAuth.Json.JsonException"/> class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="rootCause">
            The root exception that is being wrapped.
            </param>
        </member>
        <member name="M:YSWL.OAuth.Json.JsonException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the <see cref="T:YSWL.OAuth.Json.JsonException"/> class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="T:YSWL.OAuth.Json.JsonMapper">
            <summary>
            Data binder that provides functionality for converting between 
            objects of arbitrary types and <see cref="T:YSWL.OAuth.Json.JsonValue"/> instances.
            </summary>
            <author>Bruno Baia</author>
        </member>
        <member name="M:YSWL.OAuth.Json.JsonMapper.#ctor">
            <summary>
            Creates a new empty instance of <see cref="T:YSWL.OAuth.Json.JsonMapper"/>.
            </summary>
        </member>
        <member name="M:YSWL.OAuth.Json.JsonMapper.RegisterDeserializer(System.Type,YSWL.OAuth.Json.IJsonDeserializer)">
            <summary>
            Registers a deserializer for the specified <paramref name="type"/>.
            </summary>
            <param name="type">The type to deserialize to.</param>
            <param name="deserializer">The deserializer to use.</param>
        </member>
        <member name="M:YSWL.OAuth.Json.JsonMapper.RegisterSerializer(System.Type,YSWL.OAuth.Json.IJsonSerializer)">
            <summary>
            Registers a serializer for the specified <paramref name="type"/>.
            </summary>
            <param name="type">The type to serialize from.</param>
            <param name="serializer">The serializer to use.</param>
        </member>
        <member name="M:YSWL.OAuth.Json.JsonMapper.CanDeserialize(System.Type)">
            <summary>
            Indicates whether a <see cref="T:YSWL.OAuth.Json.JsonValue"/> can be deserialized to a given type.
            </summary>
            <param name="type">The type to use.</param>
            <returns>
            <see langword="true"/> if a <see cref="T:YSWL.OAuth.Json.JsonValue"/> can be deserialized to the given type; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.Json.JsonMapper.CanSerialize(System.Type)">
            <summary>
            Indicates whether a given type can be serialized to a <see cref="T:YSWL.OAuth.Json.JsonValue"/>.
            </summary>
            <param name="type">The type to use.</param>
            <returns>
            <see langword="true"/> if the given type can be serialized to a <see cref="T:YSWL.OAuth.Json.JsonValue"/>; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.Json.JsonMapper.Deserialize``1(YSWL.OAuth.Json.JsonValue)">
            <summary>
            Deserialize the specified <paramref name="value"/> to the type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type to deserialize to.</typeparam>
            <param name="value">The <see cref="T:YSWL.OAuth.Json.JsonValue"/> to deserialize.</param>
            <returns>An object created from the passed <see cref="T:YSWL.OAuth.Json.JsonValue"/>.</returns>
        </member>
        <member name="M:YSWL.OAuth.Json.JsonMapper.Serialize(System.Object)">
            <summary>
            Serialize the specified <paramref name="obj"/> to a <see cref="T:YSWL.OAuth.Json.JsonValue"/>.
            </summary>
            <param name="obj">The object to serialize.</param>
            <returns>A <see cref="T:YSWL.OAuth.Json.JsonValue"/> object created from the passed objects.</returns>
        </member>
        <member name="T:YSWL.OAuth.Json.JsonObject">
            <summary>
            Represents a JSON object structure. 
            A JSON object is a collection of name/value pairs.
            </summary>
            <remarks>
            Specification details, see http://www.json.org/
            </remarks>
            <seealso cref="T:YSWL.OAuth.Json.JsonValue"/>
            <author>Bruno Baia</author>
        </member>
        <member name="M:YSWL.OAuth.Json.JsonObject.#ctor">
            <summary>
            Creates a new instance of <see cref="T:YSWL.OAuth.Json.JsonObject"/>.
            </summary>
        </member>
        <member name="M:YSWL.OAuth.Json.JsonObject.GetValue(System.String)">
            <summary>
            Returns the <see cref="T:YSWL.OAuth.Json.JsonValue"/> associated with the specified entry name 
            if the value held by this instance is a JSON object structure.
            </summary>
            <param name="name">The name of the entry that contains the value to get.</param>
            <returns>
            The <see cref="T:YSWL.OAuth.Json.JsonValue"/> associated with the specified name 
            or <see langword="null"/> if the entry does not exists.
            </returns>
            <exception cref="T:YSWL.OAuth.Json.JsonException">If the value held by this instance is not a JSON object structure.</exception>
        </member>
        <member name="M:YSWL.OAuth.Json.JsonObject.GetValues">
            <summary>
            Returns all <see cref="T:YSWL.OAuth.Json.JsonValue"/>s 
            if the value held by this instance is a JSON object or array structure.
            </summary>
            <returns>The collection of <see cref="T:YSWL.OAuth.Json.JsonValue"/>s.</returns>
            <exception cref="T:YSWL.OAuth.Json.JsonException">If the value held by this instance is not a JSON object or array structure.</exception>
        </member>
        <member name="M:YSWL.OAuth.Json.JsonObject.ContainsName(System.String)">
            <summary>
            If the value held by this instance is a JSON object structure, 
            indicates whether or not it contains the specified entry name.
            </summary>
            <param name="name">The name of the entry to search for.</param>
            <returns>
            <see langword="true"/> if this JSON object contains the specified entry name; otherwise, <see langword="false"/>.
            </returns>
            <exception cref="T:YSWL.OAuth.Json.JsonException">If the value held by this instance is not a JSON object structure.</exception>
        </member>
        <member name="M:YSWL.OAuth.Json.JsonObject.GetNames">
            <summary>
            Returns all entry names 
            if the value held by this instance is a JSON object structure.
            </summary>
            <returns>The collection of entry names.</returns>
            <exception cref="T:YSWL.OAuth.Json.JsonException">If the value held by this instance is not a JSON object structure.</exception>
        </member>
        <member name="M:YSWL.OAuth.Json.JsonObject.AddValue(System.String,YSWL.OAuth.Json.JsonValue)">
            <summary>
            Adds the specified name/<see cref="T:YSWL.OAuth.Json.JsonValue"/> pair 
            to the JSON object structure held by this instance.
            </summary>
            <param name="name">The name of the entry to add.</param>
            <param name="value">The <see cref="T:YSWL.OAuth.Json.JsonValue"/> of the entry to add.</param>
            <exception cref="T:YSWL.OAuth.Json.JsonException">
            If the value held by this instance is not a JSON object structure or 
            if an entry with the same name already exists.
            </exception>
        </member>
        <member name="T:YSWL.OAuth.Json.JsonValue">
            <summary>
            A generic container for JSON content. 
            Every JSON value types (object, array, string, number, true, false or null) can be accessed via the provided functions.
            </summary>
            <remarks>
            Specification details, see http://www.json.org/
            </remarks>
            <seealso cref="T:YSWL.OAuth.Json.JsonObject"/>
            <seealso cref="T:YSWL.OAuth.Json.JsonArray"/>
            <author>Bruno Baia</author>
        </member>
        <member name="T:YSWL.OAuth.Json.JsonValue.JsonValueType">
            <summary>
            Specifies the JSON value types.
            </summary>
        </member>
        <member name="F:YSWL.OAuth.Json.JsonValue.JsonValueType.String">
            <summary>
            The JSON string.
            </summary>
        </member>
        <member name="F:YSWL.OAuth.Json.JsonValue.JsonValueType.Number">
            <summary>
            The JSON number.
            </summary>
        </member>
        <member name="F:YSWL.OAuth.Json.JsonValue.JsonValueType.Object">
            <summary>
            The JSON object.
            </summary>
        </member>
        <member name="F:YSWL.OAuth.Json.JsonValue.JsonValueType.Array">
            <summary>
            The JSON array.
            </summary>
        </member>
        <member name="F:YSWL.OAuth.Json.JsonValue.JsonValueType.Boolean">
            <summary>
            The JSON boolean.
            </summary>
        </member>
        <member name="F:YSWL.OAuth.Json.JsonValue.JsonValueType.Null">
            <summary>
            The JSON null.
            </summary>
        </member>
        <member name="F:YSWL.OAuth.Json.JsonValue.value">
            <summary>
            The value held by this instance.
            </summary>
        </member>
        <member name="F:YSWL.OAuth.Json.JsonValue.type">
            <summary>
            The JSON type of the value held by this instance.
            </summary>
        </member>
        <member name="P:YSWL.OAuth.Json.JsonValue.IsObject">
            <summary>
            Gets or sets a value indicating whether or not this instance holds a JSON object structure.
            </summary>
        </member>
        <member name="P:YSWL.OAuth.Json.JsonValue.IsArray">
            <summary>
            Gets or sets a value indicating whether or not this instance holds a JSON array structure.
            </summary>
        </member>
        <member name="P:YSWL.OAuth.Json.JsonValue.IsString">
            <summary>
            Gets or sets a value indicating whether or not this instance holds a JSON string.
            </summary>
        </member>
        <member name="P:YSWL.OAuth.Json.JsonValue.IsNumber">
            <summary>
            Gets or sets a value indicating whether or not this instance holds a JSON number.
            </summary>
        </member>
        <member name="P:YSWL.OAuth.Json.JsonValue.IsBoolean">
            <summary>
            Gets or sets a value indicating whether or not this instance holds a JSON boolean.
            </summary>
        </member>
        <member name="P:YSWL.OAuth.Json.JsonValue.IsNull">
            <summary>
            Gets or sets a value indicating whether or not this instance holds a JSON null value.
            </summary>
        </member>
        <member name="M:YSWL.OAuth.Json.JsonValue.#ctor">
            <summary>
            Creates a new instance of <see cref="T:YSWL.OAuth.Json.JsonValue"/> that holds a JSON null value.
            </summary>
        </member>
        <member name="M:YSWL.OAuth.Json.JsonValue.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:YSWL.OAuth.Json.JsonValue"/> that holds a JSON string value.
            </summary>
            <param name="value">The string value.</param>
        </member>
        <member name="M:YSWL.OAuth.Json.JsonValue.#ctor(System.Boolean)">
            <summary>
            Creates a new instance of <see cref="T:YSWL.OAuth.Json.JsonValue"/> that holds a JSON boolean value.
            </summary>
            <param name="value">The boolean value.</param>
        </member>
        <member name="M:YSWL.OAuth.Json.JsonValue.#ctor(System.Byte)">
            <summary>
            Creates a new instance of <see cref="T:YSWL.OAuth.Json.JsonValue"/> that holds a JSON number value.
            </summary>
            <param name="value">The number value.</param>
        </member>
        <member name="M:YSWL.OAuth.Json.JsonValue.#ctor(System.Decimal)">
            <summary>
            Creates a new instance of <see cref="T:YSWL.OAuth.Json.JsonValue"/> that holds a JSON number value.
            </summary>
            <param name="value">The number value.</param>
        </member>
        <member name="M:YSWL.OAuth.Json.JsonValue.#ctor(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:YSWL.OAuth.Json.JsonValue"/> that holds a JSON number value.
            </summary>
            <param name="value">The number value.</param>
        </member>
        <member name="M:YSWL.OAuth.Json.JsonValue.#ctor(System.Single)">
            <summary>
            Creates a new instance of <see cref="T:YSWL.OAuth.Json.JsonValue"/> that holds a JSON number value.
            </summary>
            <param name="value">The number value.</param>
        </member>
        <member name="M:YSWL.OAuth.Json.JsonValue.#ctor(System.Int32)">
            <summary>
            Creates a new instance of <see cref="T:YSWL.OAuth.Json.JsonValue"/> that holds a JSON number value.
            </summary>
            <param name="value">The number value.</param>
        </member>
        <member name="M:YSWL.OAuth.Json.JsonValue.#ctor(System.Int64)">
            <summary>
            Creates a new instance of <see cref="T:YSWL.OAuth.Json.JsonValue"/> that holds a JSON number value.
            </summary>
            <param name="value">The number value.</param>
        </member>
        <member name="M:YSWL.OAuth.Json.JsonValue.#ctor(System.Int16)">
            <summary>
            Creates a new instance of <see cref="T:YSWL.OAuth.Json.JsonValue"/> that holds a JSON number value.
            </summary>
            <param name="value">The number value.</param>
        </member>
        <member name="M:YSWL.OAuth.Json.JsonValue.#ctor(YSWL.OAuth.Json.JsonValue.JsonValueType,System.Object)">
            <summary>
            Creates a new instance of <see cref="T:YSWL.OAuth.Json.JsonValue"/> with the the given value and type.
            </summary>
            <param name="type">The JSON type.</param>
            <param name="value">The JSON value.</param>
        </member>
        <member name="M:YSWL.OAuth.Json.JsonValue.TryParse(System.String,YSWL.OAuth.Json.JsonValue@)">
            <summary>
            Parses the JSON string representation. A return value indicates whether the conversion succeeded.
            </summary>
            <param name="json">A JSON string to parse.</param>
            <param name="result">
            If the conversion succeed, contains the <see cref="T:YSWL.OAuth.Json.JsonValue"/> equivalent to the passed string, 
            or null if the conversion failed. 
            </param>
            <returns>
            <see langword="true"/> if the passed string was parsed successfully; 
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.Json.JsonValue.Parse(System.String)">
            <summary>
            Parses the JSON string representation.
            </summary>
            <param name="json">A JSON string to parse.</param>
            <returns>A <see cref="T:YSWL.OAuth.Json.JsonValue"/> equivalent to the passed string.</returns>
            <exception cref="T:YSWL.OAuth.Json.JsonException"><paramref name="json"/> is not in the correct format.</exception>
        </member>
        <member name="M:YSWL.OAuth.Json.JsonValue.ToString">
            <summary>
            Converts this instance to its JSON string representation.
            </summary>
            <returns>The JSON string representation of this instance.</returns>
        </member>
        <member name="M:YSWL.OAuth.Json.JsonValue.GetValue``1">
            <summary>
            Returns the value held by this instance converted to type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type to convert the value to.</typeparam>
            <returns>The value held by this instance.</returns>
            <exception cref="T:YSWL.OAuth.Json.JsonException">If the value held by this instance could not be converted to type <typeparamref name="T"/>.</exception>
        </member>
        <member name="M:YSWL.OAuth.Json.JsonValue.GetValue(System.String)">
            <summary>
            Returns the <see cref="T:YSWL.OAuth.Json.JsonValue"/> associated with the specified entry name 
            if the value held by this instance is a JSON object structure.
            </summary>
            <param name="name">The name of the entry that contains the value to get.</param>
            <returns>
            The <see cref="T:YSWL.OAuth.Json.JsonValue"/> associated with the specified name 
            or <see langword="null"/> if the entry does not exists.
            </returns>
            <exception cref="T:YSWL.OAuth.Json.JsonException">If the value held by this instance is not a JSON object structure.</exception>
        </member>
        <member name="M:YSWL.OAuth.Json.JsonValue.GetValue(System.Int32)">
            <summary>
            Returns the <see cref="T:YSWL.OAuth.Json.JsonValue"/> at the specified entry index 
            if the value held by this instance is a JSON array structure.
            </summary>
            <param name="index">The zero-based index of the entry that contains the value to get.</param>
            <returns>
            The <see cref="T:YSWL.OAuth.Json.JsonValue"/> at the specified index 
            or <see langword="null"/> if the entry does not exists.
            </returns>
            <exception cref="T:YSWL.OAuth.Json.JsonException">If the value held by this instance is not a JSON array structure.</exception>
        </member>
        <member name="M:YSWL.OAuth.Json.JsonValue.GetValue``1(System.String)">
            <summary>
            Returns the value associated with the specified entry name 
            if the value held by this instance is a JSON object structure.
            </summary>
            <remarks>
            Equivalent to: <code>GetValue(name).Get&lt;T>()</code>
            </remarks>
            <typeparam name="T">The type to convert the value to.</typeparam>
            <param name="name">The name of the entry that contains the value to get.</param>
            <returns>The value associated with the specified name.</returns>
            <exception cref="T:YSWL.OAuth.Json.JsonException">
            If the value held by this instance is not a JSON object structure or 
            if the entry with the specified name does not exists.
            </exception>
        </member>
        <member name="M:YSWL.OAuth.Json.JsonValue.GetValueOrDefault``1(System.String)">
            <summary>
            Returns the value associated with the specified entry name, or the object's default value, 
            if the value held by this instance is a JSON object structure.
            </summary>
            <typeparam name="T">The type to convert the value to.</typeparam>
            <param name="name">The name of the entry that contains the value to get.</param>
            <returns>The value associated with the specified name.</returns>
            <exception cref="T:YSWL.OAuth.Json.JsonException">
            If the value held by this instance is not a JSON object structure.
            </exception>
        </member>
        <member name="M:YSWL.OAuth.Json.JsonValue.GetValueOrDefault``1(System.String,``0)">
            <summary>
            Returns the value associated with the specified entry name, or the specified default value, 
            if the value held by this instance is a JSON object structure.
            </summary>
            <typeparam name="T">The type to convert the value to.</typeparam>
            <param name="name">The name of the entry that contains the value to get.</param>
            <param name="defaultValue">The default value to return if the entry does not exists.</param>
            <returns>The value associated with the specified name if the entry does not exists.</returns>
            <exception cref="T:YSWL.OAuth.Json.JsonException">
            If the value held by this instance is not a JSON object structure.
            </exception>
        </member>
        <member name="M:YSWL.OAuth.Json.JsonValue.GetValue``1(System.Int32)">
            <summary>
            Returns the value at the specified entry index 
            if the value held by this instance is a JSON array structure.
            </summary>
            <remarks>
            Equivalent to: <code>GetValue(index).Get&lt;T>()</code>
            </remarks>
            <typeparam name="T">The type to convert the value to.</typeparam>
            <param name="index">The zero-based index of the entry that contains the value to get.</param>
            <returns>The value at the specified index.</returns>
            <exception cref="T:YSWL.OAuth.Json.JsonException">
            If the value held by this instance is not a JSON array structure or
            if the entry at the specified index does not exists.
            </exception>
        </member>
        <member name="M:YSWL.OAuth.Json.JsonValue.GetValueOrDefault``1(System.Int32)">
            <summary>
            Returns the value at the specified entry index, or the object's default value, 
            if the value held by this instance is a JSON array structure.
            </summary>
            <typeparam name="T">The type to convert the value to.</typeparam>
            <param name="index">The zero-based index of the entry that contains the value to get.</param>
            <returns>The value at the specified index.</returns>
            <exception cref="T:YSWL.OAuth.Json.JsonException">
            If the value held by this instance is not a JSON array structure.
            </exception>
        </member>
        <member name="M:YSWL.OAuth.Json.JsonValue.GetValueOrDefault``1(System.Int32,``0)">
            <summary>
            Returns the value at the specified entry index, or the specified default value, 
            if the value held by this instance is a JSON array structure.
            </summary>
            <typeparam name="T">The type to convert the value to.</typeparam>
            <param name="index">The zero-based index of the entry that contains the value to get.</param>
            <param name="defaultValue">The default value to return if the entry does not exists.</param>
            <returns>The value at the specified index.</returns>
            <exception cref="T:YSWL.OAuth.Json.JsonException">
            If the value held by this instance is not a JSON array structure.
            </exception>
        </member>
        <member name="M:YSWL.OAuth.Json.JsonValue.GetValues">
            <summary>
            Returns all <see cref="T:YSWL.OAuth.Json.JsonValue"/>s 
            if the value held by this instance is a JSON object or array structure.
            </summary>
            <returns>The collection of <see cref="T:YSWL.OAuth.Json.JsonValue"/>s.</returns>
            <exception cref="T:YSWL.OAuth.Json.JsonException">If the value held by this instance is not a JSON object or array structure.</exception>
        </member>
        <member name="M:YSWL.OAuth.Json.JsonValue.GetValues(System.String)">
            <summary>
            Returns all <see cref="T:YSWL.OAuth.Json.JsonValue"/>s associated with the specified entry name 
            if the value held by this instance is a JSON object structure.
            </summary>
            <remarks>
            Equivalent to: <code>GetValue(name).GetValues()</code>
            </remarks>
            <param name="name">The name of the entry that contains the values to get.</param>
            <returns>The collection of <see cref="T:YSWL.OAuth.Json.JsonValue"/>s.</returns>
            <exception cref="T:YSWL.OAuth.Json.JsonException">
            If the value held by this instance is not a JSON object structure or 
            if the entry with the specified name does not exists.
            </exception>
        </member>
        <member name="M:YSWL.OAuth.Json.JsonValue.GetValues(System.Int32)">
            <summary>
            Returns all <see cref="T:YSWL.OAuth.Json.JsonValue"/>s at the specified entry index 
            if the value held by this instance is a JSON array structure.
            </summary>
            <remarks>
            Equivalent to: <code>GetValue(index).GetValues()</code>
            </remarks>
            <param name="index">The zero-based index of the entry that contains the values to get.</param>
            <returns>The collection of <see cref="T:YSWL.OAuth.Json.JsonValue"/>s.</returns>
            <exception cref="T:YSWL.OAuth.Json.JsonException">
            If the value held by this instance is not a JSON array structure or
            if the entry at the specified index does not exists.
            </exception>
        </member>
        <member name="M:YSWL.OAuth.Json.JsonValue.ContainsName(System.String)">
            <summary>
            If the value held by this instance is a JSON object structure, 
            indicates whether or not it contains the specified entry name.
            </summary>
            <param name="name">The name of the entry to search for.</param>
            <returns>
            <see langword="true"/> if this JSON object contains the specified entry name; otherwise, <see langword="false"/>.
            </returns>
            <exception cref="T:YSWL.OAuth.Json.JsonException">If the value held by this instance is not a JSON object structure.</exception>
        </member>
        <member name="M:YSWL.OAuth.Json.JsonValue.GetNames">
            <summary>
            Returns all entry names 
            if the value held by this instance is a JSON object structure.
            </summary>
            <returns>The collection of entry names.</returns>
            <exception cref="T:YSWL.OAuth.Json.JsonException">If the value held by this instance is not a JSON object structure.</exception>
        </member>
        <member name="T:YSWL.OAuth.Rest.Client.HttpClientErrorException">
            <summary>
            Exception thrown when an HTTP 4xx is received.
            </summary>
            <author>Arjen Poutsma</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.HttpClientErrorException.#ctor(System.Uri,YSWL.OAuth.Http.HttpMethod,YSWL.OAuth.Http.HttpResponseMessage{System.Byte[]})">
            <summary>
            Creates a new instance of <see cref="T:YSWL.OAuth.Rest.Client.HttpClientErrorException"/> 
            based on an HTTP response message.
            </summary>
            <param name="requestUri">The HTTP request URI.</param>
            <param name="requestMethod">The HTTP request method.</param>
            <param name="response">The HTTP response message.</param>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.HttpClientErrorException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the <see cref="T:YSWL.OAuth.Rest.Client.HttpClientErrorException"/> class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="T:YSWL.OAuth.Rest.Client.HttpResponseException">
            <summary>
            Base class for exceptions based on a response message.
            </summary>
            <author>Bruno Baia</author>
        </member>
        <member name="F:YSWL.OAuth.Rest.Client.HttpResponseException.DEFAULT_CHARSET">
            <summary>
            Default encoding for responses as string.
            </summary>
        </member>
        <member name="P:YSWL.OAuth.Rest.Client.HttpResponseException.RequestUri">
            <summary>
            Gets the HTTP request URI.
            </summary>
        </member>
        <member name="P:YSWL.OAuth.Rest.Client.HttpResponseException.RequestMethod">
            <summary>
            Gets the HTTP request method.
            </summary>
        </member>
        <member name="P:YSWL.OAuth.Rest.Client.HttpResponseException.Response">
            <summary>
            Gets the HTTP response message.
            </summary>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.HttpResponseException.#ctor(System.Uri,YSWL.OAuth.Http.HttpMethod,YSWL.OAuth.Http.HttpResponseMessage{System.Byte[]})">
            <summary>
            Creates a new instance of <see cref="T:YSWL.OAuth.Rest.Client.HttpResponseException"/> 
            based on an HTTP response message.
            </summary>
            <param name="requestUri">The HTTP request URI.</param>
            <param name="requestMethod">The HTTP request method.</param>
            <param name="response">The HTTP response message.</param>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.HttpResponseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the <see cref="T:YSWL.OAuth.Rest.Client.RestClientException"/> class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.HttpResponseException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with 
            information about the exception.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds 
            the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual 
            information about the source or destination.
            </param>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.HttpResponseException.GetResponseBodyAsString">
            <summary>
            Returns the response body as a string.
            </summary>
            <returns>The response body.</returns>
        </member>
        <member name="T:YSWL.OAuth.Rest.Client.HttpServerErrorException">
            <summary>
            Exception thrown when an HTTP 5xx is received.
            </summary>
            <author>Arjen Poutsma</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.HttpServerErrorException.#ctor(System.Uri,YSWL.OAuth.Http.HttpMethod,YSWL.OAuth.Http.HttpResponseMessage{System.Byte[]})">
            <summary>
            Creates a new instance of <see cref="T:YSWL.OAuth.Rest.Client.HttpServerErrorException"/> 
            based on an HTTP response message.
            </summary>
            <param name="requestUri">The HTTP request URI.</param>
            <param name="requestMethod">The HTTP request method.</param>
            <param name="response">The HTTP response message.</param>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.HttpServerErrorException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the <see cref="T:YSWL.OAuth.Rest.Client.HttpServerErrorException"/> class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="T:YSWL.OAuth.Rest.Client.IRequestCallback">
            <summary>
            Callback interface for code that operates on a <see cref="T:YSWL.OAuth.Http.Client.IClientHttpRequest"/>. 
            Allows to manipulate the request headers, and write to the request body.
            </summary>
            <remarks>
            <para>
            Callback interface used by <see cref="T:YSWL.OAuth.Rest.Client.RestTemplate"/>'s senders methods. 
            Implementations of this interface perform the actual work of writing data 
            to a <see cref="T:YSWL.OAuth.Http.Client.IClientHttpRequest"/>, but don't need to worry about exception 
            handling or closing resources.
            </para>
            <para>
            Used internally by the <see cref="T:YSWL.OAuth.Rest.Client.RestTemplate"/>, but also useful for application code.
            </para>
            </remarks>
            <author>Arjen Poutsma</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IRequestCallback.DoWithRequest(YSWL.OAuth.Http.Client.IClientHttpRequest)">
            <summary>
            Gets called by <see cref="T:YSWL.OAuth.Rest.Client.RestTemplate"/> with an <see cref="T:YSWL.OAuth.Http.Client.IClientHttpRequest"/> to write data. 
            </summary>
            <remarks>
            Does not need to care about closing the request or about handling errors: 
            this will all be handled by the <see cref="T:YSWL.OAuth.Rest.Client.RestTemplate"/> class.
            </remarks>
            <param name="request">The active HTTP request.</param>
        </member>
        <member name="T:YSWL.OAuth.Rest.Client.IResponseErrorHandler">
            <summary>
            Strategy interface used by the <see cref="T:YSWL.OAuth.Rest.Client.RestTemplate"/> to determine 
            whether a particular response has an error or not.
            </summary>
            <author>Arjen Poutsma</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IResponseErrorHandler.HasError(System.Uri,YSWL.OAuth.Http.HttpMethod,YSWL.OAuth.Http.Client.IClientHttpResponse)">
            <summary>
            Indicates whether the given response has any errors.
            <para/>
            Implementations will typically inspect the status code of the response.
            </summary>
            <param name="requestUri">The request URI.</param>
            <param name="requestMethod">The request method.</param>
            <param name="response">The response to inspect.</param>
            <returns>
            <see langword="true"/> if the response has an error; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IResponseErrorHandler.HandleError(System.Uri,YSWL.OAuth.Http.HttpMethod,YSWL.OAuth.Http.Client.IClientHttpResponse)">
            <summary>
            Handles the error in the given response. 
            <para/>
            This method is only called when HasError() method has returned <see langword="true"/>.
            </summary>
            <param name="requestUri">The request URI.</param>
            <param name="requestMethod">The request method.</param>
            <param name="response">The response with the error</param>
        </member>
        <member name="T:YSWL.OAuth.Rest.Client.IResponseExtractor`1">
            <summary>
            Callback interface for code that operates on a <see cref="T:YSWL.OAuth.Http.Client.IClientHttpResponse"/>. 
            Allows to manipulate the response headers, and extract the response body.
            </summary>
            <remarks>
            <para>
            Generic callback interface used by <see cref="T:YSWL.OAuth.Rest.Client.RestTemplate"/>'s retrieval methods. 
            Implementations of this interface perform the actual work of extracting data 
            from a <see cref="T:YSWL.OAuth.Http.Client.IClientHttpResponse"/>, but don't need to worry about exception 
            handling or closing resources.
            </para>
            <para>
            Used internally by the <see cref="T:YSWL.OAuth.Rest.Client.RestTemplate"/>, but also useful for application code.
            </para>
            </remarks>
            <author>Arjen Poutsma</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IResponseExtractor`1.ExtractData(YSWL.OAuth.Http.Client.IClientHttpResponse)">
            <summary>
            Gets called by <see cref="T:YSWL.OAuth.Rest.Client.RestTemplate"/> with an opened <see cref="T:YSWL.OAuth.Http.Client.IClientHttpResponse"/> to extract data. 
            Does not need to care about closing the request or about handling errors: 
            this will all be handled by the <see cref="T:YSWL.OAuth.Rest.Client.RestTemplate"/> class.
            </summary>
            <param name="response">The active HTTP request.</param>
        </member>
        <member name="T:YSWL.OAuth.Rest.Client.IRestOperations">
            <summary>
            Interface specifying a basic set of RESTful operations. 
            </summary>
            <remarks>
            Not often used directly, but a useful option to enhance testability, 
            as it can easily be mocked or stubbed.
            </remarks>
            <see cref="T:YSWL.OAuth.Rest.Client.RestTemplate"/>
            <author>Arjen Poutsma</author>
            <author>Juergen Hoeller</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IRestOperations.GetForObject``1(System.String,System.Object[])">
            <summary>
            Retrieve a representation by doing a GET on the specified URL. 
            The response (if any) is converted and returned.
            </summary>
            <remarks>
            URI Template variables are expanded using the given URI variables, if any.
            </remarks>
            <typeparam name="T">The type of the response value.</typeparam>
            <param name="url">The URL.</param>
            <param name="uriVariables">The variables to expand the template.</param>
            <returns>The converted object</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IRestOperations.GetForObject``1(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Retrieve a representation by doing a GET on the specified URL. 
            The response (if any) is converted and returned.
            </summary>
            <remarks>
            URI Template variables are expanded using the given dictionary.
            </remarks>
            <typeparam name="T">The type of the response value.</typeparam>
            <param name="url">The URL.</param>
            <param name="uriVariables">The dictionary containing variables for the URI template.</param>
            <returns>The converted object</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IRestOperations.GetForObject``1(System.Uri)">
            <summary>
            Retrieve a representation by doing a GET on the specified URL. 
            The response (if any) is converted and returned.
            </summary>
            <typeparam name="T">The type of the response value.</typeparam>
            <param name="url">The URL.</param>
            <returns>The converted object</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IRestOperations.GetForMessage``1(System.String,System.Object[])">
            <summary>
            Retrieve an entity by doing a GET on the specified URL. 
            The response is converted and stored in an <see cref="T:YSWL.OAuth.Http.HttpResponseMessage`1"/>.
            </summary>
            <remarks>
            URI Template variables are expanded using the given URI variables, if any.
            </remarks>
            <typeparam name="T">The type of the response value.</typeparam>
            <param name="url">The URL.</param>
            <param name="uriVariables">The variables to expand the template.</param>
            <returns>The HTTP response message.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IRestOperations.GetForMessage``1(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Retrieve an entity by doing a GET on the specified URL. 
            The response is converted and stored in an <see cref="T:YSWL.OAuth.Http.HttpResponseMessage`1"/>.
            </summary>
            <remarks>
            URI Template variables are expanded using the given dictionary.
            </remarks>
            <typeparam name="T">The type of the response value.</typeparam>
            <param name="url">The URL.</param>
            <param name="uriVariables">The dictionary containing variables for the URI template.</param>
            <returns>The HTTP response message.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IRestOperations.GetForMessage``1(System.Uri)">
            <summary>
            Retrieve an entity by doing a GET on the specified URL. 
            The response is converted and stored in an <see cref="T:YSWL.OAuth.Http.HttpResponseMessage`1"/>.
            </summary>
            <typeparam name="T">The type of the response value.</typeparam>
            <param name="url">The URL.</param>
            <returns>The HTTP response message.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IRestOperations.HeadForHeaders(System.String,System.Object[])">
            <summary>
            Retrieve all headers of the resource specified by the URI template.
            </summary>
            <remarks>
            URI Template variables are expanded using the given URI variables, if any.
            </remarks>
            <param name="url">The URL.</param>
            <param name="uriVariables">The variables to expand the template.</param>
            <returns>All HTTP headers of that resource</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IRestOperations.HeadForHeaders(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Retrieve all headers of the resource specified by the URI template.
            </summary>
            <remarks>
            URI Template variables are expanded using the given dictionary.
            </remarks>
            <param name="url">The URL.</param>
            <param name="uriVariables">The dictionary containing variables for the URI template.</param>
            <returns>All HTTP headers of that resource</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IRestOperations.HeadForHeaders(System.Uri)">
            <summary>
            Retrieve all headers of the resource specified by the URI template.
            </summary>
            <param name="url">The URL.</param>
            <returns>All HTTP headers of that resource</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IRestOperations.PostForLocation(System.String,System.Object,System.Object[])">
            <summary>
            Create a new resource by POSTing the given object to the URI template, 
            and returns the value of the 'Location' header. 
            This header typically indicates where the new resource is stored.
            </summary>
            <remarks>
            <para>
            URI Template variables are expanded using the given URI variables, if any.
            </para>
            </remarks>
            <param name="url">The URL.</param>
            <param name="request">
            The object to be POSTed, may be a <see cref="T:YSWL.OAuth.Http.HttpEntity"/> in order to add additional HTTP headers.
            </param>
            <param name="uriVariables">The variables to expand the template.</param>
            <returns>The value for the Location header.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IRestOperations.PostForLocation(System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Create a new resource by POSTing the given object to the URI template, 
            and returns the value of the 'Location' header. 
            This header typically indicates where the new resource is stored.
            </summary>
            <remarks>
            <para>
            URI Template variables are expanded using the given dictionary.
            </para>
            </remarks>
            <param name="url">The URL.</param>
            <param name="request">
            The object to be POSTed, may be a <see cref="T:YSWL.OAuth.Http.HttpEntity"/> in order to add additional HTTP headers.
            </param>
            <param name="uriVariables">The dictionary containing variables for the URI template.</param>
            <returns>The value for the Location header.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IRestOperations.PostForLocation(System.Uri,System.Object)">
            <summary>
            Create a new resource by POSTing the given object to the URI template, 
            and returns the value of the 'Location' header. 
            This header typically indicates where the new resource is stored.
            </summary>
            <param name="url">The URL.</param>
            <param name="request">
            The object to be POSTed, may be a <see cref="T:YSWL.OAuth.Http.HttpEntity"/> in order to add additional HTTP headers.
            </param>
            <returns>The value for the Location header.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IRestOperations.PostForObject``1(System.String,System.Object,System.Object[])">
            <summary>
            Create a new resource by POSTing the given object to the URI template, 
            and returns the representation found in the response. 
            </summary>
            <remarks>
            <para>
            URI Template variables are expanded using the given URI variables, if any.
            </para>
            </remarks>
            <typeparam name="T">The type of the response value.</typeparam>
            <param name="url">The URL.</param>
            <param name="request">
            The object to be POSTed, may be a <see cref="T:YSWL.OAuth.Http.HttpEntity"/> in order to add additional HTTP headers.
            </param>
            <param name="uriVariables">The variables to expand the template.</param>
            <returns>The converted object.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IRestOperations.PostForObject``1(System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Create a new resource by POSTing the given object to the URI template, 
            and returns the representation found in the response. 
            </summary>
            <remarks>
            <para>
            URI Template variables are expanded using the given dictionary.
            </para>
            </remarks>
            <typeparam name="T">The type of the response value.</typeparam>
            <param name="url">The URL.</param>
            <param name="request">
            The object to be POSTed, may be a <see cref="T:YSWL.OAuth.Http.HttpEntity"/> in order to add additional HTTP headers.
            </param>
            <param name="uriVariables">The dictionary containing variables for the URI template.</param>
            <returns>The converted object.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IRestOperations.PostForObject``1(System.Uri,System.Object)">
            <summary>
            Create a new resource by POSTing the given object to the URI template, 
            and returns the representation found in the response. 
            </summary>
            <typeparam name="T">The type of the response value.</typeparam>
            <param name="url">The URL.</param>
            <param name="request">
            The object to be POSTed, may be a <see cref="T:YSWL.OAuth.Http.HttpEntity"/> in order to add additional HTTP headers.
            </param>
            <returns>The converted object.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IRestOperations.PostForMessage``1(System.String,System.Object,System.Object[])">
            <summary>
            Create a new resource by POSTing the given object to the URI template, 
            and returns the response as <see cref="T:YSWL.OAuth.Http.HttpResponseMessage`1"/>. 
            </summary>
            <remarks>
            <para>
            URI Template variables are expanded using the given URI variables, if any.
            </para>
            </remarks>
            <typeparam name="T">The type of the response value.</typeparam>
            <param name="url">The URL.</param>
            <param name="request">
            The object to be POSTed, may be a <see cref="T:YSWL.OAuth.Http.HttpEntity"/> in order to add additional HTTP headers.
            </param>
            <param name="uriVariables">The variables to expand the template.</param>
            <returns>The HTTP response message.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IRestOperations.PostForMessage``1(System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Create a new resource by POSTing the given object to the URI template, 
            and returns the response as <see cref="T:YSWL.OAuth.Http.HttpResponseMessage`1"/>. 
            </summary>
            <remarks>
            <para>
            URI Template variables are expanded using the given dictionary.
            </para>
            </remarks>
            <typeparam name="T">The type of the response value.</typeparam>
            <param name="url">The URL.</param>
            <param name="request">
            The object to be POSTed, may be a <see cref="T:YSWL.OAuth.Http.HttpEntity"/> in order to add additional HTTP headers.
            </param>
            <param name="uriVariables">The dictionary containing variables for the URI template.</param>
            <returns>The HTTP response message.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IRestOperations.PostForMessage``1(System.Uri,System.Object)">
            <summary>
            Create a new resource by POSTing the given object to the URI template, 
            and returns the response as <see cref="T:YSWL.OAuth.Http.HttpResponseMessage`1"/>. 
            </summary>
            <typeparam name="T">The type of the response value.</typeparam>
            <param name="url">The URL.</param>
            <param name="request">
            The object to be POSTed, may be a <see cref="T:YSWL.OAuth.Http.HttpEntity"/> in order to add additional HTTP headers.
            </param>
            <returns>The HTTP response message.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IRestOperations.PostForMessage(System.String,System.Object,System.Object[])">
            <summary>
            Create a new resource by POSTing the given object to the URI template, 
            and returns the response with no entity as <see cref="T:YSWL.OAuth.Http.HttpResponseMessage"/>. 
            </summary>
            <remarks>
            <para>
            URI Template variables are expanded using the given URI variables, if any.
            </para>
            </remarks>
            <param name="url">The URL.</param>
            <param name="request">
            The object to be POSTed, may be a <see cref="T:YSWL.OAuth.Http.HttpEntity"/> in order to add additional HTTP headers.
            </param>
            <param name="uriVariables">The variables to expand the template.</param>
            <returns>The HTTP response message with no entity.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IRestOperations.PostForMessage(System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Create a new resource by POSTing the given object to the URI template, 
            and returns the response with no entity as <see cref="T:YSWL.OAuth.Http.HttpResponseMessage"/>. 
            </summary>
            <remarks>
            <para>
            URI Template variables are expanded using the given dictionary.
            </para>
            </remarks>
            <param name="url">The URL.</param>
            <param name="request">
            The object to be POSTed, may be a <see cref="T:YSWL.OAuth.Http.HttpEntity"/> in order to add additional HTTP headers.
            </param>
            <param name="uriVariables">The dictionary containing variables for the URI template.</param>
            <returns>The HTTP response message with no entity.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IRestOperations.PostForMessage(System.Uri,System.Object)">
            <summary>
            Create a new resource by POSTing the given object to the URI template, 
            and returns the response with no entity as <see cref="T:YSWL.OAuth.Http.HttpResponseMessage"/>. 
            </summary>
            <param name="url">The URL.</param>
            <param name="request">
            The object to be POSTed, may be a <see cref="T:YSWL.OAuth.Http.HttpEntity"/> in order to add additional HTTP headers.
            </param>
            <returns>The HTTP response message with no entity.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IRestOperations.Put(System.String,System.Object,System.Object[])">
            <summary>
            Create or update a resource by PUTting the given object to the URI.
            </summary>
            <remarks>
            <para>
            URI Template variables are expanded using the given URI variables, if any.
            </para>
            </remarks>
            <param name="url">The URL.</param>
            <param name="request">
            The object to be POSTed, may be a <see cref="T:YSWL.OAuth.Http.HttpEntity"/> in order to add additional HTTP headers.
            </param>
            <param name="uriVariables">The variables to expand the template.</param>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IRestOperations.Put(System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Create or update a resource by PUTting the given object to the URI.
            </summary>
            <remarks>
            <para>
            URI Template variables are expanded using the given dictionary.
            </para>
            </remarks>
            <param name="url">The URL.</param>
            <param name="request">
            The object to be POSTed, may be a <see cref="T:YSWL.OAuth.Http.HttpEntity"/> in order to add additional HTTP headers.
            </param>
            <param name="uriVariables">The dictionary containing variables for the URI template.</param>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IRestOperations.Put(System.Uri,System.Object)">
            <summary>
            Create or update a resource by PUTting the given object to the URI.
            </summary>
            <param name="url">The URL.</param>
            <param name="request">
            The object to be POSTed, may be a <see cref="T:YSWL.OAuth.Http.HttpEntity"/> in order to add additional HTTP headers.
            </param>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IRestOperations.Delete(System.String,System.Object[])">
            <summary>
            Delete the resources at the specified URI.
            </summary>
            <remarks>
            URI Template variables are expanded using the given URI variables, if any.
            </remarks>
            <param name="url">The URL.</param>
            <param name="uriVariables">The variables to expand the template.</param>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IRestOperations.Delete(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Delete the resources at the specified URI.
            </summary>
            <remarks>
            URI Template variables are expanded using the given dictionary.
            </remarks>
            <param name="url">The URL.</param>
            <param name="uriVariables">The dictionary containing variables for the URI template.</param>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IRestOperations.Delete(System.Uri)">
            <summary>
            Delete the resources at the specified URI.
            </summary>
            <param name="url">The URL.</param>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IRestOperations.OptionsForAllow(System.String,System.Object[])">
            <summary>
            Return the value of the Allow header for the given URI.
            </summary>
            <remarks>
            URI Template variables are expanded using the given URI variables, if any.
            </remarks>
            <param name="url">The URL.</param>
            <param name="uriVariables">The variables to expand the template.</param>
            <returns>The value of the allow header.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IRestOperations.OptionsForAllow(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Return the value of the Allow header for the given URI.
            </summary>
            <remarks>
            URI Template variables are expanded using the given dictionary.
            </remarks>
            <param name="url">The URL.</param>
            <param name="uriVariables">The dictionary containing variables for the URI template.</param>
            <returns>The value of the allow header.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IRestOperations.OptionsForAllow(System.Uri)">
            <summary>
            Return the value of the Allow header for the given URI.
            </summary>
            <param name="url">The URL.</param>
            <returns>The value of the allow header.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IRestOperations.Exchange``1(System.String,YSWL.OAuth.Http.HttpMethod,YSWL.OAuth.Http.HttpEntity,System.Object[])">
            <summary>
            Execute the HTTP method to the given URI template, writing the given request message to the request, 
            and returns the response as <see cref="T:YSWL.OAuth.Http.HttpResponseMessage`1"/>.
            </summary>
            <remarks>
            URI Template variables are expanded using the given URI variables, if any.
            </remarks>
            <typeparam name="T">The type of the response value.</typeparam>
            <param name="url">The URL.</param>
            <param name="method">The HTTP method (GET, POST, etc.)</param>
            <param name="requestEntity">
            The HTTP entity (headers and/or body) to write to the request, may be <see langword="null"/>.
            </param>
            <param name="uriVariables">The variables to expand the template.</param>
            <returns>The HTTP response message.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IRestOperations.Exchange``1(System.String,YSWL.OAuth.Http.HttpMethod,YSWL.OAuth.Http.HttpEntity,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Execute the HTTP method to the given URI template, writing the given request message to the request, 
            and returns the response as <see cref="T:YSWL.OAuth.Http.HttpResponseMessage`1"/>.
            </summary>
            <remarks>
            URI Template variables are expanded using the given dictionary.
            </remarks>
            <typeparam name="T">The type of the response value.</typeparam>
            <param name="url">The URL.</param>
            <param name="method">The HTTP method (GET, POST, etc.)</param>
            <param name="requestEntity">
            The HTTP entity (headers and/or body) to write to the request, may be <see langword="null"/>.
            </param>
            <param name="uriVariables">The dictionary containing variables for the URI template.</param>
            <returns>The HTTP response message.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IRestOperations.Exchange``1(System.Uri,YSWL.OAuth.Http.HttpMethod,YSWL.OAuth.Http.HttpEntity)">
            <summary>
            Execute the HTTP method to the given URI template, writing the given request message to the request, 
            and returns the response as <see cref="T:YSWL.OAuth.Http.HttpResponseMessage`1"/>.
            </summary>
            <typeparam name="T">The type of the response value.</typeparam>
            <param name="url">The URL.</param>
            <param name="method">The HTTP method (GET, POST, etc.)</param>
            <param name="requestEntity">
            The HTTP entity (headers and/or body) to write to the request, may be <see langword="null"/>.
            </param>
            <returns>The HTTP response message.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IRestOperations.Exchange(System.String,YSWL.OAuth.Http.HttpMethod,YSWL.OAuth.Http.HttpEntity,System.Object[])">
            <summary>
            Execute the HTTP method to the given URI template, writing the given request message to the request, 
            and returns the response with no entity as <see cref="T:YSWL.OAuth.Http.HttpResponseMessage"/>.
            </summary>
            <remarks>
            URI Template variables are expanded using the given URI variables, if any.
            </remarks>
            <param name="url">The URL.</param>
            <param name="method">The HTTP method (GET, POST, etc.)</param>
            <param name="requestEntity">
            The HTTP entity (headers and/or body) to write to the request, may be <see langword="null"/>.
            </param>
            <param name="uriVariables">The variables to expand the template.</param>
            <returns>The HTTP response message with no entity.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IRestOperations.Exchange(System.String,YSWL.OAuth.Http.HttpMethod,YSWL.OAuth.Http.HttpEntity,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Execute the HTTP method to the given URI template, writing the given request message to the request, 
            and returns the response with no entity as <see cref="T:YSWL.OAuth.Http.HttpResponseMessage"/>.
            </summary>
            <remarks>
            URI Template variables are expanded using the given dictionary.
            </remarks>
            <param name="url">The URL.</param>
            <param name="method">The HTTP method (GET, POST, etc.)</param>
            <param name="requestEntity">
            The HTTP entity (headers and/or body) to write to the request, may be <see langword="null"/>.
            </param>
            <param name="uriVariables">The dictionary containing variables for the URI template.</param>
            <returns>The HTTP response message with no entity.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IRestOperations.Exchange(System.Uri,YSWL.OAuth.Http.HttpMethod,YSWL.OAuth.Http.HttpEntity)">
            <summary>
            Execute the HTTP method to the given URI template, writing the given request message to the request, 
            and returns the response with no entity as <see cref="T:YSWL.OAuth.Http.HttpResponseMessage"/>.
            </summary>
            <param name="url">The URL.</param>
            <param name="method">The HTTP method (GET, POST, etc.)</param>
            <param name="requestEntity">
            The HTTP entity (headers and/or body) to write to the request, may be <see langword="null"/>.
            </param>
            <returns>The HTTP response message with no entity.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IRestOperations.Execute``1(System.String,YSWL.OAuth.Http.HttpMethod,YSWL.OAuth.Rest.Client.IRequestCallback,YSWL.OAuth.Rest.Client.IResponseExtractor{``0},System.Object[])">
            <summary>
            Execute the HTTP method to the given URI template, preparing the request with the 
            <see cref="T:YSWL.OAuth.Rest.Client.IRequestCallback"/>, and reading the response with an <see cref="T:YSWL.OAuth.Rest.Client.IResponseExtractor`1"/>.
            </summary>
            <remarks>
            URI Template variables are expanded using the given URI variables, if any.
            </remarks>
            <typeparam name="T">The type of the response value.</typeparam>
            <param name="url">The URL.</param>
            <param name="method">The HTTP method (GET, POST, etc.)</param>
            <param name="requestCallback">Object that prepares the request.</param>
            <param name="responseExtractor">Object that extracts the return value from the response.</param>
            <param name="uriVariables">The variables to expand the template.</param>
            <returns>An arbitrary object, as returned by the <see cref="T:YSWL.OAuth.Rest.Client.IResponseExtractor`1"/>.</returns>        
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IRestOperations.Execute``1(System.String,YSWL.OAuth.Http.HttpMethod,YSWL.OAuth.Rest.Client.IRequestCallback,YSWL.OAuth.Rest.Client.IResponseExtractor{``0},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Execute the HTTP method to the given URI template, preparing the request with the 
            <see cref="T:YSWL.OAuth.Rest.Client.IRequestCallback"/>, and reading the response with an <see cref="T:YSWL.OAuth.Rest.Client.IResponseExtractor`1"/>.
            </summary>
            <remarks>
            URI Template variables are expanded using the given dictionary.
            </remarks>
            <typeparam name="T">The type of the response value.</typeparam>
            <param name="url">The URL.</param>
            <param name="method">The HTTP method (GET, POST, etc.)</param>
            <param name="requestCallback">Object that prepares the request.</param>
            <param name="responseExtractor">Object that extracts the return value from the response.</param>
            <param name="uriVariables">The dictionary containing variables for the URI template.</param>
            <returns>An arbitrary object, as returned by the <see cref="T:YSWL.OAuth.Rest.Client.IResponseExtractor`1"/>.</returns>   
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IRestOperations.Execute``1(System.Uri,YSWL.OAuth.Http.HttpMethod,YSWL.OAuth.Rest.Client.IRequestCallback,YSWL.OAuth.Rest.Client.IResponseExtractor{``0})">
            <summary>
            Execute the HTTP method to the given URI template, preparing the request with the 
            <see cref="T:YSWL.OAuth.Rest.Client.IRequestCallback"/>, and reading the response with an <see cref="T:YSWL.OAuth.Rest.Client.IResponseExtractor`1"/>.
            </summary>
            <typeparam name="T">The type of the response value.</typeparam>
            <param name="url">The URL.</param>
            <param name="method">The HTTP method (GET, POST, etc.)</param>
            <param name="requestCallback">Object that prepares the request.</param>
            <param name="responseExtractor">Object that extracts the return value from the response.</param>
            <returns>An arbitrary object, as returned by the <see cref="T:YSWL.OAuth.Rest.Client.IResponseExtractor`1"/>.</returns>   
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IRestOperations.GetForObjectAsync``1(System.String,System.Action{YSWL.OAuth.Rest.Client.RestOperationCompletedEventArgs{``0}},System.Object[])">
            <summary>
            Asynchronously retrieve a representation by doing a GET on the specified URL. 
            The response (if any) is converted.
            </summary>
            <remarks>
            URI Template variables are expanded using the given URI variables, if any.
            </remarks>
            <typeparam name="T">The type of the response value.</typeparam>
            <param name="url">The URL.</param>
            <param name="getCompleted">
            The <code>Action&lt;T&gt;</code> to perform when the asynchronous GET method completes.
            </param>
            <param name="uriVariables">The variables to expand the template.</param>
            <returns>
            A <see cref="T:YSWL.OAuth.Rest.Client.RestOperationCanceler"/> instance that allows to cancel the asynchronous operation.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IRestOperations.GetForObjectAsync``1(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Action{YSWL.OAuth.Rest.Client.RestOperationCompletedEventArgs{``0}})">
            <summary>
            Asynchronously retrieve a representation by doing a GET on the specified URL. 
            The response (if any) is converted.
            </summary>
            <remarks>
            URI Template variables are expanded using the given dictionary.
            </remarks>
            <typeparam name="T">The type of the response value.</typeparam>
            <param name="url">The URL.</param>
            <param name="uriVariables">The dictionary containing variables for the URI template.</param>
            <param name="getCompleted">
            The <code>Action&lt;T&gt;</code> to perform when the asynchronous GET method completes.
            </param>
            <returns>
            A <see cref="T:YSWL.OAuth.Rest.Client.RestOperationCanceler"/> instance that allows to cancel the asynchronous operation.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IRestOperations.GetForObjectAsync``1(System.Uri,System.Action{YSWL.OAuth.Rest.Client.RestOperationCompletedEventArgs{``0}})">
            <summary>
            Asynchronously retrieve a representation by doing a GET on the specified URL. 
            The response (if any) is converted.
            </summary>
            <typeparam name="T">The type of the response value.</typeparam>
            <param name="url">The URL.</param>
            <param name="getCompleted">
            The <code>Action&lt;T&gt;</code> to perform when the asynchronous GET method completes.
            </param>
            <returns>
            A <see cref="T:YSWL.OAuth.Rest.Client.RestOperationCanceler"/> instance that allows to cancel the asynchronous operation.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IRestOperations.GetForMessageAsync``1(System.String,System.Action{YSWL.OAuth.Rest.Client.RestOperationCompletedEventArgs{YSWL.OAuth.Http.HttpResponseMessage{``0}}},System.Object[])">
            <summary>
            Asynchronously retrieve an entity by doing a GET on the specified URL. 
            The response is converted and stored in an <see cref="T:YSWL.OAuth.Http.HttpResponseMessage`1"/>.
            </summary>
            <remarks>
            URI Template variables are expanded using the given URI variables, if any.
            </remarks>
            <typeparam name="T">The type of the response value.</typeparam>
            <param name="url">The URL.</param>
            <param name="getCompleted">
            The <code>Action&lt;T&gt;</code> to perform when the asynchronous GET method completes.
            </param>
            <param name="uriVariables">The variables to expand the template.</param>
            <returns>
            A <see cref="T:YSWL.OAuth.Rest.Client.RestOperationCanceler"/> instance that allows to cancel the asynchronous operation.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IRestOperations.GetForMessageAsync``1(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Action{YSWL.OAuth.Rest.Client.RestOperationCompletedEventArgs{YSWL.OAuth.Http.HttpResponseMessage{``0}}})">
            <summary>
            Asynchronously retrieve an entity by doing a GET on the specified URL. 
            The response is converted and stored in an <see cref="T:YSWL.OAuth.Http.HttpResponseMessage`1"/>.
            </summary>
            <remarks>
            URI Template variables are expanded using the given dictionary.
            </remarks>
            <typeparam name="T">The type of the response value.</typeparam>
            <param name="url">The URL.</param>
            <param name="uriVariables">The dictionary containing variables for the URI template.</param>
            <param name="getCompleted">
            The <code>Action&lt;T&gt;</code> to perform when the asynchronous GET method completes.
            </param>
            <returns>
            A <see cref="T:YSWL.OAuth.Rest.Client.RestOperationCanceler"/> instance that allows to cancel the asynchronous operation.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IRestOperations.GetForMessageAsync``1(System.Uri,System.Action{YSWL.OAuth.Rest.Client.RestOperationCompletedEventArgs{YSWL.OAuth.Http.HttpResponseMessage{``0}}})">
            <summary>
            Asynchronously retrieve an entity by doing a GET on the specified URL. 
            The response is converted and stored in an <see cref="T:YSWL.OAuth.Http.HttpResponseMessage`1"/>.
            </summary>
            <typeparam name="T">The type of the response value.</typeparam>
            <param name="url">The URL.</param>
            <param name="getCompleted">
            The <code>Action&lt;T&gt;</code> to perform when the asynchronous GET method completes.
            </param>
            <returns>
            A <see cref="T:YSWL.OAuth.Rest.Client.RestOperationCanceler"/> instance that allows to cancel the asynchronous operation.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IRestOperations.HeadForHeadersAsync(System.String,System.Action{YSWL.OAuth.Rest.Client.RestOperationCompletedEventArgs{YSWL.OAuth.Http.HttpHeaders}},System.Object[])">
            <summary>
            Asynchronously retrieve all headers of the resource specified by the URI template.
            </summary>
            <remarks>
            URI Template variables are expanded using the given URI variables, if any.
            </remarks>
            <param name="url">The URL.</param>
            <param name="headCompleted">
            The <code>Action&lt;T&gt;</code> to perform when the asynchronous HEAD method completes.
            </param>
            <param name="uriVariables">The variables to expand the template.</param>
            <returns>
            A <see cref="T:YSWL.OAuth.Rest.Client.RestOperationCanceler"/> instance that allows to cancel the asynchronous operation.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IRestOperations.HeadForHeadersAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Action{YSWL.OAuth.Rest.Client.RestOperationCompletedEventArgs{YSWL.OAuth.Http.HttpHeaders}})">
            <summary>
            Asynchronously retrieve all headers of the resource specified by the URI template.
            </summary>
            <remarks>
            URI Template variables are expanded using the given dictionary.
            </remarks>
            <param name="url">The URL.</param>
            <param name="uriVariables">The dictionary containing variables for the URI template.</param>
            <param name="headCompleted">
            The <code>Action&lt;T&gt;</code> to perform when the asynchronous HEAD method completes.
            </param>
            <returns>
            A <see cref="T:YSWL.OAuth.Rest.Client.RestOperationCanceler"/> instance that allows to cancel the asynchronous operation.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IRestOperations.HeadForHeadersAsync(System.Uri,System.Action{YSWL.OAuth.Rest.Client.RestOperationCompletedEventArgs{YSWL.OAuth.Http.HttpHeaders}})">
            <summary>
            Asynchronously retrieve all headers of the resource specified by the URI template.
            </summary>
            <param name="url">The URL.</param>
            <param name="headCompleted">
            The <code>Action&lt;T&gt;</code> to perform when the asynchronous HEAD method completes.
            </param>
            <returns>
            A <see cref="T:YSWL.OAuth.Rest.Client.RestOperationCanceler"/> instance that allows to cancel the asynchronous operation.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IRestOperations.PostForLocationAsync(System.String,System.Object,System.Action{YSWL.OAuth.Rest.Client.RestOperationCompletedEventArgs{System.Uri}},System.Object[])">
            <summary>
            Asynchronously create a new resource by POSTing the given object to the URI template, 
            and returns the value of the 'Location' header. 
            This header typically indicates where the new resource is stored.
            </summary>
            <remarks>
            <para>
            URI Template variables are expanded using the given URI variables, if any.
            </para>
            </remarks>
            <param name="url">The URL.</param>
            <param name="request">
            The object to be POSTed, may be a <see cref="T:YSWL.OAuth.Http.HttpEntity"/> in order to add additional HTTP headers.
            </param>
            <param name="postCompleted">
            The <code>Action&lt;T&gt;</code> to perform when the asynchronous POST method completes.
            </param>
            <param name="uriVariables">The variables to expand the template.</param>
            <returns>
            A <see cref="T:YSWL.OAuth.Rest.Client.RestOperationCanceler"/> instance that allows to cancel the asynchronous operation.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IRestOperations.PostForLocationAsync(System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Action{YSWL.OAuth.Rest.Client.RestOperationCompletedEventArgs{System.Uri}})">
            <summary>
            Asynchronously create a new resource by POSTing the given object to the URI template, 
            and returns the value of the 'Location' header. 
            This header typically indicates where the new resource is stored.
            </summary>
            <remarks>
            <para>
            URI Template variables are expanded using the given dictionary.
            </para>
            </remarks>
            <param name="url">The URL.</param>
            <param name="request">
            The object to be POSTed, may be a <see cref="T:YSWL.OAuth.Http.HttpEntity"/> in order to add additional HTTP headers.
            </param>
            <param name="uriVariables">The dictionary containing variables for the URI template.</param>
            <param name="postCompleted">
            The <code>Action&lt;T&gt;</code> to perform when the asynchronous POST method completes.
            </param>
            <returns>
            A <see cref="T:YSWL.OAuth.Rest.Client.RestOperationCanceler"/> instance that allows to cancel the asynchronous operation.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IRestOperations.PostForLocationAsync(System.Uri,System.Object,System.Action{YSWL.OAuth.Rest.Client.RestOperationCompletedEventArgs{System.Uri}})">
            <summary>
            Asynchronously create a new resource by POSTing the given object to the URI template, 
            and returns the value of the 'Location' header. 
            This header typically indicates where the new resource is stored.
            </summary>
            <param name="url">The URL.</param>
            <param name="request">
            The object to be POSTed, may be a <see cref="T:YSWL.OAuth.Http.HttpEntity"/> in order to add additional HTTP headers.
            </param>
            <param name="postCompleted">
            The <code>Action&lt;T&gt;</code> to perform when the asynchronous POST method completes.
            </param>
            <returns>
            A <see cref="T:YSWL.OAuth.Rest.Client.RestOperationCanceler"/> instance that allows to cancel the asynchronous operation.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IRestOperations.PostForObjectAsync``1(System.String,System.Object,System.Action{YSWL.OAuth.Rest.Client.RestOperationCompletedEventArgs{``0}},System.Object[])">
            <summary>
            Asynchronously create a new resource by POSTing the given object to the URI template, 
            and returns the representation found in the response. 
            </summary>
            <remarks>
            <para>
            URI Template variables are expanded using the given URI variables, if any.
            </para>
            </remarks>
            <typeparam name="T">The type of the response value.</typeparam>
            <param name="url">The URL.</param>
            <param name="request">
            The object to be POSTed, may be a <see cref="T:YSWL.OAuth.Http.HttpEntity"/> in order to add additional HTTP headers.
            </param>
            <param name="postCompleted">
            The <code>Action&lt;T&gt;</code> to perform when the asynchronous POST method completes.
            </param>
            <param name="uriVariables">The variables to expand the template.</param>
            <returns>
            A <see cref="T:YSWL.OAuth.Rest.Client.RestOperationCanceler"/> instance that allows to cancel the asynchronous operation.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IRestOperations.PostForObjectAsync``1(System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Action{YSWL.OAuth.Rest.Client.RestOperationCompletedEventArgs{``0}})">
            <summary>
            Asynchronously create a new resource by POSTing the given object to the URI template, 
            and returns the representation found in the response. 
            </summary>
            <remarks>
            <para>
            URI Template variables are expanded using the given dictionary.
            </para>
            </remarks>
            <typeparam name="T">The type of the response value.</typeparam>
            <param name="url">The URL.</param>
            <param name="request">
            The object to be POSTed, may be a <see cref="T:YSWL.OAuth.Http.HttpEntity"/> in order to add additional HTTP headers.
            </param>
            <param name="uriVariables">The dictionary containing variables for the URI template.</param>
            <param name="postCompleted">
            The <code>Action&lt;T&gt;</code> to perform when the asynchronous POST method completes.
            </param>
            <returns>
            A <see cref="T:YSWL.OAuth.Rest.Client.RestOperationCanceler"/> instance that allows to cancel the asynchronous operation.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IRestOperations.PostForObjectAsync``1(System.Uri,System.Object,System.Action{YSWL.OAuth.Rest.Client.RestOperationCompletedEventArgs{``0}})">
            <summary>
            Asynchronously create a new resource by POSTing the given object to the URI template, 
            and returns the representation found in the response. 
            </summary>
            <typeparam name="T">The type of the response value.</typeparam>
            <param name="url">The URL.</param>
            <param name="request">
            The object to be POSTed, may be a <see cref="T:YSWL.OAuth.Http.HttpEntity"/> in order to add additional HTTP headers.
            </param>
            <param name="postCompleted">
            The <code>Action&lt;T&gt;</code> to perform when the asynchronous POST method completes.
            </param>
            <returns>
            A <see cref="T:YSWL.OAuth.Rest.Client.RestOperationCanceler"/> instance that allows to cancel the asynchronous operation.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IRestOperations.PostForMessageAsync``1(System.String,System.Object,System.Action{YSWL.OAuth.Rest.Client.RestOperationCompletedEventArgs{YSWL.OAuth.Http.HttpResponseMessage{``0}}},System.Object[])">
            <summary>
            Asynchronously create a new resource by POSTing the given object to the URI template, 
            and returns the response as <see cref="T:YSWL.OAuth.Http.HttpResponseMessage`1"/>. 
            </summary>
            <remarks>
            <para>
            URI Template variables are expanded using the given URI variables, if any.
            </para>
            </remarks>
            <typeparam name="T">The type of the response value.</typeparam>
            <param name="url">The URL.</param>
            <param name="request">
            The object to be POSTed, may be a <see cref="T:YSWL.OAuth.Http.HttpEntity"/> in order to add additional HTTP headers.
            </param>
            <param name="postCompleted">
            The <code>Action&lt;T&gt;</code> to perform when the asynchronous POST method completes.
            </param>
            <param name="uriVariables">The variables to expand the template.</param>
            <returns>
            A <see cref="T:YSWL.OAuth.Rest.Client.RestOperationCanceler"/> instance that allows to cancel the asynchronous operation.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IRestOperations.PostForMessageAsync``1(System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Action{YSWL.OAuth.Rest.Client.RestOperationCompletedEventArgs{YSWL.OAuth.Http.HttpResponseMessage{``0}}})">
            <summary>
            Asynchronously create a new resource by POSTing the given object to the URI template, 
            and returns the response as <see cref="T:YSWL.OAuth.Http.HttpResponseMessage`1"/>. 
            </summary>
            <remarks>
            <para>
            URI Template variables are expanded using the given dictionary.
            </para>
            </remarks>
            <typeparam name="T">The type of the response value.</typeparam>
            <param name="url">The URL.</param>
            <param name="request">
            The object to be POSTed, may be a <see cref="T:YSWL.OAuth.Http.HttpEntity"/> in order to add additional HTTP headers.
            </param>
            <param name="uriVariables">The dictionary containing variables for the URI template.</param>
            <param name="postCompleted">
            The <code>Action&lt;T&gt;</code> to perform when the asynchronous POST method completes.
            </param>
            <returns>
            A <see cref="T:YSWL.OAuth.Rest.Client.RestOperationCanceler"/> instance that allows to cancel the asynchronous operation.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IRestOperations.PostForMessageAsync``1(System.Uri,System.Object,System.Action{YSWL.OAuth.Rest.Client.RestOperationCompletedEventArgs{YSWL.OAuth.Http.HttpResponseMessage{``0}}})">
            <summary>
            Asynchronously create a new resource by POSTing the given object to the URI template, 
            and returns the response as <see cref="T:YSWL.OAuth.Http.HttpResponseMessage`1"/>. 
            </summary>
            <typeparam name="T">The type of the response value.</typeparam>
            <param name="url">The URL.</param>
            <param name="request">
            The object to be POSTed, may be a <see cref="T:YSWL.OAuth.Http.HttpEntity"/> in order to add additional HTTP headers.
            </param>
            <param name="postCompleted">
            The <code>Action&lt;T&gt;</code> to perform when the asynchronous POST method completes.
            </param>
            <returns>
            A <see cref="T:YSWL.OAuth.Rest.Client.RestOperationCanceler"/> instance that allows to cancel the asynchronous operation.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IRestOperations.PostForMessageAsync(System.String,System.Object,System.Action{YSWL.OAuth.Rest.Client.RestOperationCompletedEventArgs{YSWL.OAuth.Http.HttpResponseMessage}},System.Object[])">
            <summary>
            Asynchronously create a new resource by POSTing the given object to the URI template, 
            and returns the response with no entity as <see cref="T:YSWL.OAuth.Http.HttpResponseMessage"/>. 
            </summary>
            <remarks>
            <para>
            URI Template variables are expanded using the given URI variables, if any.
            </para>
            </remarks>
            <param name="url">The URL.</param>
            <param name="request">
            The object to be POSTed, may be a <see cref="T:YSWL.OAuth.Http.HttpEntity"/> in order to add additional HTTP headers.
            </param>
            <param name="postCompleted">
            The <code>Action&lt;T&gt;</code> to perform when the asynchronous POST method completes.
            </param>
            <param name="uriVariables">The variables to expand the template.</param>
            <returns>
            A <see cref="T:YSWL.OAuth.Rest.Client.RestOperationCanceler"/> instance that allows to cancel the asynchronous operation.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IRestOperations.PostForMessageAsync(System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Action{YSWL.OAuth.Rest.Client.RestOperationCompletedEventArgs{YSWL.OAuth.Http.HttpResponseMessage}})">
            <summary>
            Asynchronously create a new resource by POSTing the given object to the URI template, 
            and returns the response with no entity as <see cref="T:YSWL.OAuth.Http.HttpResponseMessage"/>. 
            </summary>
            <remarks>
            <para>
            URI Template variables are expanded using the given dictionary.
            </para>
            </remarks>
            <param name="url">The URL.</param>
            <param name="request">
            The object to be POSTed, may be a <see cref="T:YSWL.OAuth.Http.HttpEntity"/> in order to add additional HTTP headers.
            </param>
            <param name="uriVariables">The dictionary containing variables for the URI template.</param>
            <param name="postCompleted">
            The <code>Action&lt;T&gt;</code> to perform when the asynchronous POST method completes.
            </param>
            <returns>
            A <see cref="T:YSWL.OAuth.Rest.Client.RestOperationCanceler"/> instance that allows to cancel the asynchronous operation.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IRestOperations.PostForMessageAsync(System.Uri,System.Object,System.Action{YSWL.OAuth.Rest.Client.RestOperationCompletedEventArgs{YSWL.OAuth.Http.HttpResponseMessage}})">
            <summary>
            Asynchronously create a new resource by POSTing the given object to the URI template, 
            and returns the response with no entity as <see cref="T:YSWL.OAuth.Http.HttpResponseMessage"/>. 
            </summary>
            <param name="url">The URL.</param>
            <param name="request">
            The object to be POSTed, may be a <see cref="T:YSWL.OAuth.Http.HttpEntity"/> in order to add additional HTTP headers.
            </param>
            <param name="postCompleted">
            The <code>Action&lt;T&gt;</code> to perform when the asynchronous POST method completes.
            </param>
            <returns>
            A <see cref="T:YSWL.OAuth.Rest.Client.RestOperationCanceler"/> instance that allows to cancel the asynchronous operation.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IRestOperations.PutAsync(System.String,System.Object,System.Action{YSWL.OAuth.Rest.Client.RestOperationCompletedEventArgs{System.Object}},System.Object[])">
            <summary>
            Asynchronously create or update a resource by PUTting the given object to the URI.
            </summary>
            <remarks>
            <para>
            URI Template variables are expanded using the given URI variables, if any.
            </para>
            </remarks>
            <param name="url">The URL.</param>
            <param name="request">
            The object to be POSTed, may be a <see cref="T:YSWL.OAuth.Http.HttpEntity"/> in order to add additional HTTP headers.
            </param>
            <param name="putCompleted">
            The <code>Action&lt;T&gt;</code> to perform when the asynchronous PUT method completes.
            </param>
            <param name="uriVariables">The variables to expand the template.</param>
            <returns>
            A <see cref="T:YSWL.OAuth.Rest.Client.RestOperationCanceler"/> instance that allows to cancel the asynchronous operation.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IRestOperations.PutAsync(System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Action{YSWL.OAuth.Rest.Client.RestOperationCompletedEventArgs{System.Object}})">
            <summary>
            Asynchronously create or update a resource by PUTting the given object to the URI.
            </summary>
            <remarks>
            <para>
            URI Template variables are expanded using the given dictionary.
            </para>
            </remarks>
            <param name="url">The URL.</param>
            <param name="request">
            The object to be POSTed, may be a <see cref="T:YSWL.OAuth.Http.HttpEntity"/> in order to add additional HTTP headers.
            </param>
            <param name="uriVariables">The dictionary containing variables for the URI template.</param>
            <param name="putCompleted">
            The <code>Action&lt;T&gt;</code> to perform when the asynchronous PUT method completes.
            </param>
            <returns>
            A <see cref="T:YSWL.OAuth.Rest.Client.RestOperationCanceler"/> instance that allows to cancel the asynchronous operation.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IRestOperations.PutAsync(System.Uri,System.Object,System.Action{YSWL.OAuth.Rest.Client.RestOperationCompletedEventArgs{System.Object}})">
            <summary>
            Asynchronously create or update a resource by PUTting the given object to the URI.
            </summary>
            <param name="url">The URL.</param>
            <param name="request">
            The object to be POSTed, may be a <see cref="T:YSWL.OAuth.Http.HttpEntity"/> in order to add additional HTTP headers.
            </param>
            <param name="putCompleted">
            The <code>Action&lt;T&gt;</code> to perform when the asynchronous PUT method completes.
            </param>
            <returns>
            A <see cref="T:YSWL.OAuth.Rest.Client.RestOperationCanceler"/> instance that allows to cancel the asynchronous operation.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IRestOperations.DeleteAsync(System.String,System.Action{YSWL.OAuth.Rest.Client.RestOperationCompletedEventArgs{System.Object}},System.Object[])">
            <summary>
            Asynchronously delete the resources at the specified URI.
            </summary>
            <remarks>
            URI Template variables are expanded using the given URI variables, if any.
            </remarks>
            <param name="url">The URL.</param>
            <param name="deleteCompleted">
            The <code>Action&lt;T&gt;</code> to perform when the asynchronous PUT method completes.
            </param>
            <param name="uriVariables">The variables to expand the template.</param>
            <returns>
            A <see cref="T:YSWL.OAuth.Rest.Client.RestOperationCanceler"/> instance that allows to cancel the asynchronous operation.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IRestOperations.DeleteAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Action{YSWL.OAuth.Rest.Client.RestOperationCompletedEventArgs{System.Object}})">
            <summary>
            Asynchronously delete the resources at the specified URI.
            </summary>
            <remarks>
            URI Template variables are expanded using the given dictionary.
            </remarks>
            <param name="url">The URL.</param>
            <param name="uriVariables">The dictionary containing variables for the URI template.</param>
            <param name="deleteCompleted">
            The <code>Action&lt;T&gt;</code> to perform when the asynchronous PUT method completes.
            </param>
            <returns>
            A <see cref="T:YSWL.OAuth.Rest.Client.RestOperationCanceler"/> instance that allows to cancel the asynchronous operation.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IRestOperations.DeleteAsync(System.Uri,System.Action{YSWL.OAuth.Rest.Client.RestOperationCompletedEventArgs{System.Object}})">
            <summary>
            Asynchronously delete the resources at the specified URI.
            </summary>
            <param name="url">The URL.</param>
            <param name="deleteCompleted">
            The <code>Action&lt;T&gt;</code> to perform when the asynchronous PUT method completes.
            </param>
            <returns>
            A <see cref="T:YSWL.OAuth.Rest.Client.RestOperationCanceler"/> instance that allows to cancel the asynchronous operation.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IRestOperations.OptionsForAllowAsync(System.String,System.Action{YSWL.OAuth.Rest.Client.RestOperationCompletedEventArgs{System.Collections.Generic.IList{YSWL.OAuth.Http.HttpMethod}}},System.Object[])">
            <summary>
            Asynchronously return the value of the Allow header for the given URI.
            </summary>
            <remarks>
            URI Template variables are expanded using the given URI variables, if any.
            </remarks>
            <param name="url">The URL.</param>
            <param name="optionsCompleted">
            The <code>Action&lt;T&gt;</code> to perform when the asynchronous OPTIONS method completes.
            </param>
            <param name="uriVariables">The variables to expand the template.</param>
            <returns>
            A <see cref="T:YSWL.OAuth.Rest.Client.RestOperationCanceler"/> instance that allows to cancel the asynchronous operation.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IRestOperations.OptionsForAllowAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Action{YSWL.OAuth.Rest.Client.RestOperationCompletedEventArgs{System.Collections.Generic.IList{YSWL.OAuth.Http.HttpMethod}}})">
            <summary>
            Asynchronously return the value of the Allow header for the given URI.
            </summary>
            <remarks>
            URI Template variables are expanded using the given dictionary.
            </remarks>
            <param name="url">The URL.</param>
            <param name="uriVariables">The dictionary containing variables for the URI template.</param>
            <param name="optionsCompleted">
            The <code>Action&lt;T&gt;</code> to perform when the asynchronous OPTIONS method completes.
            </param>
            <returns>
            A <see cref="T:YSWL.OAuth.Rest.Client.RestOperationCanceler"/> instance that allows to cancel the asynchronous operation.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IRestOperations.OptionsForAllowAsync(System.Uri,System.Action{YSWL.OAuth.Rest.Client.RestOperationCompletedEventArgs{System.Collections.Generic.IList{YSWL.OAuth.Http.HttpMethod}}})">
            <summary>
            Asynchronously return the value of the Allow header for the given URI.
            </summary>
            <param name="url">The URL.</param>
            <param name="optionsCompleted">
            The <code>Action&lt;T&gt;</code> to perform when the asynchronous OPTIONS method completes.
            </param>
            <returns>
            A <see cref="T:YSWL.OAuth.Rest.Client.RestOperationCanceler"/> instance that allows to cancel the asynchronous operation.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IRestOperations.ExchangeAsync``1(System.String,YSWL.OAuth.Http.HttpMethod,YSWL.OAuth.Http.HttpEntity,System.Action{YSWL.OAuth.Rest.Client.RestOperationCompletedEventArgs{YSWL.OAuth.Http.HttpResponseMessage{``0}}},System.Object[])">
            <summary>
            Asynchronously execute the HTTP method to the given URI template, writing the given request message to the request, 
            and returns the response as <see cref="T:YSWL.OAuth.Http.HttpResponseMessage`1"/>.
            </summary>
            <remarks>
            URI Template variables are expanded using the given URI variables, if any.
            </remarks>
            <typeparam name="T">The type of the response value.</typeparam>
            <param name="url">The URL.</param>
            <param name="method">The HTTP method (GET, POST, etc.)</param>
            <param name="requestEntity">
            The HTTP entity (headers and/or body) to write to the request, may be <see langword="null"/>.
            </param>
            <param name="methodCompleted">
            The <code>Action&lt;T&gt;</code> to perform when the asynchronous method completes.
            </param>
            <param name="uriVariables">The variables to expand the template.</param>
            <returns>
            A <see cref="T:YSWL.OAuth.Rest.Client.RestOperationCanceler"/> instance that allows to cancel the asynchronous operation.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IRestOperations.ExchangeAsync``1(System.String,YSWL.OAuth.Http.HttpMethod,YSWL.OAuth.Http.HttpEntity,System.Collections.Generic.IDictionary{System.String,System.Object},System.Action{YSWL.OAuth.Rest.Client.RestOperationCompletedEventArgs{YSWL.OAuth.Http.HttpResponseMessage{``0}}})">
            <summary>
            Asynchronously execute the HTTP method to the given URI template, writing the given request message to the request, 
            and returns the response as <see cref="T:YSWL.OAuth.Http.HttpResponseMessage`1"/>.
            </summary>
            <remarks>
            URI Template variables are expanded using the given dictionary.
            </remarks>
            <typeparam name="T">The type of the response value.</typeparam>
            <param name="url">The URL.</param>
            <param name="method">The HTTP method (GET, POST, etc.)</param>
            <param name="requestEntity">
            The HTTP entity (headers and/or body) to write to the request, may be <see langword="null"/>.
            </param>
            <param name="uriVariables">The dictionary containing variables for the URI template.</param>
            <param name="methodCompleted">
            The <code>Action&lt;T&gt;</code> to perform when the asynchronous method completes.
            </param>
            <returns>
            A <see cref="T:YSWL.OAuth.Rest.Client.RestOperationCanceler"/> instance that allows to cancel the asynchronous operation.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IRestOperations.ExchangeAsync``1(System.Uri,YSWL.OAuth.Http.HttpMethod,YSWL.OAuth.Http.HttpEntity,System.Action{YSWL.OAuth.Rest.Client.RestOperationCompletedEventArgs{YSWL.OAuth.Http.HttpResponseMessage{``0}}})">
            <summary>
            Asynchronously execute the HTTP method to the given URI template, writing the given request message to the request, 
            and returns the response as <see cref="T:YSWL.OAuth.Http.HttpResponseMessage`1"/>.
            </summary>
            <typeparam name="T">The type of the response value.</typeparam>
            <param name="url">The URL.</param>
            <param name="method">The HTTP method (GET, POST, etc.)</param>
            <param name="requestEntity">
            The HTTP entity (headers and/or body) to write to the request, may be <see langword="null"/>.
            </param>
            <param name="methodCompleted">
            The <code>Action&lt;T&gt;</code> to perform when the asynchronous method completes.
            </param>
            <returns>
            A <see cref="T:YSWL.OAuth.Rest.Client.RestOperationCanceler"/> instance that allows to cancel the asynchronous operation.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IRestOperations.ExchangeAsync(System.String,YSWL.OAuth.Http.HttpMethod,YSWL.OAuth.Http.HttpEntity,System.Action{YSWL.OAuth.Rest.Client.RestOperationCompletedEventArgs{YSWL.OAuth.Http.HttpResponseMessage}},System.Object[])">
            <summary>
            Asynchronously execute the HTTP method to the given URI template, writing the given request message to the request, 
            and returns the response with no entity as <see cref="T:YSWL.OAuth.Http.HttpResponseMessage"/>.
            </summary>
            <remarks>
            URI Template variables are expanded using the given URI variables, if any.
            </remarks>
            <param name="url">The URL.</param>
            <param name="method">The HTTP method (GET, POST, etc.)</param>
            <param name="requestEntity">
            The HTTP entity (headers and/or body) to write to the request, may be <see langword="null"/>.
            </param>
            <param name="methodCompleted">
            The <code>Action&lt;T&gt;</code> to perform when the asynchronous method completes.
            </param>
            <param name="uriVariables">The variables to expand the template.</param>
            <returns>
            A <see cref="T:YSWL.OAuth.Rest.Client.RestOperationCanceler"/> instance that allows to cancel the asynchronous operation.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IRestOperations.ExchangeAsync(System.String,YSWL.OAuth.Http.HttpMethod,YSWL.OAuth.Http.HttpEntity,System.Collections.Generic.IDictionary{System.String,System.Object},System.Action{YSWL.OAuth.Rest.Client.RestOperationCompletedEventArgs{YSWL.OAuth.Http.HttpResponseMessage}})">
            <summary>
            Asynchronously execute the HTTP method to the given URI template, writing the given request message to the request, 
            and returns the response with no entity as <see cref="T:YSWL.OAuth.Http.HttpResponseMessage"/>.
            </summary>
            <remarks>
            URI Template variables are expanded using the given dictionary.
            </remarks>
            <param name="url">The URL.</param>
            <param name="method">The HTTP method (GET, POST, etc.)</param>
            <param name="requestEntity">
            The HTTP entity (headers and/or body) to write to the request, may be <see langword="null"/>.
            </param>
            <param name="uriVariables">The dictionary containing variables for the URI template.</param>
            <param name="methodCompleted">
            The <code>Action&lt;T&gt;</code> to perform when the asynchronous method completes.
            </param>
            <returns>
            A <see cref="T:YSWL.OAuth.Rest.Client.RestOperationCanceler"/> instance that allows to cancel the asynchronous operation.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IRestOperations.ExchangeAsync(System.Uri,YSWL.OAuth.Http.HttpMethod,YSWL.OAuth.Http.HttpEntity,System.Action{YSWL.OAuth.Rest.Client.RestOperationCompletedEventArgs{YSWL.OAuth.Http.HttpResponseMessage}})">
            <summary>
            Asynchronously execute the HTTP method to the given URI template, writing the given request message to the request, 
            and returns the response with no entity as <see cref="T:YSWL.OAuth.Http.HttpResponseMessage"/>.
            </summary>
            <param name="url">The URL.</param>
            <param name="method">The HTTP method (GET, POST, etc.)</param>
            <param name="requestEntity">
            The HTTP entity (headers and/or body) to write to the request, may be <see langword="null"/>.
            </param>
            <param name="methodCompleted">
            The <code>Action&lt;T&gt;</code> to perform when the asynchronous method completes.
            </param>
            <returns>
            A <see cref="T:YSWL.OAuth.Rest.Client.RestOperationCanceler"/> instance that allows to cancel the asynchronous operation.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IRestOperations.ExecuteAsync``1(System.String,YSWL.OAuth.Http.HttpMethod,YSWL.OAuth.Rest.Client.IRequestCallback,YSWL.OAuth.Rest.Client.IResponseExtractor{``0},System.Action{YSWL.OAuth.Rest.Client.RestOperationCompletedEventArgs{``0}},System.Object[])">
            <summary>
            Asynchronously execute the HTTP method to the given URI template, preparing the request with the 
            <see cref="T:YSWL.OAuth.Rest.Client.IRequestCallback"/>, and reading the response with an <see cref="T:YSWL.OAuth.Rest.Client.IResponseExtractor`1"/>.
            </summary>
            <remarks>
            URI Template variables are expanded using the given URI variables, if any.
            </remarks>
            <typeparam name="T">The type of the response value.</typeparam>
            <param name="url">The URL.</param>
            <param name="method">The HTTP method (GET, POST, etc.)</param>
            <param name="requestCallback">Object that prepares the request.</param>
            <param name="responseExtractor">Object that extracts the return value from the response.</param>
            <param name="methodCompleted">
            The <code>Action&lt;T&gt;</code> to perform when the asynchronous method completes.
            </param>       
            <param name="uriVariables">The variables to expand the template.</param>
            <returns>
            A <see cref="T:YSWL.OAuth.Rest.Client.RestOperationCanceler"/> instance that allows to cancel the asynchronous operation.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IRestOperations.ExecuteAsync``1(System.String,YSWL.OAuth.Http.HttpMethod,YSWL.OAuth.Rest.Client.IRequestCallback,YSWL.OAuth.Rest.Client.IResponseExtractor{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.Action{YSWL.OAuth.Rest.Client.RestOperationCompletedEventArgs{``0}})">
            <summary>
            Asynchronously execute the HTTP method to the given URI template, preparing the request with the 
            <see cref="T:YSWL.OAuth.Rest.Client.IRequestCallback"/>, and reading the response with an <see cref="T:YSWL.OAuth.Rest.Client.IResponseExtractor`1"/>.
            </summary>
            <remarks>
            URI Template variables are expanded using the given dictionary.
            </remarks>
            <typeparam name="T">The type of the response value.</typeparam>
            <param name="url">The URL.</param>
            <param name="method">The HTTP method (GET, POST, etc.)</param>
            <param name="requestCallback">Object that prepares the request.</param>
            <param name="responseExtractor">Object that extracts the return value from the response.</param>
            <param name="uriVariables">The dictionary containing variables for the URI template.</param>
            <param name="methodCompleted">
            The <code>Action&lt;T&gt;</code> to perform when the asynchronous method completes.
            </param>
            <returns>
            A <see cref="T:YSWL.OAuth.Rest.Client.RestOperationCanceler"/> instance that allows to cancel the asynchronous operation.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IRestOperations.ExecuteAsync``1(System.Uri,YSWL.OAuth.Http.HttpMethod,YSWL.OAuth.Rest.Client.IRequestCallback,YSWL.OAuth.Rest.Client.IResponseExtractor{``0},System.Action{YSWL.OAuth.Rest.Client.RestOperationCompletedEventArgs{``0}})">
            <summary>
            Asynchronously execute the HTTP method to the given URI template, preparing the request with the 
            <see cref="T:YSWL.OAuth.Rest.Client.IRequestCallback"/>, and reading the response with an <see cref="T:YSWL.OAuth.Rest.Client.IResponseExtractor`1"/>.
            </summary>
            <typeparam name="T">The type of the response value.</typeparam>
            <param name="url">The URL.</param>
            <param name="method">The HTTP method (GET, POST, etc.)</param>
            <param name="requestCallback">Object that prepares the request.</param>
            <param name="responseExtractor">Object that extracts the return value from the response.</param>
            <param name="methodCompleted">
            The <code>Action&lt;T&gt;</code> to perform when the asynchronous method completes.
            </param>  
            <returns>
            A <see cref="T:YSWL.OAuth.Rest.Client.RestOperationCanceler"/> instance that allows to cancel the asynchronous operation.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IRestOperations.GetForObjectAsync``1(System.String,System.Object[])">
            <summary>
            Asynchronously retrieve a representation by doing a GET on the specified URL. 
            The response (if any) is converted.
            </summary>
            <remarks>
            URI Template variables are expanded using the given URI variables, if any.
            </remarks>
            <typeparam name="T">The type of the response value.</typeparam>
            <param name="url">The URL.</param>
            <param name="uriVariables">The variables to expand the template.</param>
            <returns>A <code>Task&lt;T&gt;</code> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IRestOperations.GetForObjectAsync``1(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Asynchronously retrieve a representation by doing a GET on the specified URL. 
            The response (if any) is converted.
            </summary>
            <remarks>
            URI Template variables are expanded using the given dictionary.
            </remarks>
            <typeparam name="T">The type of the response value.</typeparam>
            <param name="url">The URL.</param>
            <param name="uriVariables">The dictionary containing variables for the URI template.</param>
            <returns>A <code>Task&lt;T&gt;</code> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IRestOperations.GetForObjectAsync``1(System.Uri)">
            <summary>
            Asynchronously retrieve a representation by doing a GET on the specified URL. 
            The response (if any) is converted.
            </summary>
            <typeparam name="T">The type of the response value.</typeparam>
            <param name="url">The URL.</param>
            <returns>A <code>Task&lt;T&gt;</code> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IRestOperations.GetForMessageAsync``1(System.String,System.Object[])">
            <summary>
            Asynchronously retrieve an entity by doing a GET on the specified URL. 
            The response is converted and stored in an <see cref="T:YSWL.OAuth.Http.HttpResponseMessage`1"/>.
            </summary>
            <remarks>
            URI Template variables are expanded using the given URI variables, if any.
            </remarks>
            <typeparam name="T">The type of the response value.</typeparam>
            <param name="url">The URL.</param>
            <param name="uriVariables">The variables to expand the template.</param>
            <returns>A <code>Task&lt;T&gt;</code> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IRestOperations.GetForMessageAsync``1(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Asynchronously retrieve an entity by doing a GET on the specified URL. 
            The response is converted and stored in an <see cref="T:YSWL.OAuth.Http.HttpResponseMessage`1"/>.
            </summary>
            <remarks>
            URI Template variables are expanded using the given dictionary.
            </remarks>
            <typeparam name="T">The type of the response value.</typeparam>
            <param name="url">The URL.</param>
            <param name="uriVariables">The dictionary containing variables for the URI template.</param>
            <returns>A <code>Task&lt;T&gt;</code> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IRestOperations.GetForMessageAsync``1(System.Uri)">
            <summary>
            Asynchronously retrieve an entity by doing a GET on the specified URL. 
            The response is converted and stored in an <see cref="T:YSWL.OAuth.Http.HttpResponseMessage`1"/>.
            </summary>
            <typeparam name="T">The type of the response value.</typeparam>
            <param name="url">The URL.</param>
            <returns>A <code>Task&lt;T&gt;</code> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IRestOperations.HeadForHeadersAsync(System.String,System.Object[])">
            <summary>
            Asynchronously retrieve all headers of the resource specified by the URI template.
            </summary>
            <remarks>
            URI Template variables are expanded using the given URI variables, if any.
            </remarks>
            <param name="url">The URL.</param>
            <param name="uriVariables">The variables to expand the template.</param>
            <returns>A <code>Task&lt;T&gt;</code> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IRestOperations.HeadForHeadersAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Asynchronously retrieve all headers of the resource specified by the URI template.
            </summary>
            <remarks>
            URI Template variables are expanded using the given dictionary.
            </remarks>
            <param name="url">The URL.</param>
            <param name="uriVariables">The dictionary containing variables for the URI template.</param>
            <returns>A <code>Task&lt;T&gt;</code> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IRestOperations.HeadForHeadersAsync(System.Uri)">
            <summary>
            Asynchronously retrieve all headers of the resource specified by the URI template.
            </summary>
            <param name="url">The URL.</param>
            <returns>A <code>Task&lt;T&gt;</code> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IRestOperations.PostForLocationAsync(System.String,System.Object,System.Object[])">
            <summary>
            Asynchronously create a new resource by POSTing the given object to the URI template, 
            and returns the value of the 'Location' header. 
            This header typically indicates where the new resource is stored.
            </summary>
            <remarks>
            <para>
            URI Template variables are expanded using the given URI variables, if any.
            </para>
            </remarks>
            <param name="url">The URL.</param>
            <param name="request">
            The object to be POSTed, may be a <see cref="T:YSWL.OAuth.Http.HttpEntity"/> in order to add additional HTTP headers.
            </param>
            <param name="uriVariables">The variables to expand the template.</param>
            <returns>A <code>Task&lt;T&gt;</code> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IRestOperations.PostForLocationAsync(System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Asynchronously create a new resource by POSTing the given object to the URI template, 
            and returns the value of the 'Location' header. 
            This header typically indicates where the new resource is stored.
            </summary>
            <remarks>
            <para>
            URI Template variables are expanded using the given dictionary.
            </para>
            </remarks>
            <param name="url">The URL.</param>
            <param name="request">
            The object to be POSTed, may be a <see cref="T:YSWL.OAuth.Http.HttpEntity"/> in order to add additional HTTP headers.
            </param>
            <param name="uriVariables">The dictionary containing variables for the URI template.</param>
            <returns>A <code>Task&lt;T&gt;</code> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IRestOperations.PostForLocationAsync(System.Uri,System.Object)">
            <summary>
            Asynchronously create a new resource by POSTing the given object to the URI template, 
            and returns the value of the 'Location' header. 
            This header typically indicates where the new resource is stored.
            </summary>
            <param name="url">The URL.</param>
            <param name="request">
            The object to be POSTed, may be a <see cref="T:YSWL.OAuth.Http.HttpEntity"/> in order to add additional HTTP headers.
            </param>
            <returns>A <code>Task&lt;T&gt;</code> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IRestOperations.PostForObjectAsync``1(System.String,System.Object,System.Object[])">
            <summary>
            Asynchronously create a new resource by POSTing the given object to the URI template, 
            and returns the representation found in the response. 
            </summary>
            <remarks>
            <para>
            URI Template variables are expanded using the given URI variables, if any.
            </para>
            </remarks>
            <typeparam name="T">The type of the response value.</typeparam>
            <param name="url">The URL.</param>
            <param name="request">
            The object to be POSTed, may be a <see cref="T:YSWL.OAuth.Http.HttpEntity"/> in order to add additional HTTP headers.
            </param>
            <param name="uriVariables">The variables to expand the template.</param>
            <returns>A <code>Task&lt;T&gt;</code> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IRestOperations.PostForObjectAsync``1(System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Asynchronously create a new resource by POSTing the given object to the URI template, 
            and returns the representation found in the response. 
            </summary>
            <remarks>
            <para>
            URI Template variables are expanded using the given dictionary.
            </para>
            </remarks>
            <typeparam name="T">The type of the response value.</typeparam>
            <param name="url">The URL.</param>
            <param name="request">
            The object to be POSTed, may be a <see cref="T:YSWL.OAuth.Http.HttpEntity"/> in order to add additional HTTP headers.
            </param>
            <param name="uriVariables">The dictionary containing variables for the URI template.</param>
            <returns>A <code>Task&lt;T&gt;</code> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IRestOperations.PostForObjectAsync``1(System.Uri,System.Object)">
            <summary>
            Asynchronously create a new resource by POSTing the given object to the URI template, 
            and returns the representation found in the response. 
            </summary>
            <typeparam name="T">The type of the response value.</typeparam>
            <param name="url">The URL.</param>
            <param name="request">
            The object to be POSTed, may be a <see cref="T:YSWL.OAuth.Http.HttpEntity"/> in order to add additional HTTP headers.
            </param>
            <returns>A <code>Task&lt;T&gt;</code> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IRestOperations.PostForMessageAsync``1(System.String,System.Object,System.Object[])">
            <summary>
            Asynchronously create a new resource by POSTing the given object to the URI template, 
            and returns the response as <see cref="T:YSWL.OAuth.Http.HttpResponseMessage`1"/>. 
            </summary>
            <remarks>
            <para>
            URI Template variables are expanded using the given URI variables, if any.
            </para>
            </remarks>
            <typeparam name="T">The type of the response value.</typeparam>
            <param name="url">The URL.</param>
            <param name="request">
            The object to be POSTed, may be a <see cref="T:YSWL.OAuth.Http.HttpEntity"/> in order to add additional HTTP headers.
            </param>
            <param name="uriVariables">The variables to expand the template.</param>
            <returns>A <code>Task&lt;T&gt;</code> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IRestOperations.PostForMessageAsync``1(System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Asynchronously create a new resource by POSTing the given object to the URI template, 
            and returns the response as <see cref="T:YSWL.OAuth.Http.HttpResponseMessage`1"/>. 
            </summary>
            <remarks>
            <para>
            URI Template variables are expanded using the given dictionary.
            </para>
            </remarks>
            <typeparam name="T">The type of the response value.</typeparam>
            <param name="url">The URL.</param>
            <param name="request">
            The object to be POSTed, may be a <see cref="T:YSWL.OAuth.Http.HttpEntity"/> in order to add additional HTTP headers.
            </param>
            <param name="uriVariables">The dictionary containing variables for the URI template.</param>
            <returns>A <code>Task&lt;T&gt;</code> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IRestOperations.PostForMessageAsync``1(System.Uri,System.Object)">
            <summary>
            Asynchronously create a new resource by POSTing the given object to the URI template, 
            and returns the response as <see cref="T:YSWL.OAuth.Http.HttpResponseMessage`1"/>. 
            </summary>
            <typeparam name="T">The type of the response value.</typeparam>
            <param name="url">The URL.</param>
            <param name="request">
            The object to be POSTed, may be a <see cref="T:YSWL.OAuth.Http.HttpEntity"/> in order to add additional HTTP headers.
            </param>
            <returns>A <code>Task&lt;T&gt;</code> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IRestOperations.PostForMessageAsync(System.String,System.Object,System.Object[])">
            <summary>
            Asynchronously create a new resource by POSTing the given object to the URI template, 
            and returns the response with no entity as <see cref="T:YSWL.OAuth.Http.HttpResponseMessage"/>. 
            </summary>
            <remarks>
            <para>
            URI Template variables are expanded using the given URI variables, if any.
            </para>
            </remarks>
            <param name="url">The URL.</param>
            <param name="request">
            The object to be POSTed, may be a <see cref="T:YSWL.OAuth.Http.HttpEntity"/> in order to add additional HTTP headers.
            </param>
            <param name="uriVariables">The variables to expand the template.</param>
            <returns>A <code>Task&lt;T&gt;</code> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IRestOperations.PostForMessageAsync(System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Asynchronously create a new resource by POSTing the given object to the URI template, 
            and returns the response with no entity as <see cref="T:YSWL.OAuth.Http.HttpResponseMessage"/>. 
            </summary>
            <remarks>
            <para>
            URI Template variables are expanded using the given dictionary.
            </para>
            </remarks>
            <param name="url">The URL.</param>
            <param name="request">
            The object to be POSTed, may be a <see cref="T:YSWL.OAuth.Http.HttpEntity"/> in order to add additional HTTP headers.
            </param>
            <param name="uriVariables">The dictionary containing variables for the URI template.</param>
            <returns>A <code>Task&lt;T&gt;</code> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IRestOperations.PostForMessageAsync(System.Uri,System.Object)">
            <summary>
            Asynchronously create a new resource by POSTing the given object to the URI template, 
            and returns the response with no entity as <see cref="T:YSWL.OAuth.Http.HttpResponseMessage"/>. 
            </summary>
            <param name="url">The URL.</param>
            <param name="request">
            The object to be POSTed, may be a <see cref="T:YSWL.OAuth.Http.HttpEntity"/> in order to add additional HTTP headers.
            </param>
            <returns>A <code>Task&lt;T&gt;</code> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IRestOperations.PutAsync(System.String,System.Object,System.Object[])">
            <summary>
            Asynchronously create or update a resource by PUTting the given object to the URI.
            </summary>
            <remarks>
            <para>
            URI Template variables are expanded using the given URI variables, if any.
            </para>
            </remarks>
            <param name="url">The URL.</param>
            <param name="request">
            The object to be POSTed, may be a <see cref="T:YSWL.OAuth.Http.HttpEntity"/> in order to add additional HTTP headers.
            </param>
            <param name="uriVariables">The variables to expand the template.</param>
            <returns>A <code>Task&lt;T&gt;</code> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IRestOperations.PutAsync(System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Asynchronously create or update a resource by PUTting the given object to the URI.
            </summary>
            <remarks>
            <para>
            URI Template variables are expanded using the given dictionary.
            </para>
            </remarks>
            <param name="url">The URL.</param>
            <param name="request">
            The object to be POSTed, may be a <see cref="T:YSWL.OAuth.Http.HttpEntity"/> in order to add additional HTTP headers.
            </param>
            <param name="uriVariables">The dictionary containing variables for the URI template.</param>
            <returns>A <code>Task&lt;T&gt;</code> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IRestOperations.PutAsync(System.Uri,System.Object)">
            <summary>
            Asynchronously create or update a resource by PUTting the given object to the URI.
            </summary>
            <param name="url">The URL.</param>
            <param name="request">
            The object to be POSTed, may be a <see cref="T:YSWL.OAuth.Http.HttpEntity"/> in order to add additional HTTP headers.
            </param>
            <returns>A <code>Task&lt;T&gt;</code> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IRestOperations.DeleteAsync(System.String,System.Object[])">
            <summary>
            Asynchronously delete the resources at the specified URI.
            </summary>
            <remarks>
            URI Template variables are expanded using the given URI variables, if any.
            </remarks>
            <param name="url">The URL.</param>
            <param name="uriVariables">The variables to expand the template.</param>
            <returns>A <code>Task&lt;T&gt;</code> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IRestOperations.DeleteAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Asynchronously delete the resources at the specified URI.
            </summary>
            <remarks>
            URI Template variables are expanded using the given dictionary.
            </remarks>
            <param name="url">The URL.</param>
            <param name="uriVariables">The dictionary containing variables for the URI template.</param>
            <returns>A <code>Task&lt;T&gt;</code> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IRestOperations.DeleteAsync(System.Uri)">
            <summary>
            Asynchronously delete the resources at the specified URI.
            </summary>
            <param name="url">The URL.</param>
            <returns>A <code>Task&lt;T&gt;</code> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IRestOperations.OptionsForAllowAsync(System.String,System.Object[])">
            <summary>
            Asynchronously return the value of the Allow header for the given URI.
            </summary>
            <remarks>
            URI Template variables are expanded using the given URI variables, if any.
            </remarks>
            <param name="url">The URL.</param>
            <param name="uriVariables">The variables to expand the template.</param>
            <returns>A <code>Task&lt;T&gt;</code> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IRestOperations.OptionsForAllowAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Asynchronously return the value of the Allow header for the given URI.
            </summary>
            <remarks>
            URI Template variables are expanded using the given dictionary.
            </remarks>
            <param name="url">The URL.</param>
            <param name="uriVariables">The dictionary containing variables for the URI template.</param>
            <returns>A <code>Task&lt;T&gt;</code> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IRestOperations.OptionsForAllowAsync(System.Uri)">
            <summary>
            Asynchronously return the value of the Allow header for the given URI.
            </summary>
            <param name="url">The URL.</param>
            <returns>A <code>Task&lt;T&gt;</code> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IRestOperations.ExchangeAsync``1(System.String,YSWL.OAuth.Http.HttpMethod,YSWL.OAuth.Http.HttpEntity,System.Threading.CancellationToken,System.Object[])">
            <summary>
            Asynchronously execute the HTTP method to the given URI template, writing the given request message to the request, 
            and returns the response as <see cref="T:YSWL.OAuth.Http.HttpResponseMessage`1"/>.
            </summary>
            <remarks>
            URI Template variables are expanded using the given URI variables, if any.
            </remarks>
            <typeparam name="T">The type of the response value.</typeparam>
            <param name="url">The URL.</param>
            <param name="method">The HTTP method (GET, POST, etc.)</param>
            <param name="requestEntity">
            The HTTP entity (headers and/or body) to write to the request, may be <see langword="null"/>.
            </param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that will be assigned to the task.</param>
            <param name="uriVariables">The variables to expand the template.</param>
            <returns>A <code>Task&lt;T&gt;</code> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IRestOperations.ExchangeAsync``1(System.String,YSWL.OAuth.Http.HttpMethod,YSWL.OAuth.Http.HttpEntity,System.Threading.CancellationToken,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Asynchronously execute the HTTP method to the given URI template, writing the given request message to the request, 
            and returns the response as <see cref="T:YSWL.OAuth.Http.HttpResponseMessage`1"/>.
            </summary>
            <remarks>
            URI Template variables are expanded using the given dictionary.
            </remarks>
            <typeparam name="T">The type of the response value.</typeparam>
            <param name="url">The URL.</param>
            <param name="method">The HTTP method (GET, POST, etc.)</param>
            <param name="requestEntity">
            The HTTP entity (headers and/or body) to write to the request, may be <see langword="null"/>.
            </param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that will be assigned to the task.</param>
            <param name="uriVariables">The dictionary containing variables for the URI template.</param>
            <returns>A <code>Task&lt;T&gt;</code> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IRestOperations.ExchangeAsync``1(System.Uri,YSWL.OAuth.Http.HttpMethod,YSWL.OAuth.Http.HttpEntity,System.Threading.CancellationToken)">
            <summary>
            Asynchronously execute the HTTP method to the given URI template, writing the given request message to the request, 
            and returns the response as <see cref="T:YSWL.OAuth.Http.HttpResponseMessage`1"/>.
            </summary>
            <typeparam name="T">The type of the response value.</typeparam>
            <param name="url">The URL.</param>
            <param name="method">The HTTP method (GET, POST, etc.)</param>
            <param name="requestEntity">
            The HTTP entity (headers and/or body) to write to the request, may be <see langword="null"/>.
            </param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that will be assigned to the task.</param>
            <returns>A <code>Task&lt;T&gt;</code> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IRestOperations.ExchangeAsync(System.String,YSWL.OAuth.Http.HttpMethod,YSWL.OAuth.Http.HttpEntity,System.Threading.CancellationToken,System.Object[])">
            <summary>
            Asynchronously execute the HTTP method to the given URI template, writing the given request message to the request, 
            and returns the response with no entity as <see cref="T:YSWL.OAuth.Http.HttpResponseMessage"/>.
            </summary>
            <remarks>
            URI Template variables are expanded using the given URI variables, if any.
            </remarks>
            <param name="url">The URL.</param>
            <param name="method">The HTTP method (GET, POST, etc.)</param>
            <param name="requestEntity">
            The HTTP entity (headers and/or body) to write to the request, may be <see langword="null"/>.
            </param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that will be assigned to the task.</param>
            <param name="uriVariables">The variables to expand the template.</param>
            <returns>A <code>Task&lt;T&gt;</code> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IRestOperations.ExchangeAsync(System.String,YSWL.OAuth.Http.HttpMethod,YSWL.OAuth.Http.HttpEntity,System.Threading.CancellationToken,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Asynchronously execute the HTTP method to the given URI template, writing the given request message to the request, 
            and returns the response with no entity as <see cref="T:YSWL.OAuth.Http.HttpResponseMessage"/>.
            </summary>
            <remarks>
            URI Template variables are expanded using the given dictionary.
            </remarks>
            <param name="url">The URL.</param>
            <param name="method">The HTTP method (GET, POST, etc.)</param>
            <param name="requestEntity">
            The HTTP entity (headers and/or body) to write to the request, may be <see langword="null"/>.
            </param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that will be assigned to the task.</param>
            <param name="uriVariables">The dictionary containing variables for the URI template.</param>
            <returns>A <code>Task&lt;T&gt;</code> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IRestOperations.ExchangeAsync(System.Uri,YSWL.OAuth.Http.HttpMethod,YSWL.OAuth.Http.HttpEntity,System.Threading.CancellationToken)">
            <summary>
            Asynchronously execute the HTTP method to the given URI template, writing the given request message to the request, 
            and returns the response with no entity as <see cref="T:YSWL.OAuth.Http.HttpResponseMessage"/>.
            </summary>
            <param name="url">The URL.</param>
            <param name="method">The HTTP method (GET, POST, etc.)</param>
            <param name="requestEntity">
            The HTTP entity (headers and/or body) to write to the request, may be <see langword="null"/>.
            </param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that will be assigned to the task.</param>
            <returns>A <code>Task&lt;T&gt;</code> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IRestOperations.ExecuteAsync``1(System.String,YSWL.OAuth.Http.HttpMethod,YSWL.OAuth.Rest.Client.IRequestCallback,YSWL.OAuth.Rest.Client.IResponseExtractor{``0},System.Threading.CancellationToken,System.Object[])">
            <summary>
            Asynchronously execute the HTTP method to the given URI template, preparing the request with the 
            <see cref="T:YSWL.OAuth.Rest.Client.IRequestCallback"/>, and reading the response with an <see cref="T:YSWL.OAuth.Rest.Client.IResponseExtractor`1"/>.
            </summary>
            <remarks>
            URI Template variables are expanded using the given URI variables, if any.
            </remarks>
            <typeparam name="T">The type of the response value.</typeparam>
            <param name="url">The URL.</param>
            <param name="method">The HTTP method (GET, POST, etc.)</param>
            <param name="requestCallback">Object that prepares the request.</param>
            <param name="responseExtractor">Object that extracts the return value from the response.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that will be assigned to the task.</param>
            <param name="uriVariables">The variables to expand the template.</param>
            <returns>A <code>Task&lt;T&gt;</code> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IRestOperations.ExecuteAsync``1(System.String,YSWL.OAuth.Http.HttpMethod,YSWL.OAuth.Rest.Client.IRequestCallback,YSWL.OAuth.Rest.Client.IResponseExtractor{``0},System.Threading.CancellationToken,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Asynchronously execute the HTTP method to the given URI template, preparing the request with the 
            <see cref="T:YSWL.OAuth.Rest.Client.IRequestCallback"/>, and reading the response with an <see cref="T:YSWL.OAuth.Rest.Client.IResponseExtractor`1"/>.
            </summary>
            <remarks>
            URI Template variables are expanded using the given dictionary.
            </remarks>
            <typeparam name="T">The type of the response value.</typeparam>
            <param name="url">The URL.</param>
            <param name="method">The HTTP method (GET, POST, etc.)</param>
            <param name="requestCallback">Object that prepares the request.</param>
            <param name="responseExtractor">Object that extracts the return value from the response.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that will be assigned to the task.</param>
            <param name="uriVariables">The dictionary containing variables for the URI template.</param>
            <returns>A <code>Task&lt;T&gt;</code> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.IRestOperations.ExecuteAsync``1(System.Uri,YSWL.OAuth.Http.HttpMethod,YSWL.OAuth.Rest.Client.IRequestCallback,YSWL.OAuth.Rest.Client.IResponseExtractor{``0},System.Threading.CancellationToken)">
            <summary>
            Asynchronously execute the HTTP method to the given URI template, preparing the request with the 
            <see cref="T:YSWL.OAuth.Rest.Client.IRequestCallback"/>, and reading the response with an <see cref="T:YSWL.OAuth.Rest.Client.IResponseExtractor`1"/>.
            </summary>
            <typeparam name="T">The type of the response value.</typeparam>
            <param name="url">The URL.</param>
            <param name="method">The HTTP method (GET, POST, etc.)</param>
            <param name="requestCallback">Object that prepares the request.</param>
            <param name="responseExtractor">Object that extracts the return value from the response.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that will be assigned to the task.</param>
            <returns>A <code>Task&lt;T&gt;</code> that represents the asynchronous operation.</returns>
        </member>
        <member name="T:YSWL.OAuth.Rest.Client.RestClientException">
            <summary>
            Base class for exceptions thrown by <see cref="T:YSWL.OAuth.Rest.Client.RestTemplate"/> whenever it encounters client-side HTTP errors.
            </summary>
            <author>Arjen Poutsma</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestClientException.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:YSWL.OAuth.Rest.Client.RestClientException"/> class.
            </summary>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestClientException.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:YSWL.OAuth.Rest.Client.RestClientException"/> class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestClientException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the <see cref="T:YSWL.OAuth.Rest.Client.RestClientException"/> class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="rootCause">
            The root exception that is being wrapped.
            </param>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestClientException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the <see cref="T:YSWL.OAuth.Rest.Client.RestClientException"/> class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="T:YSWL.OAuth.Rest.Client.RestOperationCanceler">
            <summary>
            Cancels a pending REST asynchronous operation.
            </summary>
        </member>
        <member name="P:YSWL.OAuth.Rest.Client.RestOperationCanceler.Method">
            <summary>
            Gets the HTTP method of the request.
            </summary>
        </member>
        <member name="P:YSWL.OAuth.Rest.Client.RestOperationCanceler.Uri">
            <summary>
            Gets the URI of the request.
            </summary>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestOperationCanceler.Cancel">
            <summary>
            Cancels a pending asynchronous operation.
            </summary>
        </member>
        <member name="T:YSWL.OAuth.Rest.Client.RestOperationCompletedEventArgs`1">
            <summary>
            Provides data when an asynchronous REST operation completes.
            </summary>
            <typeparam name="T">The type of the response value.</typeparam>
            <see cref="T:YSWL.OAuth.Rest.Client.IRestOperations"/>
            <see cref="T:YSWL.OAuth.Rest.Client.RestTemplate"/>
        </member>
        <member name="P:YSWL.OAuth.Rest.Client.RestOperationCompletedEventArgs`1.Response">
            <summary>
            Gest the response of the REST operation.
            </summary>
            <exception cref="T:System.InvalidOperationException">If the operation was canceled.</exception>
            <exception cref="T:System.Reflection.TargetInvocationException">If the operation failed.</exception>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestOperationCompletedEventArgs`1.#ctor(`0,System.Exception,System.Boolean,System.Object)">
            <summary>
            Creates a new instance of <see cref="T:YSWL.OAuth.Rest.Client.RestOperationCompletedEventArgs`1"/>.
            </summary>
            <param name="response">The response of the REST operation.</param>
            <param name="exception">Any error that occurred during the asynchronous operation.</param>
            <param name="cancelled">A value indicating whether the asynchronous operation was canceled.</param>
            <param name="userState">The optional user-supplied state object.</param>
        </member>
        <member name="T:YSWL.OAuth.Rest.Client.RestTemplate">
            <summary>
            The central class for client-side HTTP access. 
            It simplifies communication with HTTP servers, and enforces RESTful principles. 
            It handles HTTP connections, leaving application code to provide URLs (with possible template variables) and extract results.
            </summary>
            <remarks>
            <para>
            The main entry points of this template are the methods named after the six main HTTP methods: 
            <table>
                <tr><th>HTTP method</th><th>RestTemplate methods</th></tr>
                <tr><td>DELETE</td><td><see cref="M:Delete"/></td></tr>
                <tr><td>GET</td><td><see cref="M:GetForObject{T}"/></td></tr>
                <tr><td></td><td><see cref="M:GetForMessage{T}"/></td></tr>
                <tr><td>HEAD</td><td><see cref="M:HeadForHeaders"/></td></tr>
                <tr><td>OPTIONS</td><td><see cref="M:OptionsForAllow"/></td></tr>
                <tr><td>POST</td><td><see cref="M:PostForLocation"/></td></tr>
                <tr><td></td><td><see cref="M:PostForObject"/></td></tr>
                <tr><td></td><td><see cref="M:PostForMessage{T}"/></td></tr>
                <tr><td></td><td><see cref="M:PostForMessage"/></td></tr>
                <tr><td>PUT</td><td><see cref="M:Put"/></td></tr>
                <tr><td>Any</td><td><see cref="M:Exchange{T}"/></td></tr>
                <tr><td></td><td><see cref="M:Exchange"/></td></tr>
                <tr><td></td><td><see cref="M:Execute{T}"/></td></tr>
            </table>
            </para>
            <para>
            For each of these HTTP methods, there are three corresponding Java methods in the <see cref="T:YSWL.OAuth.Rest.Client.RestTemplate"/>. 
            Two variant take a string URI as first argument and are capable of substituting any URI templates in 
            that URL using either a string variable arguments array, or a string dictionary. 
            The string varargs variant expands the given template variables in order, so that 
            <code>
            string result = restTemplate.GetForObject&lt;string>("http://example.com/hotels/{hotel}/bookings/{booking}", 42, 21);
            </code>
            will perform a GET on 'http://example.com/hotels/42/bookings/21'. The map variant expands the template based on
            variable name, and is therefore more useful when using many variables, or when a single variable is used multiple
            times. For example:
            <code>
            IDictionary&lt;string, object&gt; vars = new Dictionary&lt;string, object&gt;();
            vars.Add("hotel", 42);
            string result = restTemplate.GetForObject&lt;string>("http://example.com/hotels/{hotel}/rooms/{hotel}", vars);
            </code>
            will perform a GET on 'http://example.com/hotels/42/rooms/42'. Alternatively, there are URI variant 
            methods, which do not allow for URI templates, but allow you to reuse a single, expanded URI multiple times.
            </para>
            <para>
            Furthermore, the string-argument methods assume that the URL String is unencoded. This means that
            <code>
            restTemplate.GetForObject&lt;string>("http://example.com/hotel list");
            </code>
            will perform a GET on 'http://example.com/hotel%20list'.
            </para>
            <para>
            Objects passed to and returned from these methods are converted to and from HTTP messages by 
            <see cref="T:YSWL.OAuth.Http.Converters.IHttpMessageConverter"/> instances. Converters for the main mime types are registered by default, 
            but you can also write your own converter and register it via the <see cref="P:MessageConverters"/> property.
            </para>
            <para>
            This template uses a <see cref="T:YSWL.OAuth.Http.Client.WebClientHttpRequestFactory"/> and a <see cref="T:YSWL.OAuth.Rest.Client.Support.DefaultResponseErrorHandler"/> 
            as default strategies for creating HTTP connections or handling HTTP errors, respectively. 
            These defaults can be overridden through the <see cref="P:RequestFactory"/> and <see cref="P:ErrorHandler"/> properties.
            </para>
            </remarks>
            <see cref="T:YSWL.OAuth.Http.Client.IClientHttpRequestFactory"/>
            <see cref="T:YSWL.OAuth.Rest.Client.IResponseErrorHandler"/>
            <see cref="T:YSWL.OAuth.Http.Converters.IHttpMessageConverter"/>
            <see cref="T:YSWL.OAuth.Rest.Client.IRequestCallback"/>
            <see cref="T:YSWL.OAuth.Rest.Client.IResponseExtractor`1"/>
            <author>Arjen Poutsma</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="P:YSWL.OAuth.Rest.Client.RestTemplate.BaseAddress">
            <summary>
            Gets or sets the base URL for the request.
            </summary>
        </member>
        <member name="P:YSWL.OAuth.Rest.Client.RestTemplate.MessageConverters">
            <summary>
            Gets or sets the message converters. 
            These converters are used to convert from and to HTTP request and response messages.
            </summary>
        </member>
        <member name="P:YSWL.OAuth.Rest.Client.RestTemplate.RequestFactory">
            <summary>
            Gets or sets the request factory that this class uses for obtaining for <see cref="T:YSWL.OAuth.Http.Client.IClientHttpRequest"/> objects.
            </summary>
            <remarks>
            Default value is <see cref="T:YSWL.OAuth.Http.Client.WebClientHttpRequestFactory"/>.
            </remarks>
        </member>
        <member name="P:YSWL.OAuth.Rest.Client.RestTemplate.ErrorHandler">
            <summary>
            Gets or sets the error handler.
            </summary>
            <remarks>
            Default value is <see cref="T:YSWL.OAuth.Rest.Client.Support.DefaultResponseErrorHandler"/>.
            </remarks>
        </member>
        <member name="P:YSWL.OAuth.Rest.Client.RestTemplate.RequestInterceptors">
            <summary>
            Gets or sets the request interceptors.
            </summary>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.#ctor(System.Uri)">
            <summary>
            Creates a new instance of <see cref="T:YSWL.OAuth.Rest.Client.RestTemplate"/>.
            </summary>
            <param name="baseAddress">The base address to use.</param>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:YSWL.OAuth.Rest.Client.RestTemplate"/>.
            </summary>
            <param name="baseAddress">The base address to use.</param>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.#ctor">
            <summary>
            Creates a new instance of <see cref="T:YSWL.OAuth.Rest.Client.RestTemplate"/>.
            </summary>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.GetForObject``1(System.String,System.Object[])">
            <summary>
            Retrieve a representation by doing a GET on the specified URL. 
            The response (if any) is converted and returned.
            </summary>
            <remarks>
            URI Template variables are expanded using the given URI variables, if any.
            </remarks>
            <typeparam name="T">The type of the response value.</typeparam>
            <param name="url">The URL.</param>
            <param name="uriVariables">The variables to expand the template.</param>
            <returns>The converted object</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.GetForObject``1(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Retrieve a representation by doing a GET on the specified URL. 
            The response (if any) is converted and returned.
            </summary>
            <remarks>
            URI Template variables are expanded using the given dictionary.
            </remarks>
            <typeparam name="T">The type of the response value.</typeparam>
            <param name="url">The URL.</param>
            <param name="uriVariables">The dictionary containing variables for the URI template.</param>
            <returns>The converted object</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.GetForObject``1(System.Uri)">
            <summary>
            Retrieve a representation by doing a GET on the specified URL. 
            The response (if any) is converted and returned.
            </summary>
            <typeparam name="T">The type of the response value.</typeparam>
            <param name="url">The URL.</param>
            <returns>The converted object</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.GetForMessage``1(System.String,System.Object[])">
            <summary>
            Retrieve an entity by doing a GET on the specified URL. 
            The response is converted and stored in an <see cref="T:YSWL.OAuth.Http.HttpResponseMessage`1"/>.
            </summary>
            <remarks>
            URI Template variables are expanded using the given URI variables, if any.
            </remarks>
            <typeparam name="T">The type of the response value.</typeparam>
            <param name="url">The URL.</param>
            <param name="uriVariables">The variables to expand the template.</param>
            <returns>The HTTP response message.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.GetForMessage``1(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Retrieve an entity by doing a GET on the specified URL. 
            The response is converted and stored in an <see cref="T:YSWL.OAuth.Http.HttpResponseMessage`1"/>.
            </summary>
            <remarks>
            URI Template variables are expanded using the given dictionary.
            </remarks>
            <typeparam name="T">The type of the response value.</typeparam>
            <param name="url">The URL.</param>
            <param name="uriVariables">The dictionary containing variables for the URI template.</param>
            <returns>The HTTP response message.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.GetForMessage``1(System.Uri)">
            <summary>
            Retrieve an entity by doing a GET on the specified URL. 
            The response is converted and stored in an <see cref="T:YSWL.OAuth.Http.HttpResponseMessage`1"/>.
            </summary>
            <typeparam name="T">The type of the response value.</typeparam>
            <param name="url">The URL.</param>
            <returns>The HTTP response message.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.HeadForHeaders(System.String,System.Object[])">
            <summary>
            Retrieve all headers of the resource specified by the URI template.
            </summary>
            <remarks>
            URI Template variables are expanded using the given URI variables, if any.
            </remarks>
            <param name="url">The URL.</param>
            <param name="uriVariables">The variables to expand the template.</param>
            <returns>All HTTP headers of that resource</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.HeadForHeaders(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Retrieve all headers of the resource specified by the URI template.
            </summary>
            <remarks>
            URI Template variables are expanded using the given dictionary.
            </remarks>
            <param name="url">The URL.</param>
            <param name="uriVariables">The dictionary containing variables for the URI template.</param>
            <returns>All HTTP headers of that resource</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.HeadForHeaders(System.Uri)">
            <summary>
            Retrieve all headers of the resource specified by the URI template.
            </summary>
            <param name="url">The URL.</param>
            <returns>All HTTP headers of that resource</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.PostForLocation(System.String,System.Object,System.Object[])">
            <summary>
            Create a new resource by POSTing the given object to the URI template, 
            and returns the value of the 'Location' header. 
            This header typically indicates where the new resource is stored.
            </summary>
            <remarks>
            <para>
            URI Template variables are expanded using the given URI variables, if any.
            </para>
            </remarks>
            <param name="url">The URL.</param>
            <param name="request">
            The object to be POSTed, may be a <see cref="T:YSWL.OAuth.Http.HttpEntity"/> in order to add additional HTTP headers.
            </param>
            <param name="uriVariables">The variables to expand the template.</param>
            <returns>The value for the Location header.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.PostForLocation(System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Create a new resource by POSTing the given object to the URI template, 
            and returns the value of the 'Location' header. 
            This header typically indicates where the new resource is stored.
            </summary>
            <remarks>
            <para>
            URI Template variables are expanded using the given dictionary.
            </para>
            </remarks>
            <param name="url">The URL.</param>
            <param name="request">
            The object to be POSTed, may be a <see cref="T:YSWL.OAuth.Http.HttpEntity"/> in order to add additional HTTP headers.
            </param>
            <param name="uriVariables">The dictionary containing variables for the URI template.</param>
            <returns>The value for the Location header.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.PostForLocation(System.Uri,System.Object)">
            <summary>
            Create a new resource by POSTing the given object to the URI template, 
            and returns the value of the 'Location' header. 
            This header typically indicates where the new resource is stored.
            </summary>
            <param name="url">The URL.</param>
            <param name="request">
            The object to be POSTed, may be a <see cref="T:YSWL.OAuth.Http.HttpEntity"/> in order to add additional HTTP headers.
            </param>
            <returns>The value for the Location header.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.PostForObject``1(System.String,System.Object,System.Object[])">
            <summary>
            Create a new resource by POSTing the given object to the URI template, 
            and returns the representation found in the response. 
            </summary>
            <remarks>
            <para>
            URI Template variables are expanded using the given URI variables, if any.
            </para>
            </remarks>
            <typeparam name="T">The type of the response value.</typeparam>
            <param name="url">The URL.</param>
            <param name="request">
            The object to be POSTed, may be a <see cref="T:YSWL.OAuth.Http.HttpEntity"/> in order to add additional HTTP headers.
            </param>
            <param name="uriVariables">The variables to expand the template.</param>
            <returns>The converted object.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.PostForObject``1(System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Create a new resource by POSTing the given object to the URI template, 
            and returns the representation found in the response. 
            </summary>
            <remarks>
            <para>
            URI Template variables are expanded using the given dictionary.
            </para>
            </remarks>
            <typeparam name="T">The type of the response value.</typeparam>
            <param name="url">The URL.</param>
            <param name="request">
            The object to be POSTed, may be a <see cref="T:YSWL.OAuth.Http.HttpEntity"/> in order to add additional HTTP headers.
            </param>
            <param name="uriVariables">The dictionary containing variables for the URI template.</param>
            <returns>The converted object.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.PostForObject``1(System.Uri,System.Object)">
            <summary>
            Create a new resource by POSTing the given object to the URI template, 
            and returns the representation found in the response. 
            </summary>
            <typeparam name="T">The type of the response value.</typeparam>
            <param name="url">The URL.</param>
            <param name="request">
            The object to be POSTed, may be a <see cref="T:YSWL.OAuth.Http.HttpEntity"/> in order to add additional HTTP headers.
            </param>
            <returns>The converted object.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.PostForMessage``1(System.String,System.Object,System.Object[])">
            <summary>
            Create a new resource by POSTing the given object to the URI template, 
            and returns the response as <see cref="T:YSWL.OAuth.Http.HttpResponseMessage`1"/>. 
            </summary>
            <remarks>
            <para>
            URI Template variables are expanded using the given URI variables, if any.
            </para>
            </remarks>
            <typeparam name="T">The type of the response value.</typeparam>
            <param name="url">The URL.</param>
            <param name="request">
            The object to be POSTed, may be a <see cref="T:YSWL.OAuth.Http.HttpEntity"/> in order to add additional HTTP headers.
            </param>
            <param name="uriVariables">The variables to expand the template.</param>
            <returns>The HTTP response message.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.PostForMessage``1(System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Create a new resource by POSTing the given object to the URI template, 
            and returns the response as <see cref="T:YSWL.OAuth.Http.HttpResponseMessage`1"/>. 
            </summary>
            <remarks>
            <para>
            URI Template variables are expanded using the given dictionary.
            </para>
            </remarks>
            <typeparam name="T">The type of the response value.</typeparam>
            <param name="url">The URL.</param>
            <param name="request">
            The object to be POSTed, may be a <see cref="T:YSWL.OAuth.Http.HttpEntity"/> in order to add additional HTTP headers.
            </param>
            <param name="uriVariables">The dictionary containing variables for the URI template.</param>
            <returns>The HTTP response message.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.PostForMessage``1(System.Uri,System.Object)">
            <summary>
            Create a new resource by POSTing the given object to the URI template, 
            and returns the response as <see cref="T:YSWL.OAuth.Http.HttpResponseMessage`1"/>. 
            </summary>
            <typeparam name="T">The type of the response value.</typeparam>
            <param name="url">The URL.</param>
            <param name="request">
            The object to be POSTed, may be a <see cref="T:YSWL.OAuth.Http.HttpEntity"/> in order to add additional HTTP headers.
            </param>
            <returns>The HTTP response message.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.PostForMessage(System.String,System.Object,System.Object[])">
            <summary>
            Create a new resource by POSTing the given object to the URI template, 
            and returns the response with no entity as <see cref="T:YSWL.OAuth.Http.HttpResponseMessage"/>. 
            </summary>
            <remarks>
            <para>
            URI Template variables are expanded using the given URI variables, if any.
            </para>
            </remarks>
            <param name="url">The URL.</param>
            <param name="request">
            The object to be POSTed, may be a <see cref="T:YSWL.OAuth.Http.HttpEntity"/> in order to add additional HTTP headers.
            </param>
            <param name="uriVariables">The variables to expand the template.</param>
            <returns>The HTTP response message with no entity.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.PostForMessage(System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Create a new resource by POSTing the given object to the URI template, 
            and returns the response with no entity as <see cref="T:YSWL.OAuth.Http.HttpResponseMessage"/>. 
            </summary>
            <remarks>
            <para>
            URI Template variables are expanded using the given dictionary.
            </para>
            </remarks>
            <param name="url">The URL.</param>
            <param name="request">
            The object to be POSTed, may be a <see cref="T:YSWL.OAuth.Http.HttpEntity"/> in order to add additional HTTP headers.
            </param>
            <param name="uriVariables">The dictionary containing variables for the URI template.</param>
            <returns>The HTTP response message with no entity.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.PostForMessage(System.Uri,System.Object)">
            <summary>
            Create a new resource by POSTing the given object to the URI template, 
            and returns the response with no entity as <see cref="T:YSWL.OAuth.Http.HttpResponseMessage"/>. 
            </summary>
            <param name="url">The URL.</param>
            <param name="request">
            The object to be POSTed, may be a <see cref="T:YSWL.OAuth.Http.HttpEntity"/> in order to add additional HTTP headers.
            </param>
            <returns>The HTTP response message with no entity.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.Put(System.String,System.Object,System.Object[])">
            <summary>
            Create or update a resource by PUTting the given object to the URI.
            </summary>
            <remarks>
            <para>
            URI Template variables are expanded using the given URI variables, if any.
            </para>
            </remarks>
            <param name="url">The URL.</param>
            <param name="request">
            The object to be POSTed, may be a <see cref="T:YSWL.OAuth.Http.HttpEntity"/> in order to add additional HTTP headers.
            </param>
            <param name="uriVariables">The variables to expand the template.</param>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.Put(System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Create or update a resource by PUTting the given object to the URI.
            </summary>
            <remarks>
            <para>
            URI Template variables are expanded using the given dictionary.
            </para>
            </remarks>
            <param name="url">The URL.</param>
            <param name="request">
            The object to be POSTed, may be a <see cref="T:YSWL.OAuth.Http.HttpEntity"/> in order to add additional HTTP headers.
            </param>
            <param name="uriVariables">The dictionary containing variables for the URI template.</param>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.Put(System.Uri,System.Object)">
            <summary>
            Create or update a resource by PUTting the given object to the URI.
            </summary>
            <param name="url">The URL.</param>
            <param name="request">
            The object to be POSTed, may be a <see cref="T:YSWL.OAuth.Http.HttpEntity"/> in order to add additional HTTP headers.
            </param>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.Delete(System.String,System.Object[])">
            <summary>
            Delete the resources at the specified URI.
            </summary>
            <remarks>
            URI Template variables are expanded using the given URI variables, if any.
            </remarks>
            <param name="url">The URL.</param>
            <param name="uriVariables">The variables to expand the template.</param>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.Delete(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Delete the resources at the specified URI.
            </summary>
            <remarks>
            URI Template variables are expanded using the given dictionary.
            </remarks>
            <param name="url">The URL.</param>
            <param name="uriVariables">The dictionary containing variables for the URI template.</param>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.Delete(System.Uri)">
            <summary>
            Delete the resources at the specified URI.
            </summary>
            <param name="url">The URL.</param>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.OptionsForAllow(System.String,System.Object[])">
            <summary>
            Return the value of the Allow header for the given URI.
            </summary>
            <remarks>
            URI Template variables are expanded using the given URI variables, if any.
            </remarks>
            <param name="url">The URL.</param>
            <param name="uriVariables">The variables to expand the template.</param>
            <returns>The value of the allow header.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.OptionsForAllow(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Return the value of the Allow header for the given URI.
            </summary>
            <remarks>
            URI Template variables are expanded using the given dictionary.
            </remarks>
            <param name="url">The URL.</param>
            <param name="uriVariables">The dictionary containing variables for the URI template.</param>
            <returns>The value of the allow header.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.OptionsForAllow(System.Uri)">
            <summary>
            Return the value of the Allow header for the given URI.
            </summary>
            <param name="url">The URL.</param>
            <returns>The value of the allow header.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.Exchange``1(System.String,YSWL.OAuth.Http.HttpMethod,YSWL.OAuth.Http.HttpEntity,System.Object[])">
            <summary>
            Execute the HTTP method to the given URI template, writing the given request message to the request, 
            and returns the response as <see cref="T:YSWL.OAuth.Http.HttpResponseMessage`1"/>.
            </summary>
            <remarks>
            URI Template variables are expanded using the given URI variables, if any.
            </remarks>
            <typeparam name="T">The type of the response value.</typeparam>
            <param name="url">The URL.</param>
            <param name="method">The HTTP method (GET, POST, etc.)</param>
            <param name="requestEntity">
            The HTTP entity (headers and/or body) to write to the request, may be <see langword="null"/>.
            </param>
            <param name="uriVariables">The variables to expand the template.</param>
            <returns>The HTTP response message.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.Exchange``1(System.String,YSWL.OAuth.Http.HttpMethod,YSWL.OAuth.Http.HttpEntity,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Execute the HTTP method to the given URI template, writing the given request message to the request, 
            and returns the response as <see cref="T:YSWL.OAuth.Http.HttpResponseMessage`1"/>.
            </summary>
            <remarks>
            URI Template variables are expanded using the given dictionary.
            </remarks>
            <typeparam name="T">The type of the response value.</typeparam>
            <param name="url">The URL.</param>
            <param name="method">The HTTP method (GET, POST, etc.)</param>
            <param name="requestEntity">
            The HTTP entity (headers and/or body) to write to the request, may be <see langword="null"/>.
            </param>
            <param name="uriVariables">The dictionary containing variables for the URI template.</param>
            <returns>The HTTP response message.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.Exchange``1(System.Uri,YSWL.OAuth.Http.HttpMethod,YSWL.OAuth.Http.HttpEntity)">
            <summary>
            Execute the HTTP method to the given URI template, writing the given request message to the request, 
            and returns the response as <see cref="T:YSWL.OAuth.Http.HttpResponseMessage`1"/>.
            </summary>
            <typeparam name="T">The type of the response value.</typeparam>
            <param name="url">The URL.</param>
            <param name="method">The HTTP method (GET, POST, etc.)</param>
            <param name="requestEntity">
            The HTTP entity (headers and/or body) to write to the request, may be <see langword="null"/>.
            </param>
            <returns>The HTTP response message.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.Exchange(System.String,YSWL.OAuth.Http.HttpMethod,YSWL.OAuth.Http.HttpEntity,System.Object[])">
            <summary>
            Execute the HTTP method to the given URI template, writing the given request message to the request, 
            and returns the response with no entity as <see cref="T:YSWL.OAuth.Http.HttpResponseMessage"/>.
            </summary>
            <remarks>
            URI Template variables are expanded using the given URI variables, if any.
            </remarks>
            <param name="url">The URL.</param>
            <param name="method">The HTTP method (GET, POST, etc.)</param>
            <param name="requestEntity">
            The HTTP entity (headers and/or body) to write to the request, may be <see langword="null"/>.
            </param>
            <param name="uriVariables">The variables to expand the template.</param>
            <returns>The HTTP response message with no entity.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.Exchange(System.String,YSWL.OAuth.Http.HttpMethod,YSWL.OAuth.Http.HttpEntity,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Execute the HTTP method to the given URI template, writing the given request message to the request, 
            and returns the response with no entity as <see cref="T:YSWL.OAuth.Http.HttpResponseMessage"/>.
            </summary>
            <remarks>
            URI Template variables are expanded using the given dictionary.
            </remarks>
            <param name="url">The URL.</param>
            <param name="method">The HTTP method (GET, POST, etc.)</param>
            <param name="requestEntity">
            The HTTP entity (headers and/or body) to write to the request, may be <see langword="null"/>.
            </param>
            <param name="uriVariables">The dictionary containing variables for the URI template.</param>
            <returns>The HTTP response message with no entity.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.Exchange(System.Uri,YSWL.OAuth.Http.HttpMethod,YSWL.OAuth.Http.HttpEntity)">
            <summary>
            Execute the HTTP method to the given URI template, writing the given request message to the request, 
            and returns the response with no entity as <see cref="T:YSWL.OAuth.Http.HttpResponseMessage"/>.
            </summary>
            <param name="url">The URL.</param>
            <param name="method">The HTTP method (GET, POST, etc.)</param>
            <param name="requestEntity">
            The HTTP entity (headers and/or body) to write to the request, may be <see langword="null"/>.
            </param>
            <returns>The HTTP response message with no entity.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.Execute``1(System.String,YSWL.OAuth.Http.HttpMethod,YSWL.OAuth.Rest.Client.IRequestCallback,YSWL.OAuth.Rest.Client.IResponseExtractor{``0},System.Object[])">
            <summary>
            Execute the HTTP request to the given URI template, preparing the request with the 
            <see cref="T:YSWL.OAuth.Rest.Client.IRequestCallback"/>, and reading the response with an <see cref="T:YSWL.OAuth.Rest.Client.IResponseExtractor`1"/>.
            </summary>
            <remarks>
            URI Template variables are expanded using the given URI variables, if any.
            </remarks>
            <typeparam name="T">The type of the response value.</typeparam>
            <param name="url">The URL.</param>
            <param name="method">The HTTP method (GET, POST, etc.)</param>
            <param name="requestCallback">Object that prepares the request.</param>
            <param name="responseExtractor">Object that extracts the return value from the response.</param>
            <param name="uriVariables">The variables to expand the template.</param>
            <returns>An arbitrary object, as returned by the <see cref="T:YSWL.OAuth.Rest.Client.IResponseExtractor`1"/>.</returns>        
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.Execute``1(System.String,YSWL.OAuth.Http.HttpMethod,YSWL.OAuth.Rest.Client.IRequestCallback,YSWL.OAuth.Rest.Client.IResponseExtractor{``0},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Execute the HTTP request to the given URI template, preparing the request with the 
            <see cref="T:YSWL.OAuth.Rest.Client.IRequestCallback"/>, and reading the response with an <see cref="T:YSWL.OAuth.Rest.Client.IResponseExtractor`1"/>.
            </summary>
            <remarks>
            URI Template variables are expanded using the given dictionary.
            </remarks>
            <typeparam name="T">The type of the response value.</typeparam>
            <param name="url">The URL.</param>
            <param name="method">The HTTP method (GET, POST, etc.)</param>
            <param name="requestCallback">Object that prepares the request.</param>
            <param name="responseExtractor">Object that extracts the return value from the response.</param>
            <param name="uriVariables">The dictionary containing variables for the URI template.</param>
            <returns>An arbitrary object, as returned by the <see cref="T:YSWL.OAuth.Rest.Client.IResponseExtractor`1"/>.</returns>   
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.Execute``1(System.Uri,YSWL.OAuth.Http.HttpMethod,YSWL.OAuth.Rest.Client.IRequestCallback,YSWL.OAuth.Rest.Client.IResponseExtractor{``0})">
            <summary>
            Execute the HTTP request to the given URI template, preparing the request with the 
            <see cref="T:YSWL.OAuth.Rest.Client.IRequestCallback"/>, and reading the response with an <see cref="T:YSWL.OAuth.Rest.Client.IResponseExtractor`1"/>.
            </summary>
            <typeparam name="T">The type of the response value.</typeparam>
            <param name="url">The URL.</param>
            <param name="method">The HTTP method (GET, POST, etc.)</param>
            <param name="requestCallback">Object that prepares the request.</param>
            <param name="responseExtractor">Object that extracts the return value from the response.</param>
            <returns>An arbitrary object, as returned by the <see cref="T:YSWL.OAuth.Rest.Client.IResponseExtractor`1"/>.</returns>   
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.GetForObjectAsync``1(System.String,System.Action{YSWL.OAuth.Rest.Client.RestOperationCompletedEventArgs{``0}},System.Object[])">
            <summary>
            Asynchronously retrieve a representation by doing a GET on the specified URL. 
            The response (if any) is converted.
            </summary>
            <remarks>
            URI Template variables are expanded using the given URI variables, if any.
            </remarks>
            <typeparam name="T">The type of the response value.</typeparam>
            <param name="url">The URL.</param>
            <param name="getCompleted">
            The <code>Action&lt;T&gt;</code> to perform when the asynchronous GET method completes.
            </param>
            <param name="uriVariables">The variables to expand the template.</param>
            <returns>
            A <see cref="T:YSWL.OAuth.Rest.Client.RestOperationCanceler"/> instance that allows to cancel the asynchronous operation.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.GetForObjectAsync``1(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Action{YSWL.OAuth.Rest.Client.RestOperationCompletedEventArgs{``0}})">
            <summary>
            Asynchronously retrieve a representation by doing a GET on the specified URL. 
            The response (if any) is converted.
            </summary>
            <remarks>
            URI Template variables are expanded using the given dictionary.
            </remarks>
            <typeparam name="T">The type of the response value.</typeparam>
            <param name="url">The URL.</param>
            <param name="uriVariables">The dictionary containing variables for the URI template.</param>
            <param name="getCompleted">
            The <code>Action&lt;T&gt;</code> to perform when the asynchronous GET method completes.
            </param>
            <returns>
            A <see cref="T:YSWL.OAuth.Rest.Client.RestOperationCanceler"/> instance that allows to cancel the asynchronous operation.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.GetForObjectAsync``1(System.Uri,System.Action{YSWL.OAuth.Rest.Client.RestOperationCompletedEventArgs{``0}})">
            <summary>
            Asynchronously retrieve a representation by doing a GET on the specified URL. 
            The response (if any) is converted.
            </summary>
            <typeparam name="T">The type of the response value.</typeparam>
            <param name="url">The URL.</param>
            <param name="getCompleted">
            The <code>Action&lt;T&gt;</code> to perform when the asynchronous GET method completes.
            </param>
            <returns>
            A <see cref="T:YSWL.OAuth.Rest.Client.RestOperationCanceler"/> instance that allows to cancel the asynchronous operation.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.GetForMessageAsync``1(System.String,System.Action{YSWL.OAuth.Rest.Client.RestOperationCompletedEventArgs{YSWL.OAuth.Http.HttpResponseMessage{``0}}},System.Object[])">
            <summary>
            Asynchronously retrieve an entity by doing a GET on the specified URL. 
            The response is converted and stored in an <see cref="T:YSWL.OAuth.Http.HttpResponseMessage`1"/>.
            </summary>
            <remarks>
            URI Template variables are expanded using the given URI variables, if any.
            </remarks>
            <typeparam name="T">The type of the response value.</typeparam>
            <param name="url">The URL.</param>
            <param name="getCompleted">
            The <code>Action&lt;T&gt;</code> to perform when the asynchronous GET method completes.
            </param>
            <param name="uriVariables">The variables to expand the template.</param>
            <returns>
            A <see cref="T:YSWL.OAuth.Rest.Client.RestOperationCanceler"/> instance that allows to cancel the asynchronous operation.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.GetForMessageAsync``1(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Action{YSWL.OAuth.Rest.Client.RestOperationCompletedEventArgs{YSWL.OAuth.Http.HttpResponseMessage{``0}}})">
            <summary>
            Asynchronously retrieve an entity by doing a GET on the specified URL. 
            The response is converted and stored in an <see cref="T:YSWL.OAuth.Http.HttpResponseMessage`1"/>.
            </summary>
            <remarks>
            URI Template variables are expanded using the given dictionary.
            </remarks>
            <typeparam name="T">The type of the response value.</typeparam>
            <param name="url">The URL.</param>
            <param name="uriVariables">The dictionary containing variables for the URI template.</param>
            <param name="getCompleted">
            The <code>Action&lt;T&gt;</code> to perform when the asynchronous GET method completes.
            </param>
            <returns>
            A <see cref="T:YSWL.OAuth.Rest.Client.RestOperationCanceler"/> instance that allows to cancel the asynchronous operation.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.GetForMessageAsync``1(System.Uri,System.Action{YSWL.OAuth.Rest.Client.RestOperationCompletedEventArgs{YSWL.OAuth.Http.HttpResponseMessage{``0}}})">
            <summary>
            Asynchronously retrieve an entity by doing a GET on the specified URL. 
            The response is converted and stored in an <see cref="T:YSWL.OAuth.Http.HttpResponseMessage`1"/>.
            </summary>
            <typeparam name="T">The type of the response value.</typeparam>
            <param name="url">The URL.</param>
            <param name="getCompleted">
            The <code>Action&lt;T&gt;</code> to perform when the asynchronous GET method completes.
            </param>
            <returns>
            A <see cref="T:YSWL.OAuth.Rest.Client.RestOperationCanceler"/> instance that allows to cancel the asynchronous operation.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.HeadForHeadersAsync(System.String,System.Action{YSWL.OAuth.Rest.Client.RestOperationCompletedEventArgs{YSWL.OAuth.Http.HttpHeaders}},System.Object[])">
            <summary>
            Asynchronously retrieve all headers of the resource specified by the URI template.
            </summary>
            <remarks>
            URI Template variables are expanded using the given URI variables, if any.
            </remarks>
            <param name="url">The URL.</param>
            <param name="headCompleted">
            The <code>Action&lt;T&gt;</code> to perform when the asynchronous HEAD method completes.
            </param>
            <param name="uriVariables">The variables to expand the template.</param>
            <returns>
            A <see cref="T:YSWL.OAuth.Rest.Client.RestOperationCanceler"/> instance that allows to cancel the asynchronous operation.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.HeadForHeadersAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Action{YSWL.OAuth.Rest.Client.RestOperationCompletedEventArgs{YSWL.OAuth.Http.HttpHeaders}})">
            <summary>
            Asynchronously retrieve all headers of the resource specified by the URI template.
            </summary>
            <remarks>
            URI Template variables are expanded using the given dictionary.
            </remarks>
            <param name="url">The URL.</param>
            <param name="uriVariables">The dictionary containing variables for the URI template.</param>
            <param name="headCompleted">
            The <code>Action&lt;T&gt;</code> to perform when the asynchronous HEAD method completes.
            </param>
            <returns>
            A <see cref="T:YSWL.OAuth.Rest.Client.RestOperationCanceler"/> instance that allows to cancel the asynchronous operation.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.HeadForHeadersAsync(System.Uri,System.Action{YSWL.OAuth.Rest.Client.RestOperationCompletedEventArgs{YSWL.OAuth.Http.HttpHeaders}})">
            <summary>
            Asynchronously retrieve all headers of the resource specified by the URI template.
            </summary>
            <param name="url">The URL.</param>
            <param name="headCompleted">
            The <code>Action&lt;T&gt;</code> to perform when the asynchronous HEAD method completes.
            </param>
            <returns>
            A <see cref="T:YSWL.OAuth.Rest.Client.RestOperationCanceler"/> instance that allows to cancel the asynchronous operation.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.PostForLocationAsync(System.String,System.Object,System.Action{YSWL.OAuth.Rest.Client.RestOperationCompletedEventArgs{System.Uri}},System.Object[])">
            <summary>
            Asynchronously create a new resource by POSTing the given object to the URI template, 
            and returns the value of the 'Location' header. 
            This header typically indicates where the new resource is stored.
            </summary>
            <remarks>
            <para>
            URI Template variables are expanded using the given URI variables, if any.
            </para>
            </remarks>
            <param name="url">The URL.</param>
            <param name="request">
            The object to be POSTed, may be a <see cref="T:YSWL.OAuth.Http.HttpEntity"/> in order to add additional HTTP headers.
            </param>
            <param name="postCompleted">
            The <code>Action&lt;T&gt;</code> to perform when the asynchronous POST method completes.
            </param>
            <param name="uriVariables">The variables to expand the template.</param>
            <returns>
            A <see cref="T:YSWL.OAuth.Rest.Client.RestOperationCanceler"/> instance that allows to cancel the asynchronous operation.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.PostForLocationAsync(System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Action{YSWL.OAuth.Rest.Client.RestOperationCompletedEventArgs{System.Uri}})">
            <summary>
            Asynchronously create a new resource by POSTing the given object to the URI template, 
            and returns the value of the 'Location' header. 
            This header typically indicates where the new resource is stored.
            </summary>
            <remarks>
            <para>
            URI Template variables are expanded using the given dictionary.
            </para>
            </remarks>
            <param name="url">The URL.</param>
            <param name="request">
            The object to be POSTed, may be a <see cref="T:YSWL.OAuth.Http.HttpEntity"/> in order to add additional HTTP headers.
            </param>
            <param name="uriVariables">The dictionary containing variables for the URI template.</param>
            <param name="postCompleted">
            The <code>Action&lt;T&gt;</code> to perform when the asynchronous POST method completes.
            </param>
            <returns>
            A <see cref="T:YSWL.OAuth.Rest.Client.RestOperationCanceler"/> instance that allows to cancel the asynchronous operation.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.PostForLocationAsync(System.Uri,System.Object,System.Action{YSWL.OAuth.Rest.Client.RestOperationCompletedEventArgs{System.Uri}})">
            <summary>
            Asynchronously create a new resource by POSTing the given object to the URI template, 
            and returns the value of the 'Location' header. 
            This header typically indicates where the new resource is stored.
            </summary>
            <param name="url">The URL.</param>
            <param name="request">
            The object to be POSTed, may be a <see cref="T:YSWL.OAuth.Http.HttpEntity"/> in order to add additional HTTP headers.
            </param>
            <param name="postCompleted">
            The <code>Action&lt;T&gt;</code> to perform when the asynchronous POST method completes.
            </param>
            <returns>
            A <see cref="T:YSWL.OAuth.Rest.Client.RestOperationCanceler"/> instance that allows to cancel the asynchronous operation.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.PostForObjectAsync``1(System.String,System.Object,System.Action{YSWL.OAuth.Rest.Client.RestOperationCompletedEventArgs{``0}},System.Object[])">
            <summary>
            Asynchronously create a new resource by POSTing the given object to the URI template, 
            and returns the representation found in the response. 
            </summary>
            <remarks>
            <para>
            URI Template variables are expanded using the given URI variables, if any.
            </para>
            </remarks>
            <typeparam name="T">The type of the response value.</typeparam>
            <param name="url">The URL.</param>
            <param name="request">
            The object to be POSTed, may be a <see cref="T:YSWL.OAuth.Http.HttpEntity"/> in order to add additional HTTP headers.
            </param>
            <param name="postCompleted">
            The <code>Action&lt;T&gt;</code> to perform when the asynchronous POST method completes.
            </param>
            <param name="uriVariables">The variables to expand the template.</param>
            <returns>
            A <see cref="T:YSWL.OAuth.Rest.Client.RestOperationCanceler"/> instance that allows to cancel the asynchronous operation.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.PostForObjectAsync``1(System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Action{YSWL.OAuth.Rest.Client.RestOperationCompletedEventArgs{``0}})">
            <summary>
            Asynchronously create a new resource by POSTing the given object to the URI template, 
            and returns the representation found in the response. 
            </summary>
            <remarks>
            <para>
            URI Template variables are expanded using the given dictionary.
            </para>
            </remarks>
            <typeparam name="T">The type of the response value.</typeparam>
            <param name="url">The URL.</param>
            <param name="request">
            The object to be POSTed, may be a <see cref="T:YSWL.OAuth.Http.HttpEntity"/> in order to add additional HTTP headers.
            </param>
            <param name="uriVariables">The dictionary containing variables for the URI template.</param>
            <param name="postCompleted">
            The <code>Action&lt;T&gt;</code> to perform when the asynchronous POST method completes.
            </param>
            <returns>
            A <see cref="T:YSWL.OAuth.Rest.Client.RestOperationCanceler"/> instance that allows to cancel the asynchronous operation.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.PostForObjectAsync``1(System.Uri,System.Object,System.Action{YSWL.OAuth.Rest.Client.RestOperationCompletedEventArgs{``0}})">
            <summary>
            Asynchronously create a new resource by POSTing the given object to the URI template, 
            and returns the representation found in the response. 
            </summary>
            <typeparam name="T">The type of the response value.</typeparam>
            <param name="url">The URL.</param>
            <param name="request">
            The object to be POSTed, may be a <see cref="T:YSWL.OAuth.Http.HttpEntity"/> in order to add additional HTTP headers.
            </param>
            <param name="postCompleted">
            The <code>Action&lt;T&gt;</code> to perform when the asynchronous POST method completes.
            </param>
            <returns>
            A <see cref="T:YSWL.OAuth.Rest.Client.RestOperationCanceler"/> instance that allows to cancel the asynchronous operation.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.PostForMessageAsync``1(System.String,System.Object,System.Action{YSWL.OAuth.Rest.Client.RestOperationCompletedEventArgs{YSWL.OAuth.Http.HttpResponseMessage{``0}}},System.Object[])">
            <summary>
            Asynchronously create a new resource by POSTing the given object to the URI template, 
            and returns the response as <see cref="T:YSWL.OAuth.Http.HttpResponseMessage`1"/>. 
            </summary>
            <remarks>
            <para>
            URI Template variables are expanded using the given URI variables, if any.
            </para>
            </remarks>
            <typeparam name="T">The type of the response value.</typeparam>
            <param name="url">The URL.</param>
            <param name="request">
            The object to be POSTed, may be a <see cref="T:YSWL.OAuth.Http.HttpEntity"/> in order to add additional HTTP headers.
            </param>
            <param name="postCompleted">
            The <code>Action&lt;T&gt;</code> to perform when the asynchronous POST method completes.
            </param>
            <param name="uriVariables">The variables to expand the template.</param>
            <returns>
            A <see cref="T:YSWL.OAuth.Rest.Client.RestOperationCanceler"/> instance that allows to cancel the asynchronous operation.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.PostForMessageAsync``1(System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Action{YSWL.OAuth.Rest.Client.RestOperationCompletedEventArgs{YSWL.OAuth.Http.HttpResponseMessage{``0}}})">
            <summary>
            Asynchronously create a new resource by POSTing the given object to the URI template, 
            and returns the response as <see cref="T:YSWL.OAuth.Http.HttpResponseMessage`1"/>. 
            </summary>
            <remarks>
            <para>
            URI Template variables are expanded using the given dictionary.
            </para>
            </remarks>
            <typeparam name="T">The type of the response value.</typeparam>
            <param name="url">The URL.</param>
            <param name="request">
            The object to be POSTed, may be a <see cref="T:YSWL.OAuth.Http.HttpEntity"/> in order to add additional HTTP headers.
            </param>
            <param name="uriVariables">The dictionary containing variables for the URI template.</param>
            <param name="postCompleted">
            The <code>Action&lt;T&gt;</code> to perform when the asynchronous POST method completes.
            </param>
            <returns>
            A <see cref="T:YSWL.OAuth.Rest.Client.RestOperationCanceler"/> instance that allows to cancel the asynchronous operation.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.PostForMessageAsync``1(System.Uri,System.Object,System.Action{YSWL.OAuth.Rest.Client.RestOperationCompletedEventArgs{YSWL.OAuth.Http.HttpResponseMessage{``0}}})">
            <summary>
            Asynchronously create a new resource by POSTing the given object to the URI template, 
            and returns the response as <see cref="T:YSWL.OAuth.Http.HttpResponseMessage`1"/>. 
            </summary>
            <typeparam name="T">The type of the response value.</typeparam>
            <param name="url">The URL.</param>
            <param name="request">
            The object to be POSTed, may be a <see cref="T:YSWL.OAuth.Http.HttpEntity"/> in order to add additional HTTP headers.
            </param>
            <param name="postCompleted">
            The <code>Action&lt;T&gt;</code> to perform when the asynchronous POST method completes.
            </param>
            <returns>
            A <see cref="T:YSWL.OAuth.Rest.Client.RestOperationCanceler"/> instance that allows to cancel the asynchronous operation.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.PostForMessageAsync(System.String,System.Object,System.Action{YSWL.OAuth.Rest.Client.RestOperationCompletedEventArgs{YSWL.OAuth.Http.HttpResponseMessage}},System.Object[])">
            <summary>
            Asynchronously create a new resource by POSTing the given object to the URI template, 
            and returns the response with no entity as <see cref="T:YSWL.OAuth.Http.HttpResponseMessage"/>. 
            </summary>
            <remarks>
            <para>
            URI Template variables are expanded using the given URI variables, if any.
            </para>
            </remarks>
            <param name="url">The URL.</param>
            <param name="request">
            The object to be POSTed, may be a <see cref="T:YSWL.OAuth.Http.HttpEntity"/> in order to add additional HTTP headers.
            </param>
            <param name="postCompleted">
            The <code>Action&lt;T&gt;</code> to perform when the asynchronous POST method completes.
            </param>
            <param name="uriVariables">The variables to expand the template.</param>
            <returns>
            A <see cref="T:YSWL.OAuth.Rest.Client.RestOperationCanceler"/> instance that allows to cancel the asynchronous operation.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.PostForMessageAsync(System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Action{YSWL.OAuth.Rest.Client.RestOperationCompletedEventArgs{YSWL.OAuth.Http.HttpResponseMessage}})">
            <summary>
            Asynchronously create a new resource by POSTing the given object to the URI template, 
            and returns the response with no entity as <see cref="T:YSWL.OAuth.Http.HttpResponseMessage"/>. 
            </summary>
            <remarks>
            <para>
            URI Template variables are expanded using the given dictionary.
            </para>
            </remarks>
            <param name="url">The URL.</param>
            <param name="request">
            The object to be POSTed, may be a <see cref="T:YSWL.OAuth.Http.HttpEntity"/> in order to add additional HTTP headers.
            </param>
            <param name="uriVariables">The dictionary containing variables for the URI template.</param>
            <param name="postCompleted">
            The <code>Action&lt;T&gt;</code> to perform when the asynchronous POST method completes.
            </param>
            <returns>
            A <see cref="T:YSWL.OAuth.Rest.Client.RestOperationCanceler"/> instance that allows to cancel the asynchronous operation.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.PostForMessageAsync(System.Uri,System.Object,System.Action{YSWL.OAuth.Rest.Client.RestOperationCompletedEventArgs{YSWL.OAuth.Http.HttpResponseMessage}})">
            <summary>
            Asynchronously create a new resource by POSTing the given object to the URI template, 
            and returns the response with no entity as <see cref="T:YSWL.OAuth.Http.HttpResponseMessage"/>. 
            </summary>
            <param name="url">The URL.</param>
            <param name="request">
            The object to be POSTed, may be a <see cref="T:YSWL.OAuth.Http.HttpEntity"/> in order to add additional HTTP headers.
            </param>
            <param name="postCompleted">
            The <code>Action&lt;T&gt;</code> to perform when the asynchronous POST method completes.
            </param>
            <returns>
            A <see cref="T:YSWL.OAuth.Rest.Client.RestOperationCanceler"/> instance that allows to cancel the asynchronous operation.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.PutAsync(System.String,System.Object,System.Action{YSWL.OAuth.Rest.Client.RestOperationCompletedEventArgs{System.Object}},System.Object[])">
            <summary>
            Asynchronously create or update a resource by PUTting the given object to the URI.
            </summary>
            <remarks>
            <para>
            URI Template variables are expanded using the given URI variables, if any.
            </para>
            </remarks>
            <param name="url">The URL.</param>
            <param name="request">
            The object to be POSTed, may be a <see cref="T:YSWL.OAuth.Http.HttpEntity"/> in order to add additional HTTP headers.
            </param>
            <param name="putCompleted">
            The <code>Action&lt;T&gt;</code> to perform when the asynchronous PUT method completes.
            </param>
            <param name="uriVariables">The variables to expand the template.</param>
            <returns>
            A <see cref="T:YSWL.OAuth.Rest.Client.RestOperationCanceler"/> instance that allows to cancel the asynchronous operation.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.PutAsync(System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Action{YSWL.OAuth.Rest.Client.RestOperationCompletedEventArgs{System.Object}})">
            <summary>
            Asynchronously create or update a resource by PUTting the given object to the URI.
            </summary>
            <remarks>
            <para>
            URI Template variables are expanded using the given dictionary.
            </para>
            </remarks>
            <param name="url">The URL.</param>
            <param name="request">
            The object to be POSTed, may be a <see cref="T:YSWL.OAuth.Http.HttpEntity"/> in order to add additional HTTP headers.
            </param>
            <param name="uriVariables">The dictionary containing variables for the URI template.</param>
            <param name="putCompleted">
            The <code>Action&lt;T&gt;</code> to perform when the asynchronous PUT method completes.
            </param>
            <returns>
            A <see cref="T:YSWL.OAuth.Rest.Client.RestOperationCanceler"/> instance that allows to cancel the asynchronous operation.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.PutAsync(System.Uri,System.Object,System.Action{YSWL.OAuth.Rest.Client.RestOperationCompletedEventArgs{System.Object}})">
            <summary>
            Asynchronously create or update a resource by PUTting the given object to the URI.
            </summary>
            <param name="url">The URL.</param>
            <param name="request">
            The object to be POSTed, may be a <see cref="T:YSWL.OAuth.Http.HttpEntity"/> in order to add additional HTTP headers.
            </param>
            <param name="putCompleted">
            The <code>Action&lt;T&gt;</code> to perform when the asynchronous PUT method completes.
            </param>
            <returns>
            A <see cref="T:YSWL.OAuth.Rest.Client.RestOperationCanceler"/> instance that allows to cancel the asynchronous operation.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.DeleteAsync(System.String,System.Action{YSWL.OAuth.Rest.Client.RestOperationCompletedEventArgs{System.Object}},System.Object[])">
            <summary>
            Asynchronously delete the resources at the specified URI.
            </summary>
            <remarks>
            URI Template variables are expanded using the given URI variables, if any.
            </remarks>
            <param name="url">The URL.</param>
            <param name="deleteCompleted">
            The <code>Action&lt;T&gt;</code> to perform when the asynchronous PUT method completes.
            </param>
            <param name="uriVariables">The variables to expand the template.</param>
            <returns>
            A <see cref="T:YSWL.OAuth.Rest.Client.RestOperationCanceler"/> instance that allows to cancel the asynchronous operation.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.DeleteAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Action{YSWL.OAuth.Rest.Client.RestOperationCompletedEventArgs{System.Object}})">
            <summary>
            Asynchronously delete the resources at the specified URI.
            </summary>
            <remarks>
            URI Template variables are expanded using the given dictionary.
            </remarks>
            <param name="url">The URL.</param>
            <param name="uriVariables">The dictionary containing variables for the URI template.</param>
            <param name="deleteCompleted">
            The <code>Action&lt;T&gt;</code> to perform when the asynchronous PUT method completes.
            </param>
            <returns>
            A <see cref="T:YSWL.OAuth.Rest.Client.RestOperationCanceler"/> instance that allows to cancel the asynchronous operation.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.DeleteAsync(System.Uri,System.Action{YSWL.OAuth.Rest.Client.RestOperationCompletedEventArgs{System.Object}})">
            <summary>
            Asynchronously delete the resources at the specified URI.
            </summary>
            <param name="url">The URL.</param>
            <param name="deleteCompleted">
            The <code>Action&lt;T&gt;</code> to perform when the asynchronous PUT method completes.
            </param>
            <returns>
            A <see cref="T:YSWL.OAuth.Rest.Client.RestOperationCanceler"/> instance that allows to cancel the asynchronous operation.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.OptionsForAllowAsync(System.String,System.Action{YSWL.OAuth.Rest.Client.RestOperationCompletedEventArgs{System.Collections.Generic.IList{YSWL.OAuth.Http.HttpMethod}}},System.Object[])">
            <summary>
            Asynchronously return the value of the Allow header for the given URI.
            </summary>
            <remarks>
            URI Template variables are expanded using the given URI variables, if any.
            </remarks>
            <param name="url">The URL.</param>
            <param name="optionsCompleted">
            The <code>Action&lt;T&gt;</code> to perform when the asynchronous OPTIONS method completes.
            </param>
            <param name="uriVariables">The variables to expand the template.</param>
            <returns>
            A <see cref="T:YSWL.OAuth.Rest.Client.RestOperationCanceler"/> instance that allows to cancel the asynchronous operation.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.OptionsForAllowAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Action{YSWL.OAuth.Rest.Client.RestOperationCompletedEventArgs{System.Collections.Generic.IList{YSWL.OAuth.Http.HttpMethod}}})">
            <summary>
            Asynchronously return the value of the Allow header for the given URI.
            </summary>
            <remarks>
            URI Template variables are expanded using the given dictionary.
            </remarks>
            <param name="url">The URL.</param>
            <param name="uriVariables">The dictionary containing variables for the URI template.</param>
            <param name="optionsCompleted">
            The <code>Action&lt;T&gt;</code> to perform when the asynchronous OPTIONS method completes.
            </param>
            <returns>
            A <see cref="T:YSWL.OAuth.Rest.Client.RestOperationCanceler"/> instance that allows to cancel the asynchronous operation.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.OptionsForAllowAsync(System.Uri,System.Action{YSWL.OAuth.Rest.Client.RestOperationCompletedEventArgs{System.Collections.Generic.IList{YSWL.OAuth.Http.HttpMethod}}})">
            <summary>
            Asynchronously return the value of the Allow header for the given URI.
            </summary>
            <param name="url">The URL.</param>
            <param name="optionsCompleted">
            The <code>Action&lt;T&gt;</code> to perform when the asynchronous OPTIONS method completes.
            </param>
            <returns>
            A <see cref="T:YSWL.OAuth.Rest.Client.RestOperationCanceler"/> instance that allows to cancel the asynchronous operation.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.ExchangeAsync``1(System.String,YSWL.OAuth.Http.HttpMethod,YSWL.OAuth.Http.HttpEntity,System.Action{YSWL.OAuth.Rest.Client.RestOperationCompletedEventArgs{YSWL.OAuth.Http.HttpResponseMessage{``0}}},System.Object[])">
            <summary>
            Asynchronously execute the HTTP method to the given URI template, writing the given request message to the request, 
            and returns the response as <see cref="T:YSWL.OAuth.Http.HttpResponseMessage`1"/>.
            </summary>
            <remarks>
            URI Template variables are expanded using the given URI variables, if any.
            </remarks>
            <typeparam name="T">The type of the response value.</typeparam>
            <param name="url">The URL.</param>
            <param name="method">The HTTP method (GET, POST, etc.)</param>
            <param name="requestEntity">
            The HTTP entity (headers and/or body) to write to the request, may be <see langword="null"/>.
            </param>
            <param name="methodCompleted">
            The <code>Action&lt;T&gt;</code> to perform when the asynchronous method completes.
            </param>
            <param name="uriVariables">The variables to expand the template.</param>
            <returns>
            A <see cref="T:YSWL.OAuth.Rest.Client.RestOperationCanceler"/> instance that allows to cancel the asynchronous operation.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.ExchangeAsync``1(System.String,YSWL.OAuth.Http.HttpMethod,YSWL.OAuth.Http.HttpEntity,System.Collections.Generic.IDictionary{System.String,System.Object},System.Action{YSWL.OAuth.Rest.Client.RestOperationCompletedEventArgs{YSWL.OAuth.Http.HttpResponseMessage{``0}}})">
            <summary>
            Asynchronously execute the HTTP method to the given URI template, writing the given request message to the request, 
            and returns the response as <see cref="T:YSWL.OAuth.Http.HttpResponseMessage`1"/>.
            </summary>
            <remarks>
            URI Template variables are expanded using the given dictionary.
            </remarks>
            <typeparam name="T">The type of the response value.</typeparam>
            <param name="url">The URL.</param>
            <param name="method">The HTTP method (GET, POST, etc.)</param>
            <param name="requestEntity">
            The HTTP entity (headers and/or body) to write to the request, may be <see langword="null"/>.
            </param>
            <param name="uriVariables">The dictionary containing variables for the URI template.</param>
            <param name="methodCompleted">
            The <code>Action&lt;T&gt;</code> to perform when the asynchronous method completes.
            </param>
            <returns>
            A <see cref="T:YSWL.OAuth.Rest.Client.RestOperationCanceler"/> instance that allows to cancel the asynchronous operation.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.ExchangeAsync``1(System.Uri,YSWL.OAuth.Http.HttpMethod,YSWL.OAuth.Http.HttpEntity,System.Action{YSWL.OAuth.Rest.Client.RestOperationCompletedEventArgs{YSWL.OAuth.Http.HttpResponseMessage{``0}}})">
            <summary>
            Asynchronously execute the HTTP method to the given URI template, writing the given request message to the request, 
            and returns the response as <see cref="T:YSWL.OAuth.Http.HttpResponseMessage`1"/>.
            </summary>
            <typeparam name="T">The type of the response value.</typeparam>
            <param name="url">The URL.</param>
            <param name="method">The HTTP method (GET, POST, etc.)</param>
            <param name="requestEntity">
            The HTTP entity (headers and/or body) to write to the request, may be <see langword="null"/>.
            </param>
            <param name="methodCompleted">
            The <code>Action&lt;T&gt;</code> to perform when the asynchronous method completes.
            </param>
            <returns>
            A <see cref="T:YSWL.OAuth.Rest.Client.RestOperationCanceler"/> instance that allows to cancel the asynchronous operation.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.ExchangeAsync(System.String,YSWL.OAuth.Http.HttpMethod,YSWL.OAuth.Http.HttpEntity,System.Action{YSWL.OAuth.Rest.Client.RestOperationCompletedEventArgs{YSWL.OAuth.Http.HttpResponseMessage}},System.Object[])">
            <summary>
            Asynchronously execute the HTTP method to the given URI template, writing the given request message to the request, 
            and returns the response with no entity as <see cref="T:YSWL.OAuth.Http.HttpResponseMessage"/>.
            </summary>
            <remarks>
            URI Template variables are expanded using the given URI variables, if any.
            </remarks>
            <param name="url">The URL.</param>
            <param name="method">The HTTP method (GET, POST, etc.)</param>
            <param name="requestEntity">
            The HTTP entity (headers and/or body) to write to the request, may be <see langword="null"/>.
            </param>
            <param name="methodCompleted">
            The <code>Action&lt;T&gt;</code> to perform when the asynchronous method completes.
            </param>
            <param name="uriVariables">The variables to expand the template.</param>
            <returns>
            A <see cref="T:YSWL.OAuth.Rest.Client.RestOperationCanceler"/> instance that allows to cancel the asynchronous operation.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.ExchangeAsync(System.String,YSWL.OAuth.Http.HttpMethod,YSWL.OAuth.Http.HttpEntity,System.Collections.Generic.IDictionary{System.String,System.Object},System.Action{YSWL.OAuth.Rest.Client.RestOperationCompletedEventArgs{YSWL.OAuth.Http.HttpResponseMessage}})">
            <summary>
            Asynchronously execute the HTTP method to the given URI template, writing the given request message to the request, 
            and returns the response with no entity as <see cref="T:YSWL.OAuth.Http.HttpResponseMessage"/>.
            </summary>
            <remarks>
            URI Template variables are expanded using the given dictionary.
            </remarks>
            <param name="url">The URL.</param>
            <param name="method">The HTTP method (GET, POST, etc.)</param>
            <param name="requestEntity">
            The HTTP entity (headers and/or body) to write to the request, may be <see langword="null"/>.
            </param>
            <param name="uriVariables">The dictionary containing variables for the URI template.</param>
            <param name="methodCompleted">
            The <code>Action&lt;T&gt;</code> to perform when the asynchronous method completes.
            </param>
            <returns>
            A <see cref="T:YSWL.OAuth.Rest.Client.RestOperationCanceler"/> instance that allows to cancel the asynchronous operation.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.ExchangeAsync(System.Uri,YSWL.OAuth.Http.HttpMethod,YSWL.OAuth.Http.HttpEntity,System.Action{YSWL.OAuth.Rest.Client.RestOperationCompletedEventArgs{YSWL.OAuth.Http.HttpResponseMessage}})">
            <summary>
            Asynchronously execute the HTTP method to the given URI template, writing the given request message to the request, 
            and returns the response with no entity as <see cref="T:YSWL.OAuth.Http.HttpResponseMessage"/>.
            </summary>
            <param name="url">The URL.</param>
            <param name="method">The HTTP method (GET, POST, etc.)</param>
            <param name="requestEntity">
            The HTTP entity (headers and/or body) to write to the request, may be <see langword="null"/>.
            </param>
            <param name="methodCompleted">
            The <code>Action&lt;T&gt;</code> to perform when the asynchronous method completes.
            </param>
            <returns>
            A <see cref="T:YSWL.OAuth.Rest.Client.RestOperationCanceler"/> instance that allows to cancel the asynchronous operation.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.ExecuteAsync``1(System.String,YSWL.OAuth.Http.HttpMethod,YSWL.OAuth.Rest.Client.IRequestCallback,YSWL.OAuth.Rest.Client.IResponseExtractor{``0},System.Action{YSWL.OAuth.Rest.Client.RestOperationCompletedEventArgs{``0}},System.Object[])">
            <summary>
            Asynchronously execute the HTTP method to the given URI template, preparing the request with the 
            <see cref="T:YSWL.OAuth.Rest.Client.IRequestCallback"/>, and reading the response with an <see cref="T:YSWL.OAuth.Rest.Client.IResponseExtractor`1"/>.
            </summary>
            <remarks>
            URI Template variables are expanded using the given URI variables, if any.
            </remarks>
            <typeparam name="T">The type of the response value.</typeparam>
            <param name="url">The URL.</param>
            <param name="method">The HTTP method (GET, POST, etc.)</param>
            <param name="requestCallback">Object that prepares the request.</param>
            <param name="responseExtractor">Object that extracts the return value from the response.</param>
            <param name="methodCompleted">
            The <code>Action&lt;T&gt;</code> to perform when the asynchronous method completes.
            </param>   
            <param name="uriVariables">The variables to expand the template.</param>
            <returns>
            A <see cref="T:YSWL.OAuth.Rest.Client.RestOperationCanceler"/> instance that allows to cancel the asynchronous operation.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.ExecuteAsync``1(System.String,YSWL.OAuth.Http.HttpMethod,YSWL.OAuth.Rest.Client.IRequestCallback,YSWL.OAuth.Rest.Client.IResponseExtractor{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.Action{YSWL.OAuth.Rest.Client.RestOperationCompletedEventArgs{``0}})">
            <summary>
            Asynchronously execute the HTTP method to the given URI template, preparing the request with the 
            <see cref="T:YSWL.OAuth.Rest.Client.IRequestCallback"/>, and reading the response with an <see cref="T:YSWL.OAuth.Rest.Client.IResponseExtractor`1"/>.
            </summary>
            <remarks>
            URI Template variables are expanded using the given dictionary.
            </remarks>
            <typeparam name="T">The type of the response value.</typeparam>
            <param name="url">The URL.</param>
            <param name="method">The HTTP method (GET, POST, etc.)</param>
            <param name="requestCallback">Object that prepares the request.</param>
            <param name="responseExtractor">Object that extracts the return value from the response.</param>
            <param name="uriVariables">The dictionary containing variables for the URI template.</param>
            <param name="methodCompleted">
            The <code>Action&lt;T&gt;</code> to perform when the asynchronous method completes.
            </param>  
            <returns>
            A <see cref="T:YSWL.OAuth.Rest.Client.RestOperationCanceler"/> instance that allows to cancel the asynchronous operation.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.ExecuteAsync``1(System.Uri,YSWL.OAuth.Http.HttpMethod,YSWL.OAuth.Rest.Client.IRequestCallback,YSWL.OAuth.Rest.Client.IResponseExtractor{``0},System.Action{YSWL.OAuth.Rest.Client.RestOperationCompletedEventArgs{``0}})">
            <summary>
            Asynchronously execute the HTTP method to the given URI template, preparing the request with the 
            <see cref="T:YSWL.OAuth.Rest.Client.IRequestCallback"/>, and reading the response with an <see cref="T:YSWL.OAuth.Rest.Client.IResponseExtractor`1"/>.
            </summary>
            <typeparam name="T">The type of the response value.</typeparam>
            <param name="url">The URL.</param>
            <param name="method">The HTTP method (GET, POST, etc.)</param>
            <param name="requestCallback">Object that prepares the request.</param>
            <param name="responseExtractor">Object that extracts the return value from the response.</param>
            <param name="methodCompleted">
            The <code>Action&lt;T&gt;</code> to perform when the asynchronous method completes.
            </param>  
            <returns>
            A <see cref="T:YSWL.OAuth.Rest.Client.RestOperationCanceler"/> instance that allows to cancel the asynchronous operation.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.GetForObjectAsync``1(System.String,System.Object[])">
            <summary>
            Asynchronously retrieve a representation by doing a GET on the specified URL. 
            The response (if any) is converted.
            </summary>
            <remarks>
            URI Template variables are expanded using the given URI variables, if any.
            </remarks>
            <typeparam name="T">The type of the response value.</typeparam>
            <param name="url">The URL.</param>
            <param name="uriVariables">The variables to expand the template.</param>
            <returns>A <code>Task&lt;T&gt;</code> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.GetForObjectAsync``1(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Asynchronously retrieve a representation by doing a GET on the specified URL. 
            The response (if any) is converted.
            </summary>
            <remarks>
            URI Template variables are expanded using the given dictionary.
            </remarks>
            <typeparam name="T">The type of the response value.</typeparam>
            <param name="url">The URL.</param>
            <param name="uriVariables">The dictionary containing variables for the URI template.</param>
            <returns>A <code>Task&lt;T&gt;</code> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.GetForObjectAsync``1(System.Uri)">
            <summary>
            Asynchronously retrieve a representation by doing a GET on the specified URL. 
            The response (if any) is converted.
            </summary>
            <typeparam name="T">The type of the response value.</typeparam>
            <param name="url">The URL.</param>
            <returns>A <code>Task&lt;T&gt;</code> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.GetForMessageAsync``1(System.String,System.Object[])">
            <summary>
            Asynchronously retrieve an entity by doing a GET on the specified URL. 
            The response is converted and stored in an <see cref="T:YSWL.OAuth.Http.HttpResponseMessage`1"/>.
            </summary>
            <remarks>
            URI Template variables are expanded using the given URI variables, if any.
            </remarks>
            <typeparam name="T">The type of the response value.</typeparam>
            <param name="url">The URL.</param>
            <param name="uriVariables">The variables to expand the template.</param>
            <returns>A <code>Task&lt;T&gt;</code> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.GetForMessageAsync``1(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Asynchronously retrieve an entity by doing a GET on the specified URL. 
            The response is converted and stored in an <see cref="T:YSWL.OAuth.Http.HttpResponseMessage`1"/>.
            </summary>
            <remarks>
            URI Template variables are expanded using the given dictionary.
            </remarks>
            <typeparam name="T">The type of the response value.</typeparam>
            <param name="url">The URL.</param>
            <param name="uriVariables">The dictionary containing variables for the URI template.</param>
            <returns>A <code>Task&lt;T&gt;</code> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.GetForMessageAsync``1(System.Uri)">
            <summary>
            Asynchronously retrieve an entity by doing a GET on the specified URL. 
            The response is converted and stored in an <see cref="T:YSWL.OAuth.Http.HttpResponseMessage`1"/>.
            </summary>
            <typeparam name="T">The type of the response value.</typeparam>
            <param name="url">The URL.</param>
            <returns>A <code>Task&lt;T&gt;</code> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.HeadForHeadersAsync(System.String,System.Object[])">
            <summary>
            Asynchronously retrieve all headers of the resource specified by the URI template.
            </summary>
            <remarks>
            URI Template variables are expanded using the given URI variables, if any.
            </remarks>
            <param name="url">The URL.</param>
            <param name="uriVariables">The variables to expand the template.</param>
            <returns>A <code>Task&lt;T&gt;</code> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.HeadForHeadersAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Asynchronously retrieve all headers of the resource specified by the URI template.
            </summary>
            <remarks>
            URI Template variables are expanded using the given dictionary.
            </remarks>
            <param name="url">The URL.</param>
            <param name="uriVariables">The dictionary containing variables for the URI template.</param>
            <returns>A <code>Task&lt;T&gt;</code> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.HeadForHeadersAsync(System.Uri)">
            <summary>
            Asynchronously retrieve all headers of the resource specified by the URI template.
            </summary>
            <param name="url">The URL.</param>
            <returns>A <code>Task&lt;T&gt;</code> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.PostForLocationAsync(System.String,System.Object,System.Object[])">
            <summary>
            Asynchronously create a new resource by POSTing the given object to the URI template, 
            and returns the value of the 'Location' header. 
            This header typically indicates where the new resource is stored.
            </summary>
            <remarks>
            <para>
            URI Template variables are expanded using the given URI variables, if any.
            </para>
            </remarks>
            <param name="url">The URL.</param>
            <param name="request">
            The object to be POSTed, may be a <see cref="T:YSWL.OAuth.Http.HttpEntity"/> in order to add additional HTTP headers.
            </param>
            <param name="uriVariables">The variables to expand the template.</param>
            <returns>A <code>Task&lt;T&gt;</code> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.PostForLocationAsync(System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Asynchronously create a new resource by POSTing the given object to the URI template, 
            and returns the value of the 'Location' header. 
            This header typically indicates where the new resource is stored.
            </summary>
            <remarks>
            <para>
            URI Template variables are expanded using the given dictionary.
            </para>
            </remarks>
            <param name="url">The URL.</param>
            <param name="request">
            The object to be POSTed, may be a <see cref="T:YSWL.OAuth.Http.HttpEntity"/> in order to add additional HTTP headers.
            </param>
            <param name="uriVariables">The dictionary containing variables for the URI template.</param>
            <returns>A <code>Task&lt;T&gt;</code> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.PostForLocationAsync(System.Uri,System.Object)">
            <summary>
            Asynchronously create a new resource by POSTing the given object to the URI template, 
            and returns the value of the 'Location' header. 
            This header typically indicates where the new resource is stored.
            </summary>
            <param name="url">The URL.</param>
            <param name="request">
            The object to be POSTed, may be a <see cref="T:YSWL.OAuth.Http.HttpEntity"/> in order to add additional HTTP headers.
            </param>
            <returns>A <code>Task&lt;T&gt;</code> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.PostForObjectAsync``1(System.String,System.Object,System.Object[])">
            <summary>
            Asynchronously create a new resource by POSTing the given object to the URI template, 
            and returns the representation found in the response. 
            </summary>
            <remarks>
            <para>
            URI Template variables are expanded using the given URI variables, if any.
            </para>
            </remarks>
            <typeparam name="T">The type of the response value.</typeparam>
            <param name="url">The URL.</param>
            <param name="request">
            The object to be POSTed, may be a <see cref="T:YSWL.OAuth.Http.HttpEntity"/> in order to add additional HTTP headers.
            </param>
            <param name="uriVariables">The variables to expand the template.</param>
            <returns>A <code>Task&lt;T&gt;</code> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.PostForObjectAsync``1(System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Asynchronously create a new resource by POSTing the given object to the URI template, 
            and returns the representation found in the response. 
            </summary>
            <remarks>
            <para>
            URI Template variables are expanded using the given dictionary.
            </para>
            </remarks>
            <typeparam name="T">The type of the response value.</typeparam>
            <param name="url">The URL.</param>
            <param name="request">
            The object to be POSTed, may be a <see cref="T:YSWL.OAuth.Http.HttpEntity"/> in order to add additional HTTP headers.
            </param>
            <param name="uriVariables">The dictionary containing variables for the URI template.</param>
            <returns>A <code>Task&lt;T&gt;</code> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.PostForObjectAsync``1(System.Uri,System.Object)">
            <summary>
            Asynchronously create a new resource by POSTing the given object to the URI template, 
            and returns the representation found in the response. 
            </summary>
            <typeparam name="T">The type of the response value.</typeparam>
            <param name="url">The URL.</param>
            <param name="request">
            The object to be POSTed, may be a <see cref="T:YSWL.OAuth.Http.HttpEntity"/> in order to add additional HTTP headers.
            </param>
            <returns>A <code>Task&lt;T&gt;</code> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.PostForMessageAsync``1(System.String,System.Object,System.Object[])">
            <summary>
            Asynchronously create a new resource by POSTing the given object to the URI template, 
            and returns the response as <see cref="T:YSWL.OAuth.Http.HttpResponseMessage`1"/>. 
            </summary>
            <remarks>
            <para>
            URI Template variables are expanded using the given URI variables, if any.
            </para>
            </remarks>
            <typeparam name="T">The type of the response value.</typeparam>
            <param name="url">The URL.</param>
            <param name="request">
            The object to be POSTed, may be a <see cref="T:YSWL.OAuth.Http.HttpEntity"/> in order to add additional HTTP headers.
            </param>
            <param name="uriVariables">The variables to expand the template.</param>
            <returns>A <code>Task&lt;T&gt;</code> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.PostForMessageAsync``1(System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Asynchronously create a new resource by POSTing the given object to the URI template, 
            and returns the response as <see cref="T:YSWL.OAuth.Http.HttpResponseMessage`1"/>. 
            </summary>
            <remarks>
            <para>
            URI Template variables are expanded using the given dictionary.
            </para>
            </remarks>
            <typeparam name="T">The type of the response value.</typeparam>
            <param name="url">The URL.</param>
            <param name="request">
            The object to be POSTed, may be a <see cref="T:YSWL.OAuth.Http.HttpEntity"/> in order to add additional HTTP headers.
            </param>
            <param name="uriVariables">The dictionary containing variables for the URI template.</param>
            <returns>A <code>Task&lt;T&gt;</code> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.PostForMessageAsync``1(System.Uri,System.Object)">
            <summary>
            Asynchronously create a new resource by POSTing the given object to the URI template, 
            and returns the response as <see cref="T:YSWL.OAuth.Http.HttpResponseMessage`1"/>. 
            </summary>
            <typeparam name="T">The type of the response value.</typeparam>
            <param name="url">The URL.</param>
            <param name="request">
            The object to be POSTed, may be a <see cref="T:YSWL.OAuth.Http.HttpEntity"/> in order to add additional HTTP headers.
            </param>
            <returns>A <code>Task&lt;T&gt;</code> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.PostForMessageAsync(System.String,System.Object,System.Object[])">
            <summary>
            Asynchronously create a new resource by POSTing the given object to the URI template, 
            and returns the response with no entity as <see cref="T:YSWL.OAuth.Http.HttpResponseMessage"/>. 
            </summary>
            <remarks>
            <para>
            URI Template variables are expanded using the given URI variables, if any.
            </para>
            </remarks>
            <param name="url">The URL.</param>
            <param name="request">
            The object to be POSTed, may be a <see cref="T:YSWL.OAuth.Http.HttpEntity"/> in order to add additional HTTP headers.
            </param>
            <param name="uriVariables">The variables to expand the template.</param>
            <returns>A <code>Task&lt;T&gt;</code> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.PostForMessageAsync(System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Asynchronously create a new resource by POSTing the given object to the URI template, 
            and returns the response with no entity as <see cref="T:YSWL.OAuth.Http.HttpResponseMessage"/>. 
            </summary>
            <remarks>
            <para>
            URI Template variables are expanded using the given dictionary.
            </para>
            </remarks>
            <param name="url">The URL.</param>
            <param name="request">
            The object to be POSTed, may be a <see cref="T:YSWL.OAuth.Http.HttpEntity"/> in order to add additional HTTP headers.
            </param>
            <param name="uriVariables">The dictionary containing variables for the URI template.</param>
            <returns>A <code>Task&lt;T&gt;</code> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.PostForMessageAsync(System.Uri,System.Object)">
            <summary>
            Asynchronously create a new resource by POSTing the given object to the URI template, 
            and returns the response with no entity as <see cref="T:YSWL.OAuth.Http.HttpResponseMessage"/>. 
            </summary>
            <param name="url">The URL.</param>
            <param name="request">
            The object to be POSTed, may be a <see cref="T:YSWL.OAuth.Http.HttpEntity"/> in order to add additional HTTP headers.
            </param>
            <returns>A <code>Task&lt;T&gt;</code> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.PutAsync(System.String,System.Object,System.Object[])">
            <summary>
            Asynchronously create or update a resource by PUTting the given object to the URI.
            </summary>
            <remarks>
            <para>
            URI Template variables are expanded using the given URI variables, if any.
            </para>
            </remarks>
            <param name="url">The URL.</param>
            <param name="request">
            The object to be POSTed, may be a <see cref="T:YSWL.OAuth.Http.HttpEntity"/> in order to add additional HTTP headers.
            </param>
            <param name="uriVariables">The variables to expand the template.</param>
            <returns>A <code>Task&lt;T&gt;</code> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.PutAsync(System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Asynchronously create or update a resource by PUTting the given object to the URI.
            </summary>
            <remarks>
            <para>
            URI Template variables are expanded using the given dictionary.
            </para>
            </remarks>
            <param name="url">The URL.</param>
            <param name="request">
            The object to be POSTed, may be a <see cref="T:YSWL.OAuth.Http.HttpEntity"/> in order to add additional HTTP headers.
            </param>
            <param name="uriVariables">The dictionary containing variables for the URI template.</param>
            <returns>A <code>Task&lt;T&gt;</code> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.PutAsync(System.Uri,System.Object)">
            <summary>
            Asynchronously create or update a resource by PUTting the given object to the URI.
            </summary>
            <param name="url">The URL.</param>
            <param name="request">
            The object to be POSTed, may be a <see cref="T:YSWL.OAuth.Http.HttpEntity"/> in order to add additional HTTP headers.
            </param>
            <returns>A <code>Task&lt;T&gt;</code> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.DeleteAsync(System.String,System.Object[])">
            <summary>
            Asynchronously delete the resources at the specified URI.
            </summary>
            <remarks>
            URI Template variables are expanded using the given URI variables, if any.
            </remarks>
            <param name="url">The URL.</param>
            <param name="uriVariables">The variables to expand the template.</param>
            <returns>A <code>Task&lt;T&gt;</code> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.DeleteAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Asynchronously delete the resources at the specified URI.
            </summary>
            <remarks>
            URI Template variables are expanded using the given dictionary.
            </remarks>
            <param name="url">The URL.</param>
            <param name="uriVariables">The dictionary containing variables for the URI template.</param>
            <returns>A <code>Task&lt;T&gt;</code> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.DeleteAsync(System.Uri)">
            <summary>
            Asynchronously delete the resources at the specified URI.
            </summary>
            <param name="url">The URL.</param>
            <returns>A <code>Task&lt;T&gt;</code> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.OptionsForAllowAsync(System.String,System.Object[])">
            <summary>
            Asynchronously return the value of the Allow header for the given URI.
            </summary>
            <remarks>
            URI Template variables are expanded using the given URI variables, if any.
            </remarks>
            <param name="url">The URL.</param>
            <param name="uriVariables">The variables to expand the template.</param>
            <returns>A <code>Task&lt;T&gt;</code> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.OptionsForAllowAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Asynchronously return the value of the Allow header for the given URI.
            </summary>
            <remarks>
            URI Template variables are expanded using the given dictionary.
            </remarks>
            <param name="url">The URL.</param>
            <param name="uriVariables">The dictionary containing variables for the URI template.</param>
            <returns>A <code>Task&lt;T&gt;</code> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.OptionsForAllowAsync(System.Uri)">
            <summary>
            Asynchronously return the value of the Allow header for the given URI.
            </summary>
            <param name="url">The URL.</param>
            <returns>A <code>Task&lt;T&gt;</code> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.ExchangeAsync``1(System.String,YSWL.OAuth.Http.HttpMethod,YSWL.OAuth.Http.HttpEntity,System.Threading.CancellationToken,System.Object[])">
            <summary>
            Asynchronously execute the HTTP method to the given URI template, writing the given request message to the request, 
            and returns the response as <see cref="T:YSWL.OAuth.Http.HttpResponseMessage`1"/>.
            </summary>
            <remarks>
            URI Template variables are expanded using the given URI variables, if any.
            </remarks>
            <typeparam name="T">The type of the response value.</typeparam>
            <param name="url">The URL.</param>
            <param name="method">The HTTP method (GET, POST, etc.)</param>
            <param name="requestEntity">
            The HTTP entity (headers and/or body) to write to the request, may be <see langword="null"/>.
            </param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that will be assigned to the task.</param>
            <param name="uriVariables">The variables to expand the template.</param>
            <returns>A <code>Task&lt;T&gt;</code> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.ExchangeAsync``1(System.String,YSWL.OAuth.Http.HttpMethod,YSWL.OAuth.Http.HttpEntity,System.Threading.CancellationToken,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Asynchronously execute the HTTP method to the given URI template, writing the given request message to the request, 
            and returns the response as <see cref="T:YSWL.OAuth.Http.HttpResponseMessage`1"/>.
            </summary>
            <remarks>
            URI Template variables are expanded using the given dictionary.
            </remarks>
            <typeparam name="T">The type of the response value.</typeparam>
            <param name="url">The URL.</param>
            <param name="method">The HTTP method (GET, POST, etc.)</param>
            <param name="requestEntity">
            The HTTP entity (headers and/or body) to write to the request, may be <see langword="null"/>.
            </param>
            <param name="uriVariables">The dictionary containing variables for the URI template.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that will be assigned to the task.</param>
            <returns>A <code>Task&lt;T&gt;</code> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.ExchangeAsync``1(System.Uri,YSWL.OAuth.Http.HttpMethod,YSWL.OAuth.Http.HttpEntity,System.Threading.CancellationToken)">
            <summary>
            Asynchronously execute the HTTP method to the given URI template, writing the given request message to the request, 
            and returns the response as <see cref="T:YSWL.OAuth.Http.HttpResponseMessage`1"/>.
            </summary>
            <typeparam name="T">The type of the response value.</typeparam>
            <param name="url">The URL.</param>
            <param name="method">The HTTP method (GET, POST, etc.)</param>
            <param name="requestEntity">
            The HTTP entity (headers and/or body) to write to the request, may be <see langword="null"/>.
            </param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that will be assigned to the task.</param>
            <returns>A <code>Task&lt;T&gt;</code> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.ExchangeAsync(System.String,YSWL.OAuth.Http.HttpMethod,YSWL.OAuth.Http.HttpEntity,System.Threading.CancellationToken,System.Object[])">
            <summary>
            Asynchronously execute the HTTP method to the given URI template, writing the given request message to the request, 
            and returns the response with no entity as <see cref="T:YSWL.OAuth.Http.HttpResponseMessage"/>.
            </summary>
            <remarks>
            URI Template variables are expanded using the given URI variables, if any.
            </remarks>
            <param name="url">The URL.</param>
            <param name="method">The HTTP method (GET, POST, etc.)</param>
            <param name="requestEntity">
            The HTTP entity (headers and/or body) to write to the request, may be <see langword="null"/>.
            </param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that will be assigned to the task.</param>
            <param name="uriVariables">The variables to expand the template.</param>
            <returns>A <code>Task&lt;T&gt;</code> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.ExchangeAsync(System.String,YSWL.OAuth.Http.HttpMethod,YSWL.OAuth.Http.HttpEntity,System.Threading.CancellationToken,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Asynchronously execute the HTTP method to the given URI template, writing the given request message to the request, 
            and returns the response with no entity as <see cref="T:YSWL.OAuth.Http.HttpResponseMessage"/>.
            </summary>
            <remarks>
            URI Template variables are expanded using the given dictionary.
            </remarks>
            <param name="url">The URL.</param>
            <param name="method">The HTTP method (GET, POST, etc.)</param>
            <param name="requestEntity">
            The HTTP entity (headers and/or body) to write to the request, may be <see langword="null"/>.
            </param>
            <param name="uriVariables">The dictionary containing variables for the URI template.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that will be assigned to the task.</param>
            <returns>
            A <see cref="T:YSWL.OAuth.Rest.Client.RestOperationCanceler"/> instance that allows to cancel the asynchronous operation.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.ExchangeAsync(System.Uri,YSWL.OAuth.Http.HttpMethod,YSWL.OAuth.Http.HttpEntity,System.Threading.CancellationToken)">
            <summary>
            Asynchronously execute the HTTP method to the given URI template, writing the given request message to the request, 
            and returns the response with no entity as <see cref="T:YSWL.OAuth.Http.HttpResponseMessage"/>.
            </summary>
            <param name="url">The URL.</param>
            <param name="method">The HTTP method (GET, POST, etc.)</param>
            <param name="requestEntity">
            The HTTP entity (headers and/or body) to write to the request, may be <see langword="null"/>.
            </param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that will be assigned to the task.</param>
            <returns>A <code>Task&lt;T&gt;</code> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.ExecuteAsync``1(System.String,YSWL.OAuth.Http.HttpMethod,YSWL.OAuth.Rest.Client.IRequestCallback,YSWL.OAuth.Rest.Client.IResponseExtractor{``0},System.Threading.CancellationToken,System.Object[])">
            <summary>
            Asynchronously execute the HTTP method to the given URI template, preparing the request with the 
            <see cref="T:YSWL.OAuth.Rest.Client.IRequestCallback"/>, and reading the response with an <see cref="T:YSWL.OAuth.Rest.Client.IResponseExtractor`1"/>.
            </summary>
            <remarks>
            URI Template variables are expanded using the given URI variables, if any.
            </remarks>
            <typeparam name="T">The type of the response value.</typeparam>
            <param name="url">The URL.</param>
            <param name="method">The HTTP method (GET, POST, etc.)</param>
            <param name="requestCallback">Object that prepares the request.</param>
            <param name="responseExtractor">Object that extracts the return value from the response.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that will be assigned to the task.</param>
            <param name="uriVariables">The variables to expand the template.</param>
            <returns>A <code>Task&lt;T&gt;</code> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.ExecuteAsync``1(System.String,YSWL.OAuth.Http.HttpMethod,YSWL.OAuth.Rest.Client.IRequestCallback,YSWL.OAuth.Rest.Client.IResponseExtractor{``0},System.Threading.CancellationToken,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Asynchronously execute the HTTP method to the given URI template, preparing the request with the 
            <see cref="T:YSWL.OAuth.Rest.Client.IRequestCallback"/>, and reading the response with an <see cref="T:YSWL.OAuth.Rest.Client.IResponseExtractor`1"/>.
            </summary>
            <remarks>
            URI Template variables are expanded using the given dictionary.
            </remarks>
            <typeparam name="T">The type of the response value.</typeparam>
            <param name="url">The URL.</param>
            <param name="method">The HTTP method (GET, POST, etc.)</param>
            <param name="requestCallback">Object that prepares the request.</param>
            <param name="responseExtractor">Object that extracts the return value from the response.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that will be assigned to the task.</param>
            <param name="uriVariables">The dictionary containing variables for the URI template.</param>
            <returns>A <code>Task&lt;T&gt;</code> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.ExecuteAsync``1(System.Uri,YSWL.OAuth.Http.HttpMethod,YSWL.OAuth.Rest.Client.IRequestCallback,YSWL.OAuth.Rest.Client.IResponseExtractor{``0},System.Threading.CancellationToken)">
            <summary>
            Asynchronously execute the HTTP method to the given URI template, preparing the request with the 
            <see cref="T:YSWL.OAuth.Rest.Client.IRequestCallback"/>, and reading the response with an <see cref="T:YSWL.OAuth.Rest.Client.IResponseExtractor`1"/>.
            </summary>
            <typeparam name="T">The type of the response value.</typeparam>
            <param name="url">The URL.</param>
            <param name="method">The HTTP method (GET, POST, etc.)</param>
            <param name="requestCallback">Object that prepares the request.</param>
            <param name="responseExtractor">Object that extracts the return value from the response.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that will be assigned to the task.</param>
            <returns>A <code>Task&lt;T&gt;</code> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.DoExecute``1(System.Uri,YSWL.OAuth.Http.HttpMethod,YSWL.OAuth.Rest.Client.IRequestCallback,YSWL.OAuth.Rest.Client.IResponseExtractor{``0})">
            <summary>
            Execute the HTTP request to the given URI, preparing the request with the 
            <see cref="T:YSWL.OAuth.Rest.Client.IRequestCallback"/>, and reading the response with an <see cref="T:YSWL.OAuth.Rest.Client.IResponseExtractor`1"/>.
            </summary>
            <typeparam name="T">The type of the response value.</typeparam>
            <param name="uri">The fully-expanded URI to connect to.</param>
            <param name="method">The HTTP method (GET, POST, etc.)</param>
            <param name="requestCallback">Object that prepares the request.</param>
            <param name="responseExtractor">Object that extracts the return value from the response.</param>
            <returns>An arbitrary object, as returned by the <see cref="T:YSWL.OAuth.Rest.Client.IResponseExtractor`1"/>.</returns>  
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.DoExecuteAsync``1(System.Uri,YSWL.OAuth.Http.HttpMethod,YSWL.OAuth.Rest.Client.IRequestCallback,YSWL.OAuth.Rest.Client.IResponseExtractor{``0},System.Action{YSWL.OAuth.Rest.Client.RestOperationCompletedEventArgs{``0}})">
            <summary>
            Asynchronously execute the HTTP request to the given URI, preparing the request with the 
            <see cref="T:YSWL.OAuth.Rest.Client.IRequestCallback"/>, and reading the response with an <see cref="T:YSWL.OAuth.Rest.Client.IResponseExtractor`1"/>.
            </summary>
            <typeparam name="T">The type of the response value.</typeparam>
            <param name="uri">The fully-expanded URI to connect to.</param>
            <param name="method">The HTTP method (GET, POST, etc.)</param>
            <param name="requestCallback">Object that prepares the request.</param>
            <param name="responseExtractor">Object that extracts the return value from the response.</param>
            <param name="methodCompleted">
            The <code>Action&lt;T&gt;</code> to perform when the asynchronous method completes.
            </param>  
            <returns>
            A <see cref="T:YSWL.OAuth.Rest.Client.RestOperationCanceler"/> instance that allows to cancel the asynchronous operation.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.DoExecuteAsync``1(System.Uri,YSWL.OAuth.Http.HttpMethod,YSWL.OAuth.Rest.Client.IRequestCallback,YSWL.OAuth.Rest.Client.IResponseExtractor{``0},System.Threading.CancellationToken)">
            <summary>
            Asynchronously execute the HTTP request to the given URI, preparing the request with the 
            <see cref="T:YSWL.OAuth.Rest.Client.IRequestCallback"/>, and reading the response with an <see cref="T:YSWL.OAuth.Rest.Client.IResponseExtractor`1"/>.
            </summary>
            <typeparam name="T">The type of the response value.</typeparam>
            <param name="uri">The fully-expanded URI to connect to.</param>
            <param name="method">The HTTP method (GET, POST, etc.)</param>
            <param name="requestCallback">Object that prepares the request.</param>
            <param name="responseExtractor">Object that extracts the return value from the response.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that will be assigned to the task.</param>
            <returns>A <code>Task&lt;T&gt;</code> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.BuildUri(System.Uri,System.String,System.Object[])">
            <summary>
            Builds an uri using the given parameters.
            </summary>
            <param name="baseAddress">The base address to use, may be <see langword="null"/>.</param>
            <param name="url">An absolute or relative URI template to expand.</param>
            <param name="uriVariables">The variables to expand the template.</param>
            <returns>The absolute build URI.</returns>
            <exception cref="T:System.ArgumentException">If an absolute URI can't be build.</exception>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.BuildUri(System.Uri,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Builds an uri using the given parameters.
            </summary>
            <param name="baseAddress">The base address to use, may be <see langword="null"/>.</param>
            <param name="url">An absolute or relative URI template to expand.</param>
            <param name="uriVariables">The dictionary containing variables for the URI template.</param>
            <returns>The absolute build URI.</returns>
            <exception cref="T:System.ArgumentException">If an absolute URI can't be build.</exception>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.RestTemplate.BuildUri(System.Uri,System.Uri)">
            <summary>
            Builds an uri using the given parameters.
            </summary>
            <param name="baseAddress">The base address to use, may be <see langword="null"/>.</param>
            <param name="uri">An absolute or relative URI.</param>
            <returns>The absolute build URI.</returns>
            <exception cref="T:System.ArgumentException">If an absolute URI can't be build.</exception>
        </member>
        <member name="T:YSWL.OAuth.Rest.Client.Support.AcceptHeaderRequestCallback">
            <summary>
            Request callback implementation that prepares the request's accept headers.
            </summary>
            <author>Arjen Poutsma</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="F:YSWL.OAuth.Rest.Client.Support.AcceptHeaderRequestCallback.responseType">
            <summary>
            The expected response body type.
            </summary>
        </member>
        <member name="F:YSWL.OAuth.Rest.Client.Support.AcceptHeaderRequestCallback.messageConverters">
            <summary>
            The list of <see cref="T:YSWL.OAuth.Http.Converters.IHttpMessageConverter"/> to use.
            </summary>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.Support.AcceptHeaderRequestCallback.#ctor(System.Type,System.Collections.Generic.IList{YSWL.OAuth.Http.Converters.IHttpMessageConverter})">
            <summary>
            Creates a new instance of <see cref="T:YSWL.OAuth.Rest.Client.Support.AcceptHeaderRequestCallback"/>.
            </summary>
            <param name="responseType">The expected response body type.</param>
            <param name="messageConverters">The list of <see cref="T:YSWL.OAuth.Http.Converters.IHttpMessageConverter"/> to use.</param>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.Support.AcceptHeaderRequestCallback.DoWithRequest(YSWL.OAuth.Http.Client.IClientHttpRequest)">
            <summary>
            Gets called by <see cref="T:YSWL.OAuth.Rest.Client.RestTemplate"/> with an <see cref="T:YSWL.OAuth.Http.Client.IClientHttpRequest"/> to write data. 
            </summary>
            <remarks>
            Does not need to care about closing the request or about handling errors: 
            this will all be handled by the <see cref="T:YSWL.OAuth.Rest.Client.RestTemplate"/> class.
            </remarks>
            <param name="request">The active HTTP request.</param>
        </member>
        <member name="T:YSWL.OAuth.Rest.Client.Support.AllowHeaderResponseExtractor">
            <summary>
            Response extractor that extracts the response HTTP headers 'Allow'.
            </summary>
            <author>Bruno Baia</author>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.Support.AllowHeaderResponseExtractor.ExtractData(YSWL.OAuth.Http.Client.IClientHttpResponse)">
            <summary>
            Gets called by <see cref="T:YSWL.OAuth.Rest.Client.RestTemplate"/> with an opened <see cref="T:YSWL.OAuth.Http.Client.IClientHttpResponse"/> to extract data. 
            Does not need to care about closing the request or about handling errors: 
            this will all be handled by the <see cref="T:YSWL.OAuth.Rest.Client.RestTemplate"/> class.
            </summary>
            <param name="response">The active HTTP request.</param>
        </member>
        <member name="T:YSWL.OAuth.Rest.Client.Support.DefaultResponseErrorHandler">
            <summary>
            Default implementation of the <see cref="T:YSWL.OAuth.Rest.Client.IResponseErrorHandler"/> interface.
            </summary>
            <remarks>
            <para>
            This error handler checks for the status code on the <see cref="T:YSWL.OAuth.Http.Client.IClientHttpResponse"/> : 
            any client code error (4xx) or server code error (5xx) is considered to be an error.
            </para>
            <para>
            This behavior can be changed by overriding the <see cref="M:HasError(HttpStatusCode)"/> method.
            </para>
            </remarks>
            <author>Arjen Poutsma</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.Support.DefaultResponseErrorHandler.HasError(System.Uri,YSWL.OAuth.Http.HttpMethod,YSWL.OAuth.Http.Client.IClientHttpResponse)">
            <summary>
            Indicates whether the given response has any errors.
            <para/>
            This implementation delegates to HasError(HttpStatusCode) method with the response status code.
            </summary>
            <param name="requestUri">The request URI.</param>
            <param name="requestMethod">The request method.</param>
            <param name="response">The response to inspect.</param>
            <returns>
            <see langword="true"/> if the response has an error; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.Support.DefaultResponseErrorHandler.HandleError(System.Uri,YSWL.OAuth.Http.HttpMethod,YSWL.OAuth.Http.Client.IClientHttpResponse)">
            <summary>
            Handles the error in the given response. 
            <para/>
            This method is only called when HasError() method has returned <see langword="true"/>.
            </summary>
            <param name="requestUri">The request URI.</param>
            <param name="requestMethod">The request method.</param>
            <param name="response">The response with the error</param>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.Support.DefaultResponseErrorHandler.HasError(System.Net.HttpStatusCode)">
            <summary>
            Checks if the given status code is a client code error (4xx) or a server code error (5xx).
            </summary>
            <param name="statusCode">The HTTP status code.</param>
            <returns>
            <see langword="true"/> if the response has an error; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.Support.DefaultResponseErrorHandler.HandleError(System.Uri,YSWL.OAuth.Http.HttpMethod,YSWL.OAuth.Http.HttpResponseMessage{System.Byte[]})">
            <summary>
            Throws an exception if the response status code is a client code error (4xx) 
            or a server code error (5xx). 
            This method is only called when <see cref="M:HasError"/> has returned <see langword="true"/>.
            </summary>
            <param name="requestUri">The request URI.</param>
            <param name="requestMethod">The request method.</param>
            <param name="response">The response message with the error</param>
            <exception cref="T:YSWL.OAuth.Rest.Client.HttpClientErrorException">If the response status code is a client error (4xx).</exception>
            <exception cref="T:YSWL.OAuth.Rest.Client.HttpServerErrorException">If the response status code is a server error (4xx).</exception>
        </member>
        <member name="T:YSWL.OAuth.Rest.Client.Support.HeadersResponseExtractor">
            <summary>
            Response extractor that extracts the response HTTP headers.
            </summary>
            <author>Arjen Poutsma</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.Support.HeadersResponseExtractor.ExtractData(YSWL.OAuth.Http.Client.IClientHttpResponse)">
            <summary>
            Gets called by <see cref="T:YSWL.OAuth.Rest.Client.RestTemplate"/> with an opened <see cref="T:YSWL.OAuth.Http.Client.IClientHttpResponse"/> to extract data. 
            Does not need to care about closing the request or about handling errors: 
            this will all be handled by the <see cref="T:YSWL.OAuth.Rest.Client.RestTemplate"/> class.
            </summary>
            <param name="response">The active HTTP request.</param>
        </member>
        <member name="T:YSWL.OAuth.Rest.Client.Support.HttpEntityRequestCallback">
            <summary>
            Request callback implementation that writes the given object to the request stream.
            </summary>
            <author>Arjen Poutsma</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="F:YSWL.OAuth.Rest.Client.Support.HttpEntityRequestCallback.requestEntity">
            <summary>
            The underlying <see cref="T:YSWL.OAuth.Http.HttpEntity"/> used by the request.
            </summary>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.Support.HttpEntityRequestCallback.#ctor(System.Object,System.Collections.Generic.IList{YSWL.OAuth.Http.Converters.IHttpMessageConverter})">
            <summary>
            Creates a new instance of <see cref="T:YSWL.OAuth.Rest.Client.Support.HttpEntityRequestCallback"/>.
            </summary>
            <param name="requestBody">
            The object to write to the request. 
            Can be a <see cref="T:YSWL.OAuth.Http.HttpEntity"/> in order to add additional HTTP headers to the request.
            </param>
            <param name="messageConverters">The list of <see cref="T:YSWL.OAuth.Http.Converters.IHttpMessageConverter"/> to use.</param>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.Support.HttpEntityRequestCallback.#ctor(System.Object,System.Type,System.Collections.Generic.IList{YSWL.OAuth.Http.Converters.IHttpMessageConverter})">
            <summary>
            Creates a new instance of <see cref="T:YSWL.OAuth.Rest.Client.Support.HttpEntityRequestCallback"/>.
            </summary>
            <param name="requestBody">The object to write to the request.</param>
            <param name="responseType">The expected response body type.</param>
            <param name="messageConverters">The list of <see cref="T:YSWL.OAuth.Http.Converters.IHttpMessageConverter"/> to use.</param>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.Support.HttpEntityRequestCallback.DoWithRequest(YSWL.OAuth.Http.Client.IClientHttpRequest)">
            <summary>
            Gets called by <see cref="T:YSWL.OAuth.Rest.Client.RestTemplate"/> with an <see cref="T:YSWL.OAuth.Http.Client.IClientHttpRequest"/> to write data. 
            </summary>
            <remarks>
            Does not need to care about closing the request or about handling errors: 
            this will all be handled by the <see cref="T:YSWL.OAuth.Rest.Client.RestTemplate"/> class.
            </remarks>
            <param name="request">The active HTTP request.</param>
        </member>
        <member name="T:YSWL.OAuth.Rest.Client.Support.HttpMessageResponseExtractor">
            <summary>
            Response extractor that extracts the HTTP response message with no body.
            </summary>
            <author>Bruno Baia</author>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.Support.HttpMessageResponseExtractor.ExtractData(YSWL.OAuth.Http.Client.IClientHttpResponse)">
            <summary>
            Gets called by <see cref="T:YSWL.OAuth.Rest.Client.RestTemplate"/> with an opened <see cref="T:YSWL.OAuth.Http.Client.IClientHttpResponse"/> to extract data. 
            Does not need to care about closing the request or about handling errors: 
            this will all be handled by the <see cref="T:YSWL.OAuth.Rest.Client.RestTemplate"/> class.
            </summary>
            <param name="response">The active HTTP request.</param>
        </member>
        <member name="T:YSWL.OAuth.Rest.Client.Support.HttpMessageResponseExtractor`1">
            <summary>
            Response extractor that extracts the HTTP response message with no body.
            </summary>
            <author>Arjen Poutsma</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.Support.HttpMessageResponseExtractor`1.#ctor(System.Collections.Generic.IList{YSWL.OAuth.Http.Converters.IHttpMessageConverter})">
            <summary>
            Creates a new instance of the <see cref="T:YSWL.OAuth.Rest.Client.Support.HttpMessageResponseExtractor`1"/> class.
            </summary>
            <param name="messageConverters">The list of <see cref="T:YSWL.OAuth.Http.Converters.IHttpMessageConverter"/> to use.</param>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.Support.HttpMessageResponseExtractor`1.ExtractData(YSWL.OAuth.Http.Client.IClientHttpResponse)">
            <summary>
            Gets called by <see cref="T:YSWL.OAuth.Rest.Client.RestTemplate"/> with an opened <see cref="T:YSWL.OAuth.Http.Client.IClientHttpResponse"/> to extract data. 
            Does not need to care about closing the request or about handling errors: 
            this will all be handled by the <see cref="T:YSWL.OAuth.Rest.Client.RestTemplate"/> class.
            </summary>
            <param name="response">The active HTTP request.</param>
        </member>
        <member name="T:YSWL.OAuth.Rest.Client.Support.LocationHeaderResponseExtractor">
            <summary>
            Response extractor that extracts the response HTTP headers 'Location'.
            </summary>
            <author>Bruno Baia</author>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.Support.LocationHeaderResponseExtractor.ExtractData(YSWL.OAuth.Http.Client.IClientHttpResponse)">
            <summary>
            Gets called by <see cref="T:YSWL.OAuth.Rest.Client.RestTemplate"/> with an opened <see cref="T:YSWL.OAuth.Http.Client.IClientHttpResponse"/> to extract data. 
            Does not need to care about closing the request or about handling errors: 
            this will all be handled by the <see cref="T:YSWL.OAuth.Rest.Client.RestTemplate"/> class.
            </summary>
            <param name="response">The active HTTP request.</param>
        </member>
        <member name="T:YSWL.OAuth.Rest.Client.Support.MessageConverterResponseExtractor`1">
            <summary>
            Response extractor that uses the given HTTP message converters to convert the response into a type.
            </summary>
            <typeparam name="T">The response body type.</typeparam>
            <author>Arjen Poutsma</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="F:YSWL.OAuth.Rest.Client.Support.MessageConverterResponseExtractor`1.messageConverters">
            <summary>
            The underlying list of <see cref="T:YSWL.OAuth.Http.Converters.IHttpMessageConverter"/> used to extract data from the response.
            </summary>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.Support.MessageConverterResponseExtractor`1.#ctor(System.Collections.Generic.IList{YSWL.OAuth.Http.Converters.IHttpMessageConverter})">
            <summary>
            Creates a new instance of the <see cref="T:YSWL.OAuth.Rest.Client.Support.MessageConverterResponseExtractor`1"/> class.
            </summary>
            <param name="messageConverters">The list of <see cref="T:YSWL.OAuth.Http.Converters.IHttpMessageConverter"/> to use.</param>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.Support.MessageConverterResponseExtractor`1.ExtractData(YSWL.OAuth.Http.Client.IClientHttpResponse)">
            <summary>
            Gets called by <see cref="T:YSWL.OAuth.Rest.Client.RestTemplate"/> with an opened <see cref="T:YSWL.OAuth.Http.Client.IClientHttpResponse"/> to extract data. 
            Does not need to care about closing the request or about handling errors: 
            this will all be handled by the <see cref="T:YSWL.OAuth.Rest.Client.RestTemplate"/> class.
            </summary>
            <param name="response">The active HTTP request.</param>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.Support.MessageConverterResponseExtractor`1.HasMessageBody(YSWL.OAuth.Http.Client.IClientHttpResponse)">
            <summary>
            Indicates whether or not the given response has a message body.
            </summary>
            <remarks>
            Default implementation returns false for a response status of 204 or 304, or a 'Content-Length' of 0.
            </remarks>
            <param name="response">The response to check for a message body.</param>
            <returns><see langword="true"/> if the response has a body; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:YSWL.OAuth.Rest.Client.Support.RestAsyncOperationState`1">
            <summary>
            Represents the state of an asynchronous REST operation 
            that is passed to the request asynchronous execution method.
            </summary>
            <typeparam name="T">The type of the response value.</typeparam>
            <author>Bruno Baia</author>
        </member>
        <member name="P:YSWL.OAuth.Rest.Client.Support.RestAsyncOperationState`1.Uri">
            <summary>
            Gets or sets the HTTP URI.
            </summary>
        </member>
        <member name="P:YSWL.OAuth.Rest.Client.Support.RestAsyncOperationState`1.Method">
            <summary>
            Gets or sets the HTTP method.
            </summary>
        </member>
        <member name="P:YSWL.OAuth.Rest.Client.Support.RestAsyncOperationState`1.ResponseExtractor">
            <summary>
            Gets or sets the <see cref="T:YSWL.OAuth.Rest.Client.IResponseExtractor`1"/> 
            that extracts the return value from the response.
            </summary>
        </member>
        <member name="P:YSWL.OAuth.Rest.Client.Support.RestAsyncOperationState`1.ResponseErrorHandler">
            <summary>
            Gets or sets the <see cref="T:YSWL.OAuth.Rest.Client.IResponseErrorHandler"/> 
            that handles error in the response.
            </summary>
        </member>
        <member name="P:YSWL.OAuth.Rest.Client.Support.RestAsyncOperationState`1.MethodCompleted">
            <summary>
            Gets or sets the <code>Action&lt;RestOperationCompletedEventArgs&lt;T&gt;&gt;</code> 
            to perform when the REST operation completes.
            </summary>
        </member>
        <member name="M:YSWL.OAuth.Rest.Client.Support.RestAsyncOperationState`1.#ctor(System.Uri,YSWL.OAuth.Http.HttpMethod,YSWL.OAuth.Rest.Client.IResponseExtractor{`0},YSWL.OAuth.Rest.Client.IResponseErrorHandler,System.Action{YSWL.OAuth.Rest.Client.RestOperationCompletedEventArgs{`0}})">
            <summary>
            Creates a new instance of <see cref="T:YSWL.OAuth.Rest.Client.Support.RestAsyncOperationState`1"/>.
            </summary>
            <param name="uri">The HTTP URI.</param>
            <param name="method">The HTTP method.</param>
            <param name="responseExtractor">
            The object that extracts the return value from the response.
            </param>
            <param name="responseErrorHandler">
            The object that handles error in the response.
            </param>
            <param name="methodCompleted">
            The callback method when the REST operation completes.
            </param>
        </member>
        <member name="M:YSWL.OAuth.Sina.WeiboTemplate.UpdateStatusAsync(System.String)">
            <summary>
            发布文字微博
            </summary>
            <param name="status">内容</param>
        </member>
        <member name="M:YSWL.OAuth.Sina.WeiboTemplate.UploadStatusAsync(System.String,System.IO.FileInfo)">
            <summary>
            发布图片微博
            </summary>
            <param name="status">内容</param>
            <param name="fileInfo"></param>
        </member>
        <member name="P:YSWL.OAuth.Sina.IWeibo.RestOperations">
            <summary>
            Gets the underlying <see cref="T:YSWL.OAuth.Rest.Client.IRestOperations"/> object allowing for consumption of Do endpoints 
            that may not be otherwise covered by the API binding. 
            </summary>
            <remarks>
            The <see cref="T:YSWL.OAuth.Rest.Client.IRestOperations"/> object returned is configured to include an OAuth "Authorization" header on all requests.
            </remarks>
        </member>
        <member name="P:YSWL.OAuth.Tencent.QQ.IQConnect.RestOperations">
            <summary>
            Gets the underlying <see cref="T:YSWL.OAuth.Rest.Client.IRestOperations"/> object allowing for consumption of Do endpoints 
            that may not be otherwise covered by the API binding. 
            </summary>
            <remarks>
            The <see cref="T:YSWL.OAuth.Rest.Client.IRestOperations"/> object returned is configured to include an OAuth "Authorization" header on all requests.
            </remarks>
        </member>
        <member name="F:YSWL.OAuth.Tencent.QQ.QConnectTemplate._accessGrant">
            <summary>
            腾讯帐号 OpenId
            </summary>
        </member>
        <member name="M:YSWL.OAuth.Tencent.QQ.QConnectTemplate.UpdateStatusAsync(System.String)">
            <summary>
            发布文字微博
            </summary>
            <param name="status">内容</param>
        </member>
        <member name="M:YSWL.OAuth.Tencent.QQ.QConnectTemplate.UploadStatusAsync(System.String,System.IO.FileInfo)">
            <summary>
            发布图片微博
            </summary>
            <param name="status">内容</param>
            <param name="fileInfo">图片</param>
        </member>
        <member name="T:YSWL.OAuth.Tencent.QQ.Converters.OpenIdJsonHttpMessageConverter">
            <summary>
            Implementation of <see cref="T:YSWL.OAuth.Http.Converters.IHttpMessageConverter"/> that can read and write strings.
            </summary>
            <remarks>
            By default, this converter supports all media types '*/*', and writes with a 'Content-Type' 
            of 'text/plain'. 
            This can be overridden by setting the <see cref="P:SupportedMediaTypes"/> property.
            </remarks>
            <author>Ben</author>
        </member>
        <member name="P:YSWL.OAuth.Tencent.Weibo.IWeibo.RestOperations">
            <summary>
            Gets the underlying <see cref="T:YSWL.OAuth.Rest.Client.IRestOperations"/> object allowing for consumption of Do endpoints 
            that may not be otherwise covered by the API binding. 
            </summary>
            <remarks>
            The <see cref="T:YSWL.OAuth.Rest.Client.IRestOperations"/> object returned is configured to include an OAuth "Authorization" header on all requests.
            </remarks>
        </member>
        <member name="F:YSWL.OAuth.Tencent.Weibo.WeiboTemplate._accessGrant">
            <summary>
            腾讯帐号 OpenId
            </summary>
        </member>
        <member name="M:YSWL.OAuth.Tencent.Weibo.WeiboTemplate.UpdateStatusAsync(System.String)">
            <summary>
            发布文字微博
            </summary>
            <param name="status">内容</param>
        </member>
        <member name="M:YSWL.OAuth.Tencent.Weibo.WeiboTemplate.UploadStatusAsync(System.String,System.IO.FileInfo)">
            <summary>
            发布图片微博
            </summary>
            <param name="status">内容</param>
            <param name="fileInfo">图片</param>
        </member>
        <member name="T:YSWL.OAuth.Util.ArgumentUtils">
            <summary>
            Assertion utility methods that assists in validating arguments. 
            Useful for identifying programmer errors early and clearly at runtime.
            </summary>
            <remarks>
            <para>
            For example, if the contract of a public method states it does not allow <code>null</code> arguments, 
            ArgumentUtils can be used to validate that contract. 
            Doing this clearly indicates a contract violation when it occurs and protects the class's invariants.
            </para>
            <para>
            Mainly for internal use within the framework.
            </para>
            </remarks>
            <author>Aleksandar Seovic</author>
            <author>Erich Eichinger</author>
        </member>
        <member name="M:YSWL.OAuth.Util.ArgumentUtils.AssertNotNull(System.Object,System.String)">
            <summary>
            Checks the value of the supplied <paramref name="argument"/> and throws an
            <see cref="T:System.ArgumentNullException"/> if it is <see langword="null"/>.
            </summary>
            <param name="argument">The object to check.</param>
            <param name="name">The argument name.</param>
            <exception cref="T:System.ArgumentNullException">
            If the supplied <paramref name="argument"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:YSWL.OAuth.Util.ArgumentUtils.AssertHasText(System.String,System.String)">
            <summary>
            Checks the value of the supplied string <paramref name="argument"/> and throws an
            <see cref="T:System.ArgumentNullException"/> if it is <see langword="null"/> or
            contains only whitespace character(s).
            </summary>
            <param name="argument">The string to check.</param>
            <param name="name">The argument name.</param>
            <exception cref="T:System.ArgumentNullException">
            If the supplied <paramref name="argument"/> is <see langword="null"/> or
            contains only whitespace character(s).
            </exception>
        </member>
        <member name="T:YSWL.OAuth.Util.IoUtils">
            <summary>
            Utility methods for IO handling.
            </summary>
            <author>Bruno Baia</author>
        </member>
        <member name="M:YSWL.OAuth.Util.IoUtils.CopyStream(System.IO.Stream,System.IO.Stream)">
            <summary>
            Copies one stream into another. 
            </summary>
        </member>
        <member name="T:YSWL.OAuth.Util.StringUtils">
            <summary>
            Miscellaneous <see cref="T:System.String"/> utility methods.
            </summary>
            <remarks>
            Mainly for internal use within the framework.
            </remarks>
            <author>Rod Johnson</author>
            <author>Juergen Hoeller</author>
            <author>Keith Donald</author>
            <author>Aleksandar Seovic (.NET)</author>
            <author>Mark Pollack (.NET)</author>
            <author>Rick Evans (.NET)</author>
            <author>Erich Eichinger (.NET)</author>
        </member>
        <member name="M:YSWL.OAuth.Util.StringUtils.HasLength(System.String)">
            <summary>Checks if a string has length.</summary>
            <param name="target">
            The string to check, may be <see langword="null"/>.
            </param>
            <returns>
            <see langword="true"/> if the string has length and is not
            <see langword="null"/>.
            </returns>
            <example>
            <code lang="C#">
            StringUtils.HasLength(null) = false
            StringUtils.HasLength("") = false
            StringUtils.HasLength(" ") = true
            StringUtils.HasLength("Hello") = true
            </code>
            </example>
        </member>
        <member name="M:YSWL.OAuth.Util.StringUtils.HasText(System.String)">
            <summary>
            Checks if a <see cref="T:System.String"/> has text.
            </summary>
            <remarks>
            <p>
            More specifically, returns <see langword="true"/> if the string is
            not <see langword="null"/>, it's <see cref="P:System.String.Length"/> is >
            zero <c>(0)</c>, and it has at least one non-whitespace character.
            </p>
            </remarks>
            <param name="target">
            The string to check, may be <see langword="null"/>.
            </param>
            <returns>
            <see langword="true"/> if the <paramref name="target"/> is not
            <see langword="null"/>,
            <see cref="P:System.String.Length"/> > zero <c>(0)</c>, and does not consist
            solely of whitespace.
            </returns>
            <example>
            <code language="C#">
            StringUtils.HasText(null) = false
            StringUtils.HasText("") = false
            StringUtils.HasText(" ") = false
            StringUtils.HasText("12345") = true
            StringUtils.HasText(" 12345 ") = true
            </code>
            </example>
        </member>
        <member name="T:YSWL.OAuth.Util.UriTemplate">
            <summary>
            Represents a URI template. An URI template is a URI-like String that contained variables 
            marked of in braces {}, which can be expanded to produce a URI.
            </summary>
            <author>Arjen Poutsma</author>
            <author>Juergen Hoeller</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="P:YSWL.OAuth.Util.UriTemplate.VariableNames">
            <summary>
            Gets the names of the variables in the template, in order.
            </summary>
        </member>
        <member name="M:YSWL.OAuth.Util.UriTemplate.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:YSWL.OAuth.Util.UriTemplate"/> with the given URI String.
            </summary>
            <param name="uriTemplate">The URI template string.</param>
        </member>
        <member name="M:YSWL.OAuth.Util.UriTemplate.Expand(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Given the dictionary of variables, expands this template into a full URI. 
            The dictionary keys represent variable names, the dicitonary values variable values. 
            The order of variables is not significant.
            </summary>
            <example>
            <code>
            UriTemplate template = new UriTemplate("http://example.com/hotels/{hotel}/bookings/{booking}");
            IDictionary&lt;string, object&gt; uriVariables = new Dictionary&lt;string, object&gt;();
            uriVariables.Add("booking", "42");
            uriVariables.Add("hotel", 1);
            Console.Out.WriteLine(template.Expand(uriVariables));
            </code>
            will print: <blockquote>http://example.com/hotels/1/bookings/42</blockquote>
            </example>
            <param name="uriVariables">The dictionary of URI variables.</param>
            <returns>The expanded URI</returns>
        </member>
        <member name="M:YSWL.OAuth.Util.UriTemplate.Expand(System.Object[])">
            <summary>
            Given an array of variables, expands this template into a full URI. 
            The array represent variable values. The order of variables is significant.
            </summary>
            <example>
            <code>
            UriTemplate template = new UriTemplate("http://example.com/hotels/{hotel}/bookings/{booking}");
            Console.Out.WriteLine(template.Expand(1, "42"));
            </code>
            will print: <blockquote>http://example.com/hotels/1/bookings/42</blockquote>
            </example>
            <param name="uriVariableValues">The array of URI variables.</param>
            <returns>The expanded URI</returns>
        </member>
        <member name="M:YSWL.OAuth.Util.UriTemplate.Matches(System.String)">
            <summary>
            Indicates whether the given URI matches this template.
            </summary>
            <param name="uri">The URI to match to.</param>
            <returns><see langword="true"/> if it matches; otherwise <see langword="false"/></returns>
        </member>
        <member name="M:YSWL.OAuth.Util.UriTemplate.Match(System.String)">
            <summary>
            Match the given URI to a dictionary of variable values. Keys in the returned map are variable names, 
            values are variable values, as occurred in the given URI
            </summary>
            <example>
            <code>
            UriTemplate template = new UriTemplate("http://example.com/hotels/{hotel}/bookings/{booking}");
            Console.Out.WriteLine(template.Match("http://example.com/hotels/1/bookings/42"));
            </code>
            will print: <blockquote>{hotel=1, booking=42}</blockquote>
            </example>
            <param name="uri">The URI to match to.</param>
            <returns>A dictionary of variable values.</returns>
        </member>
        <member name="M:YSWL.OAuth.Util.UriTemplate.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object."/>
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object."/>.
            </returns>
        </member>
        <member name="T:YSWL.OAuth.v1.AbstractOAuth1ApiBinding">
            <summary>
            Base class for OAuth1-based provider API bindings.
            </summary>
            <author>Craig Walls</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="P:YSWL.OAuth.v1.AbstractOAuth1ApiBinding.RestTemplate">
            <summary>
            Gets a reference to the REST client backing this API binding and used to perform API calls. 
            </summary>
            <remarks>
            Callers may use the RestTemplate to invoke other API operations not yet modeled by the binding interface. 
            Callers may also modify the configuration of the RestTemplate to support unit testing the API binding with a mock server in a test environment. 
            During construction, subclasses may apply customizations to the RestTemplate needed to invoke a specific API.
            </remarks>
        </member>
        <member name="M:YSWL.OAuth.v1.AbstractOAuth1ApiBinding.#ctor">
            <summary>
            Constructs the API template without user authorization. 
            This is useful for accessing operations on a provider's API that do not require user authorization.
            </summary>
        </member>
        <member name="M:YSWL.OAuth.v1.AbstractOAuth1ApiBinding.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Constructs the API template with OAuth credentials necessary to perform operations on behalf of a user.
            </summary>
            <param name="consumerKey">The application's consumer key.</param>
            <param name="consumerSecret">The application's consumer secret.</param>
            <param name="accessToken">The access token.</param>
            <param name="accessTokenSecret">The access token secret.</param>
        </member>
        <member name="P:YSWL.OAuth.v1.AbstractOAuth1ApiBinding.IsAuthorized">
            <summary>
            Returns true if this API binding has been authorized on behalf of a specific user.
            </summary>
            <remarks>
            If so, calls to the API are signed with the user's authorization credentials, indicating an application is invoking the API on a user's behalf. 
            If not, API calls do not contain any user authorization information. 
            Callers can use this status flag to determine if API operations requiring authorization can be invoked.
            </remarks>
        </member>
        <member name="M:YSWL.OAuth.v1.AbstractOAuth1ApiBinding.GetMessageConverters">
            <summary>
            Returns a list of <see cref="T:YSWL.OAuth.Http.Converters.IHttpMessageConverter"/>s to be used by the internal <see cref="P:YSWL.OAuth.v1.AbstractOAuth1ApiBinding.RestTemplate"/>.
            </summary>
            <remarks>
            Override this method to add additional message converters or to replace the default list of message converters. 
            By default, this includes a <see cref="T:YSWL.OAuth.Http.Converters.StringHttpMessageConverter"/> and a <see cref="T:YSWL.OAuth.Http.Converters.FormHttpMessageConverter"/>.
            </remarks>
            <returns>
            The list of <see cref="T:YSWL.OAuth.Http.Converters.IHttpMessageConverter"/>s to be used by the internal <see cref="P:YSWL.OAuth.v1.AbstractOAuth1ApiBinding.RestTemplate"/>.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.v1.AbstractOAuth1ApiBinding.ConfigureRestTemplate(YSWL.OAuth.Rest.Client.RestTemplate)">
            <summary>
            Enables customization of the RestTemplate used to consume provider API resources.
            </summary>
            <remarks>
            An example use case might be to configure a custom error handler. 
            Note that this method is called after the RestTemplate has been configured with the message converters returned from GetMessageConverters().
            </remarks>
            <param name="restTemplate">The RestTemplate to configure.</param>
        </member>
        <member name="T:YSWL.OAuth.v1.AbstractOAuth1ServiceProvider`1">
            <summary>
            Base class for ServiceProviders that use the OAuth1 protocol.
            OAuth1-based ServiceProvider implementations should extend and implement <see cref="M:GetApi(string, string)"/>.
            </summary>
            <author>Keith Donald</author>
            <author>Bruno Baia (.NET)</author>
            <typeparam name="T">The service API type</typeparam>
        </member>
        <member name="P:YSWL.OAuth.v1.AbstractOAuth1ServiceProvider`1.ConsumerKey">
            <summary>
            Gets the consumer (or client) key assigned to the application by the provider.
            </summary>
            <remarks>
            Exposed to subclasses to support constructing service API instances.
            </remarks>
        </member>
        <member name="P:YSWL.OAuth.v1.AbstractOAuth1ServiceProvider`1.ConsumerSecret">
            <summary>
            Gets the consumer (or client) secret assigned to the application by the provider.
            </summary>
            <remarks>
            Exposed to subclasses to support constructing service API instances.
            </remarks>
        </member>
        <member name="M:YSWL.OAuth.v1.AbstractOAuth1ServiceProvider`1.#ctor(System.String,System.String,YSWL.OAuth.v1.IOAuth1Operations)">
            <summary>
            Creates a new AbstractOAuth1ServiceProvider.
            </summary>
            <param name="consumerKey">The consumer (or client) key assigned to the application by the provider.</param>
            <param name="consumerSecret">the consumer (or client) secret assigned to the application by the provider.</param>
            <param name="oauth1Operations">
            The OAuth2Operations template for conducting the OAuth 2 flow with the provider.
            </param>
        </member>
        <member name="P:YSWL.OAuth.v1.AbstractOAuth1ServiceProvider`1.OAuthOperations">
            <summary>
            Gets the service interface for carrying out the "OAuth dance" with this provider. 
            The result of the OAuth dance is an access token that can be used to obtain an API binding with <see cref="M:GetApi(string, string)"/> method.
            </summary>
        </member>
        <member name="M:YSWL.OAuth.v1.AbstractOAuth1ServiceProvider`1.GetApi(System.String,System.String)">
            <summary>
            Returns an API interface allowing the client application to access protected resources on behalf of a user.
            </summary>
            <param name="accessToken">The API access token.</param>
            <param name="secret">The access token secret.</param>
            <returns>A binding to the service provider's API.</returns>
        </member>
        <member name="T:YSWL.OAuth.v1.AuthorizedRequestToken">
            <summary>
            An OAuth 1.0 request token that has been authorized by the user.
            </summary>
            <remarks>
            Constructed after the user grants the consumer application access to their data hosted at the service provider.
            This is typically achieved by the user clicking "Allow" over at the provider's site.
            The service provider returns a Verifier string in the authorization callback that must also be submitted in the access token request.
            </remarks>
            <author>Keith Donald</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="M:YSWL.OAuth.v1.AuthorizedRequestToken.#ctor(YSWL.OAuth.v1.OAuthToken,System.String)">
            <summary>
            Creates an authorized request token.
            </summary>
            <param name="requestToken">The request token object.</param>
            <param name="verifier">The access token verifier.</param>
        </member>
        <member name="P:YSWL.OAuth.v1.AuthorizedRequestToken.Value">
            <summary>
            Gets the request token value.
            </summary>
        </member>
        <member name="P:YSWL.OAuth.v1.AuthorizedRequestToken.Secret">
            <summary>
            Gets the request token secret.
            </summary>
        </member>
        <member name="P:YSWL.OAuth.v1.AuthorizedRequestToken.Verifier">
            <summary>
            Gets the verifier string generated by the provider.
            </summary>
        </member>
        <member name="T:YSWL.OAuth.v1.IOAuth1Operations">
            <summary>
            A service interface for the OAuth 1 flow. 
            This interface allows you to conduct the "OAuth dance" with a service provider on behalf of a user.
            </summary>
            <author>Keith Donald</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="P:YSWL.OAuth.v1.IOAuth1Operations.Version">
            <summary>
            Gets the version of OAuth1 implemented by this operations instance.
            </summary>
        </member>
        <member name="M:YSWL.OAuth.v1.IOAuth1Operations.BuildAuthorizeUrl(System.String,YSWL.OAuth.v1.OAuth1Parameters)">
            <summary>
            Construct the URL to redirect the user to for authorization.
            </summary>
            <param name="requestToken">The request token value, to be encoded in the authorize URL.</param>
            <param name="parameters">Parameters to pass to the provider in the authorize URL. May be null.</param>
            <returns>The absolute authorize URL to redirect the user to for authorization.</returns>
        </member>
        <member name="M:YSWL.OAuth.v1.IOAuth1Operations.BuildAuthenticateUrl(System.String,YSWL.OAuth.v1.OAuth1Parameters)">
            <summary>
            Construct the URL to redirect the user to for authentication. 
            The authenticate URL differs from the authorizationUrl slightly in that it does not require the user to authorize the app multiple times. 
            This provides a better user experience for "Sign in with Provider" scenarios.
            </summary>
            <param name="requestToken">The request token value, to be encoded in the authorize URL.</param>
            <param name="parameters">Parameters to pass to the provider in the authenticate URL. May be null.</param>
            <returns>The absolute authenticate URL to redirect the user to for authentication.</returns>
        </member>
        <member name="M:YSWL.OAuth.v1.IOAuth1Operations.FetchRequestTokenAsync(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Asynchronously begin a new authorization flow by fetching a new request token from this service provider.
            </summary>
            <remarks>
            The request token should be stored in the user's session up until the authorization callback is made 
            and it's time to exchange it for an <see cref="M:ExchangeForAccessToken(AuthorizedRequestToken, NameValueCollection)">access token</see>.
            </remarks>
            <param name="callbackUrl">
            The URL the provider should redirect to after the member authorizes the connection. Ignored for OAuth 1.0 providers.
            </param>
            <param name="additionalParameters">
            Any additional query parameters to be sent when fetching the request token.
            </param>
            <returns>
            A <code>Task&lt;T&gt;</code> that represents the asynchronous operation that can return 
            the temporary request token use for authorization and exchanged for an access token.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.v1.IOAuth1Operations.ExchangeForAccessTokenAsync(YSWL.OAuth.v1.AuthorizedRequestToken,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Asynchronously exchange the authorized request token for an access token.
            </summary>
            <param name="requestToken">
            An authorized request token and verifier. The verifier will be ignored for OAuth 1.0 providers.
            </param>
            <param name="additionalParameters">
            Any additional query parameters to be sent when exchanching for an access token.
            </param>
            <returns>
            A <code>Task&lt;T&gt;</code> that represents the asynchronous operation that can return the access token.
            </returns>
        </member>
        <member name="T:YSWL.OAuth.v1.IOAuth1ServiceProvider`1">
            <summary>
            A ServiceProvider that uses the OAuth 1.0 protocol.
            </summary>
            <typeparam name="T">The service provider's API type.</typeparam>
            <author>Keith Donald</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="P:YSWL.OAuth.v1.IOAuth1ServiceProvider`1.OAuthOperations">
            <summary>
            Gets the service interface for carrying out the "OAuth dance" with this provider. 
            The result of the OAuth dance is an access token that can be used to obtain an API binding with <see cref="M:GetApi(string,string)"/> method.
            </summary>
        </member>
        <member name="M:YSWL.OAuth.v1.IOAuth1ServiceProvider`1.GetApi(System.String,System.String)">
            <summary>
            Returns an API interface allowing the client application to access protected resources on behalf of a user.
            </summary>
            <param name="accessToken">The API access token.</param>
            <param name="secret">The access token secret.</param>
            <returns>A binding to the service provider's API.</returns>
        </member>
        <member name="T:YSWL.OAuth.v1.OAuth1Parameters">
            <summary>
            Parameters for building an OAuth1 authorize URL.
            </summary>
            <author>Keith Donald</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="M:YSWL.OAuth.v1.OAuth1Parameters.#ctor">
            <summary>
            Creates a new, empty instance of the <see cref="T:YSWL.OAuth.v1.OAuth1Parameters"/> class. 
            Use properties to add parameters after construction.
            </summary>
        </member>
        <member name="M:YSWL.OAuth.v1.OAuth1Parameters.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the <see cref="T:YSWL.OAuth.v1.OAuth1Parameters"/> class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data 
            about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information 
            about the source or destination.
            </param>
        </member>
        <member name="P:YSWL.OAuth.v1.OAuth1Parameters.CallbackUrl">
            <summary>
            Gets or sets the authorization callback url.
            <para/>
            This value must be included for OAuth 1.0 providers (and NOT for OAuth 1.0a).
            </summary>
        </member>
        <member name="M:YSWL.OAuth.v1.OAuth1Parameters.GetFirst(System.String)">
            <summary>
            Returns the first value for the given key.
            </summary>
            <param name="key">The key.</param>
            <returns>The first value for the specified key, or <see langword="null"/>.</returns>
        </member>
        <member name="T:YSWL.OAuth.v1.OAuth1RequestInterceptor">
            <summary>
            <see cref="T:YSWL.OAuth.Http.Client.Interceptor.IClientHttpRequestBeforeInterceptor"/> implementation that performs OAuth1 request signing 
            before a request for a protected resource is executed.
            </summary>
            <author>Keith Donald</author>
            <author>Craig Walls</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="M:YSWL.OAuth.v1.OAuth1RequestInterceptor.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Creates an OAuth 1.0 protected resource request interceptor.
            </summary>
            <param name="consumerKey">The application's consumer key.</param>
            <param name="consumerSecret">The application's consumer secret.</param>
            <param name="accessToken">The access token.</param>
            <param name="accessTokenSecret">The access token secret.</param>
        </member>
        <member name="M:YSWL.OAuth.v1.OAuth1RequestInterceptor.BeforeExecute(YSWL.OAuth.Http.Client.Interceptor.IClientHttpRequestContext)">
            <summary>
            The callback method before the given request is executed.
            </summary>
            <remarks>
            This implementation adds the "Authorization" header to the request.
            </remarks>
            <param name="request">The request context.</param>
        </member>
        <member name="T:YSWL.OAuth.v1.OAuth1Template">
            <summary>
            <see cref="T:YSWL.OAuth.v1.IOAuth1Operations"/> implementation that uses REST template to make the OAuth calls.
            </summary>
            <author>Keith Donald</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="P:YSWL.OAuth.v1.OAuth1Template.RestTemplate">
            <summary>
            Gets a reference to the REST client used to perform OAuth1 calls. 
            </summary>
        </member>
        <member name="M:YSWL.OAuth.v1.OAuth1Template.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates an OAuth1Template in OAuth 1.0a mode.
            </summary>
            <param name="consumerKey">The application's consumer key.</param>
            <param name="consumerSecret">The application's consumer secret.</param>
            <param name="requestTokenUrl">The request token URL.</param>
            <param name="authorizeUrl">The authorize URL.</param>
            <param name="accessTokenUrl">The access token URL.</param>
        </member>
        <member name="M:YSWL.OAuth.v1.OAuth1Template.#ctor(System.String,System.String,System.String,System.String,System.String,YSWL.OAuth.v1.OAuth1Version)">
            <summary>
            Creates an OAuth1Template.
            </summary>
            <param name="consumerKey">The application's consumer key.</param>
            <param name="consumerSecret">The application's consumer secret.</param>
            <param name="requestTokenUrl">The request token URL.</param>
            <param name="authorizeUrl">The authorize URL.</param>
            <param name="accessTokenUrl">The access token URL.</param>
            <param name="version">The version of OAuth 1, either 10 or 10a.</param>
        </member>
        <member name="M:YSWL.OAuth.v1.OAuth1Template.#ctor(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates an OAuth1Template in OAuth 1.0a mode.
            </summary>
            <param name="consumerKey">The application's consumer key.</param>
            <param name="consumerSecret">The application's consumer secret.</param>
            <param name="requestTokenUrl">The request token URL.</param>
            <param name="authorizeUrl">The authorize URL.</param>
            <param name="authenticateUrl">The authenticate URL.</param>
            <param name="accessTokenUrl">The access token URL.</param>
        </member>
        <member name="M:YSWL.OAuth.v1.OAuth1Template.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,YSWL.OAuth.v1.OAuth1Version)">
            <summary>
            Creates an OAuth1Template.
            </summary>
            <param name="consumerKey">The application's consumer key.</param>
            <param name="consumerSecret">The application's consumer secret.</param>
            <param name="requestTokenUrl">The request token URL.</param>
            <param name="authorizeUrl">The authorize URL.</param>
            <param name="authenticateUrl">The authenticate URL.</param>
            <param name="accessTokenUrl">The access token URL.</param>
            <param name="version">The version of OAuth 1, either 10 or 10a.</param>
        </member>
        <member name="P:YSWL.OAuth.v1.OAuth1Template.Version">
            <summary>
            Gets the version of OAuth1 implemented by this operations instance.
            </summary>
        </member>
        <member name="M:YSWL.OAuth.v1.OAuth1Template.BuildAuthorizeUrl(System.String,YSWL.OAuth.v1.OAuth1Parameters)">
            <summary>
            Construct the URL to redirect the user to for authorization.
            </summary>
            <param name="requestToken">The request token value, to be encoded in the authorize URL</param>
            <param name="parameters">Parameters to pass to the provider in the authorize URL. May be null.</param>
            <returns>The absolute authorize URL to redirect the user to for authorization</returns>
        </member>
        <member name="M:YSWL.OAuth.v1.OAuth1Template.BuildAuthenticateUrl(System.String,YSWL.OAuth.v1.OAuth1Parameters)">
            <summary>
            Construct the URL to redirect the user to for authentication. 
            The authenticate URL differs from the authorizationUrl slightly in that it does not require the user to authorize the app multiple times. 
            This provides a better user experience for "Sign in with Provider" scenarios.
            </summary>
            <param name="requestToken">The request token value, to be encoded in the authorize URL</param>
            <param name="parameters">Parameters to pass to the provider in the authenticate URL. May be null.</param>
            <returns>The absolute authenticate URL to redirect the user to for authentication</returns>
        </member>
        <member name="M:YSWL.OAuth.v1.OAuth1Template.FetchRequestTokenAsync(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Asynchronously begin a new authorization flow by fetching a new request token from this service provider.
            </summary>
            <remarks>
            The request token should be stored in the user's session up until the authorization callback is made 
            and it's time to exchange it for an <see cref="M:ExchangeForAccessToken(AuthorizedRequestToken, NameValueCollection)">access token</see>.
            </remarks>
            <param name="callbackUrl">
            The URL the provider should redirect to after the member authorizes the connection. Ignored for OAuth 1.0 providers.
            </param>
            <param name="additionalParameters">
            Any additional query parameters to be sent when fetching the request token.
            </param>
            <returns>
            A <code>Task&lt;T&gt;</code> that represents the asynchronous operation that can return 
            the temporary request token use for authorization and exchanged for an access token.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.v1.OAuth1Template.ExchangeForAccessTokenAsync(YSWL.OAuth.v1.AuthorizedRequestToken,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Asynchronously exchange the authorized request token for an access token.
            </summary>
            <param name="requestToken">
            An authorized request token and verifier. The verifier will be ignored for OAuth 1.0 providers
            </param>
            <param name="additionalParameters">
            Any additional query parameters to be sent when exchanching for an access token.
            </param>
            <returns>
            A <code>Task&lt;T&gt;</code> that represents the asynchronous operation that can return the access token.
            </returns>
        </member>
        <member name="P:YSWL.OAuth.v1.OAuth1Template.ConsumerKey">
            <summary>
            Gets the consumer key to be read by subclasses. 
            <para/>
            This may be useful when overriding <see cref="M:AddCustomAuthorizationParameters"/> and 
            the consumer key is required in the authorization request.
            </summary>
        </member>
        <member name="M:YSWL.OAuth.v1.OAuth1Template.CreateOAuthToken(System.String,System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Creates an <see cref="T:YSWL.OAuth.v1.OAuthToken"/> given the response from the request token or access token exchange with the provider. 
            May be overridden to create a custom <see cref="T:YSWL.OAuth.v1.OAuthToken"/>.
            </summary>
            <param name="tokenValue">The token value received from the provider.</param>
            <param name="tokenSecret">The token secret received from the provider.</param>
            <param name="response">All parameters from the response received in the request/access token exchange.</param>
            <returns>An <see cref="T:YSWL.OAuth.v1.OAuthToken"/></returns>
        </member>
        <member name="M:YSWL.OAuth.v1.OAuth1Template.AddCustomAuthorizationParameters(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Allows to add custom authorization parameters to the authorization URL.
            <para/>
            May be overridden to return any provider-specific parameters that must be passed in the request to the authorization URL.
            </summary>
            <remarks>
            Default implementation adds no parameters.
            </remarks>
        </member>
        <member name="M:YSWL.OAuth.v1.OAuth1Template.CreateRestTemplate">
            <summary>
            Creates the <see cref="P:YSWL.OAuth.v1.OAuth1Template.RestTemplate"/> used to communicate with the provider's OAuth1 API.
            </summary>
            <remarks>
            This implementation creates a RestTemplate with a minimal set of HTTP message converters: <see cref="T:YSWL.OAuth.Http.Converters.FormHttpMessageConverter"/>. 
            May be overridden to customize how the RestTemplate is created. 
            For example, if the provider returns data in some format other than JSON for form-encoded, you might override to register an appropriate message converter. 
            </remarks>
            <returns>The RestTemplate used to perform OAuth1 calls.</returns>
        </member>
        <member name="T:YSWL.OAuth.v1.OAuth1Version">
            <summary>
            Various versions of the OAuth1 Core specification.
            </summary>
            <remarks>
            Used by <see cref="T:YSWL.OAuth.v1.OAuth1Template"/> to vary behavior its by the configured version.
            </remarks>
            <author>Keith Donald</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="F:YSWL.OAuth.v1.OAuth1Version.Core10">
            <summary>
            OAuth Core Version 1.0.
            </summary>       
        </member>
        <member name="F:YSWL.OAuth.v1.OAuth1Version.Core10a">
            <summary>
            OAuth Core Version 1.0 Revision A.
            </summary>
        </member>
        <member name="T:YSWL.OAuth.v1.OAuthToken">
            <summary>
            Holds an OAuth token and secret. 
            Used for both the request token and access token.
            </summary>
            <author>Keith Donald</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="M:YSWL.OAuth.v1.OAuthToken.#ctor(System.String,System.String)">
            <summary>
            Creates a new OAuth token with a token value and secret.
            </summary>
            <param name="value">The token value.</param>
            <param name="secret">The token secret.</param>
        </member>
        <member name="P:YSWL.OAuth.v1.OAuthToken.Value">
            <summary>
            Gets the token value.
            </summary>
        </member>
        <member name="P:YSWL.OAuth.v1.OAuthToken.Secret">
            <summary>
            Gets the token secret.
            </summary>
        </member>
        <member name="T:YSWL.OAuth.v2.AbstractOAuth2ApiBinding">
            <summary>
            Base class for OAuth2-based provider API bindings.
            </summary>
            <author>Craig Walls</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="P:YSWL.OAuth.v2.AbstractOAuth2ApiBinding.RestTemplate">
            <summary>
            Gets a reference to the REST client backing this API binding and used to perform API calls. 
            </summary>
            <remarks>
            Callers may use the RestTemplate to invoke other API operations not yet modeled by the binding interface. 
            Callers may also modify the configuration of the RestTemplate to support unit testing the API binding with a mock server in a test environment. 
            During construction, subclasses may apply customizations to the RestTemplate needed to invoke a specific API.
            </remarks>
        </member>
        <member name="M:YSWL.OAuth.v2.AbstractOAuth2ApiBinding.#ctor">
            <summary>
            Constructs the API template without user authorization. 
            This is useful for accessing operations on a provider's API that do not require user authorization.
            </summary>
        </member>
        <member name="M:YSWL.OAuth.v2.AbstractOAuth2ApiBinding.#ctor(YSWL.OAuth.v2.AccessGrant)">
            <summary>
            Constructs the API template with OAuth credentials necessary to perform operations on behalf of a user.
            </summary>
            <param name="accessToken">The access token.</param>
        </member>
        <member name="P:YSWL.OAuth.v2.AbstractOAuth2ApiBinding.IsAuthorized">
            <summary>
            Returns true if this API binding has been authorized on behalf of a specific user.
            </summary>
            <remarks>
            If so, calls to the API are signed with the user's authorization credentials, indicating an application is invoking the API on a user's behalf. 
            If not, API calls do not contain any user authorization information. 
            Callers can use this status flag to determine if API operations requiring authorization can be invoked.
            </remarks>
        </member>
        <member name="M:YSWL.OAuth.v2.AbstractOAuth2ApiBinding.GetOAuth2Version">
            <summary>
            Returns the version of OAuth2 the API implements. 
            </summary>
            <remarks>
            Subclasses may override to return another version.
            </remarks>
            <returns>
            By default, returns OAuth2Version.Bearer indicating versions of OAuth2 that apply the bearer token scheme.
            </returns>
            <see cref="T:YSWL.OAuth.v2.OAuth2Version"/>
        </member>
        <member name="M:YSWL.OAuth.v2.AbstractOAuth2ApiBinding.GetMessageConverters">
            <summary>
            Returns a list of <see cref="T:YSWL.OAuth.Http.Converters.IHttpMessageConverter"/>s to be used by the internal <see cref="P:YSWL.OAuth.v2.AbstractOAuth2ApiBinding.RestTemplate"/>.
            </summary>
            <remarks>
            Override this method to add additional message converters or to replace the default list of message converters. 
            By default, this includes a <see cref="T:YSWL.OAuth.Http.Converters.StringHttpMessageConverter"/> and a <see cref="T:YSWL.OAuth.Http.Converters.FormHttpMessageConverter"/>.
            </remarks>
            <returns>
            The list of <see cref="T:YSWL.OAuth.Http.Converters.IHttpMessageConverter"/>s to be used by the internal <see cref="P:YSWL.OAuth.v2.AbstractOAuth2ApiBinding.RestTemplate"/>.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.v2.AbstractOAuth2ApiBinding.ConfigureRestTemplate(YSWL.OAuth.Rest.Client.RestTemplate)">
            <summary>
            Enables customization of the RestTemplate used to consume provider API resources.
            </summary>
            <remarks>
            An example use case might be to configure a custom error handler. 
            Note that this method is called after the RestTemplate has been configured with the message converters returned from GetMessageConverters().
            </remarks>
            <param name="restTemplate">The RestTemplate to configure.</param>
        </member>
        <member name="T:YSWL.OAuth.v2.AbstractOAuth2ServiceProvider`1">
            <summary>
            Base class for ServiceProviders that use the OAuth2 protocol.
            OAuth2-based ServiceProvider implementations should extend and implement <see cref="M:GetApi(string)"/>.
            </summary>
            <author>Keith Donald</author>
            <author>Bruno Baia (.NET)</author>
            <typeparam name="T">The service API type.</typeparam>
        </member>
        <member name="M:YSWL.OAuth.v2.AbstractOAuth2ServiceProvider`1.#ctor(YSWL.OAuth.v2.IOAuth2Operations)">
            <summary>
            Creates a new AbstractOAuth2ServiceProvider.
            </summary>
            <param name="oauth2Operations">
            The OAuth2Operations template for conducting the OAuth 2 flow with the provider.
            </param>
        </member>
        <member name="P:YSWL.OAuth.v2.AbstractOAuth2ServiceProvider`1.OAuthOperations">
            <summary>
            Gets the service interface for carrying out the "OAuth dance" with this provider. 
            The result of the OAuth dance is an access token that can be used to obtain an API binding with <see cref="M:GetApi(string)"/> method.
            </summary>
        </member>
        <member name="M:YSWL.OAuth.v2.AbstractOAuth2ServiceProvider`1.GetApi(YSWL.OAuth.v2.AccessGrant)">
            <summary>
            Returns an API interface allowing the client application to access protected resources on behalf of a user.
            </summary>
            <param name="accessGrant">The API access token.</param>
            <returns>A binding to the service provider's API.</returns>
        </member>
        <member name="T:YSWL.OAuth.v2.AccessGrant">
            <summary>
            Represents an OAuth2 access token.
            </summary>
            <author>Keith Donald</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="M:YSWL.OAuth.v2.AccessGrant.#ctor(System.String)">
            <summary>
            Creates a new OAuth2 access token.
            </summary>
            <param name="accessToken">The access token value.</param>
        </member>
        <member name="M:YSWL.OAuth.v2.AccessGrant.#ctor(System.String,System.String[])">
            <summary>
            Creates a new OAuth2 access token.
            </summary>
            <param name="accessToken">The access token value.</param>
            <param name="extraData">The extra data of the extra</param>
        </member>
        <member name="M:YSWL.OAuth.v2.AccessGrant.#ctor(YSWL.OAuth.v2.AccessGrant,System.String[])">
            <summary>
            Creates a new OAuth2 access token.
            </summary>
            <param name="accessGrant">The AccessGrant.</param>
            <param name="extraData">The extra data of the extra</param>
        </member>
        <member name="M:YSWL.OAuth.v2.AccessGrant.#ctor(System.String,System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Creates a new OAuth2 access token.
            </summary>
            <param name="accessToken">The access token value.</param>
            <param name="scope">The scope of the access grant.</param>
            <param name="refreshToken">The refresh token that can be used to renew the access token.</param>
            <param name="expiresIn">The lifetime in seconds of the access token from the time the response was generated.</param>
        </member>
        <member name="M:YSWL.OAuth.v2.AccessGrant.#ctor(System.String,System.String,System.String,System.String[],System.Nullable{System.DateTime})">
            <summary>
            Creates a new OAuth2 access token.
            </summary>
            <param name="accessToken">The access token value.</param>
            <param name="scope">The scope of the access grant.</param>
            <param name="refreshToken">The refresh token that can be used to renew the access token.</param>
            <param name="extraData">The extra data of the extra</param>
            <param name="expireTime">The lifetime in seconds of the access token from the time the response was generated.</param>
        </member>
        <member name="M:YSWL.OAuth.v2.AccessGrant.#ctor(System.String,System.String,System.String,System.Nullable{System.Int32},System.String[])">
            <summary>
            Creates a new OAuth2 access token.
            </summary>
            <param name="accessToken">The access token value.</param>
            <param name="scope">The scope of the access grant.</param>
            <param name="refreshToken">The refresh token that can be used to renew the access token.</param>
            <param name="expiresIn">The lifetime in seconds of the access token from the time the response was generated.</param>
            <param name="extraData">The extra data of the extra</param>
        </member>
        <member name="P:YSWL.OAuth.v2.AccessGrant.AccessToken">
            <summary>
            Gets the access token value.
            </summary>
        </member>
        <member name="P:YSWL.OAuth.v2.AccessGrant.Scope">
            <summary>
            Gets the scope of the access grant.
            May be null if the provider doesn't return the granted scope in the response.
            </summary>
        </member>
        <member name="P:YSWL.OAuth.v2.AccessGrant.RefreshToken">
            <summary>
            Gets the refresh token that can be used to renew the access token. 
            May be null if the provider does not support refresh tokens.
            </summary>
        </member>
        <member name="P:YSWL.OAuth.v2.AccessGrant.ExpireTime">
            <summary>
            Gets the <see cref="T:System.DateTime"/> (in UTC) when this access grant will expire. 
            May be null if the token is non-expiring.
            </summary>
        </member>
        <member name="P:YSWL.OAuth.v2.AccessGrant.ExtraData">
            <summary>
            Gets the extradata of the access grant.
            May be null if the provider doesn't return the granted extradata in the response.
            </summary>
        </member>
        <member name="T:YSWL.OAuth.v2.GrantType">
            <summary>
            OAuth2 supports two types of authorization flow, 
            typically referred to as "Client-side" and "Server-side".
            </summary>
            <author>Roy Clarkson</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="F:YSWL.OAuth.v2.GrantType.AuthorizationCode">
            <summary>
            Denotes the server-side authorization flow, and is 
            associated with the response_type=code parameter value.
            </summary>
        </member>
        <member name="F:YSWL.OAuth.v2.GrantType.ImplicitGrant">
            <summary>
            Denotes the client-side authorization flow and is 
            associated with the response_type=token parameter value.
            </summary>
        </member>
        <member name="T:YSWL.OAuth.v2.IOAuth2Operations">
            <summary>
            A service interface for the OAuth 2 flow. 
            This interface allows you to conduct the "OAuth dance" with a service provider on behalf of a user.
            </summary>
            <author>Keith Donald</author>
            <author>Roy Clarkson</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="M:YSWL.OAuth.v2.IOAuth2Operations.BuildAuthorizeUrl(YSWL.OAuth.v2.GrantType,YSWL.OAuth.v2.OAuth2Parameters)">
            <summary>
            Constructs the URL to redirect the user to for authorization.
            </summary>
            <param name="grantType">
            Specifies whether to use client-side or server-side OAuth flow.
            </param>
            <param name="parameters">
            Authorization parameters needed to build the URL. May be null.
            </param>
            <returns>
            The absolute authorize URL to redirect the user to for authorization.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.v2.IOAuth2Operations.BuildAuthenticateUrl(YSWL.OAuth.v2.GrantType,YSWL.OAuth.v2.OAuth2Parameters)">
            <summary>
            Constructs the URL to redirect the user to for authentication. 
            <para/>
            The authenticate URL differs from the authorizationUrl slightly in that it does not require the user to authorize the app multiple times.
            This provides a better user experience for "Sign in with Provider" scenarios.
            </summary>
            <param name="grantType">
            Specifies whether to use client-side or server-side OAuth flow.
            </param>
            <param name="parameters">
            Authorization parameters needed to build the URL. May be null.
            </param>
            <returns>The absolute authenticate URL to redirect the user to for authorization.</returns>
        </member>
        <member name="M:YSWL.OAuth.v2.IOAuth2Operations.ExchangeForAccessAsync(System.String,System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Asynchronously exchanges the authorization code for an access grant.
            </summary>
            <param name="authorizationCode">
            The authorization code returned by the provider upon user authorization.
            </param>
            <param name="redirectUri">
            The authorization callback url; this value must match the redirectUri registered with the provider.
            </param>
            <param name="additionalParameters">
            Any additional parameters to be sent when exchanging the authorization code for an access grant. Should not be encoded.
            </param>
            <returns>
            A <code>Task&lt;T&gt;</code> that represents the asynchronous operation that can return the OAuth2 access token.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.v2.IOAuth2Operations.ExchangeCredentialsForAccessAsync(System.String,System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Asynchronously exchanges user credentials for an access grant using OAuth2's Resource Owner Credentials Grant (aka, "password" grant).
            </summary>
            <param name="username">The user's username on the provider.</param>
            <param name="password">The user's password on the provider.</param>
            <param name="additionalParameters">
            Any additional parameters to be sent when exchanging the credentials for an access grant. Should not be encoded.
            </param>
            <returns>
            A <code>Task&lt;T&gt;</code> that represents the asynchronous operation that can return the OAuth2 access token.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.v2.IOAuth2Operations.RefreshAccessAsync(System.String,System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Asynchronously refreshes a previous access grant.
            </summary>
            <param name="refreshToken">The refresh token from the previous access grant.</param>
            <param name="scope">
            Optional scope to narrow to when refreshing access; if null, the existing scope is preserved.
            </param>
            <param name="additionalParameters">
            Any additional parameters to be sent when refreshing a previous access grant. Should not be encoded.
            </param>
            <returns>
            A <code>Task&lt;T&gt;</code> that represents the asynchronous operation that can return the OAuth2 access token.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.v2.IOAuth2Operations.RefreshAccessAsync(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Asynchronously refreshes a previous access grant.
            </summary>
            <param name="refreshToken">The refresh token from the previous access grant.</param>
            <param name="additionalParameters">
            Any additional parameters to be sent when refreshing a previous access grant. Should not be encoded.
            </param>
            <returns>
            A <code>Task&lt;T&gt;</code> that represents the asynchronous operation that can return the OAuth2 access token.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.v2.IOAuth2Operations.AuthenticateClientAsync">
            <summary>
            Asynchronously retrieves the client access grant using OAuth 2 client credentials flow.
            </summary>
            <returns>
            A <code>Task&lt;T&gt;</code> that represents the asynchronous operation that can return 
            the OAuth2 access token when the client is acting on its own behalf.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.v2.IOAuth2Operations.AuthenticateClientAsync(System.String)">
            <summary>
            Asynchronously retrieves the client access grant using OAuth 2 client credentials flow.
            </summary>
            <param name="scope">The optional scope to get for the access grant.</param>
            <returns>
            A <code>Task&lt;T&gt;</code> that represents the asynchronous operation that can return 
            the OAuth2 access token when the client is acting on its own behalf.
            </returns>
        </member>
        <member name="T:YSWL.OAuth.v2.IOAuth2ServiceProvider`1">
            <summary>
            A ServiceProvider that uses the OAuth 2.0 protocol.
            </summary>
            <typeparam name="T">The service provider's API type.</typeparam>
            <author>Keith Donald</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="P:YSWL.OAuth.v2.IOAuth2ServiceProvider`1.OAuthOperations">
            <summary>
            Gets the service interface for carrying out the "OAuth dance" with this provider. 
            The result of the OAuth dance is an access token that can be used to obtain an API binding with <see cref="M:GetApi(string)"/> method.
            </summary>
        </member>
        <member name="M:YSWL.OAuth.v2.IOAuth2ServiceProvider`1.GetApi(YSWL.OAuth.v2.AccessGrant)">
            <summary>
            Returns an API interface allowing the client application to access protected resources on behalf of a user.
            </summary>
            <param name="accessGrant">The API access token.</param>
            <returns>A binding to the service provider's API.</returns>
        </member>
        <member name="T:YSWL.OAuth.v2.OAuth2Parameters">
            <summary>
            Parameters for building an OAuth2 authorize URL.
            </summary>
            <author>Roy Clarkson</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="M:YSWL.OAuth.v2.OAuth2Parameters.#ctor">
            <summary>
            Creates a new, empty instance of the <see cref="T:YSWL.OAuth.v2.OAuth2Parameters"/> class. 
            Use properties to add parameters after construction.
            </summary>
        </member>
        <member name="M:YSWL.OAuth.v2.OAuth2Parameters.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the <see cref="T:YSWL.OAuth.v2.OAuth2Parameters"/> class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data 
            about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information 
            about the source or destination.
            </param>
        </member>
        <member name="P:YSWL.OAuth.v2.OAuth2Parameters.RedirectUrl">
            <summary>
            Gets or sets the authorization callback url.
            <para/>
            This value must match the redirectUri registered with the provider.
            <para/>
            This is optional per the OAuth 2 spec, but required by most OAuth 2 providers. 
            </summary>
        </member>
        <member name="P:YSWL.OAuth.v2.OAuth2Parameters.Scope">
            <summary>
            Gets or sets the permissions the application is seeking with the authorization (optional).
            </summary>
        </member>
        <member name="P:YSWL.OAuth.v2.OAuth2Parameters.State">
            <summary>
            Gets or sets an opaque key that must be included in the provider's authorization callback (optional).
            </summary>
        </member>
        <member name="M:YSWL.OAuth.v2.OAuth2Parameters.GetFirst(System.String)">
            <summary>
            Returns the first value for the given key.
            </summary>
            <param name="key">The key.</param>
            <returns>The first value for the specified key, or <see langword="null"/>.</returns>
        </member>
        <member name="T:YSWL.OAuth.v2.OAuth2RequestInterceptor">
            <summary>
            <see cref="T:YSWL.OAuth.Http.Client.Interceptor.IClientHttpRequestBeforeInterceptor"/> implementation that adds the OAuth2 access token 
            to protected resource requests before execution.
            </summary>
            <author>Keith Donald</author>
            <author>Craig Walls</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="M:YSWL.OAuth.v2.OAuth2RequestInterceptor.#ctor(System.String,YSWL.OAuth.v2.OAuth2Version)">
            <summary>
            Creates an OAuth 2.0 protected resource request interceptor.
            </summary>
            <param name="accessToken">The access token and secret.</param>
            <param name="oauth2Version">The version of the OAuth2 Core specification.</param>
        </member>
        <member name="M:YSWL.OAuth.v2.OAuth2RequestInterceptor.BeforeExecute(YSWL.OAuth.Http.Client.Interceptor.IClientHttpRequestContext)">
            <summary>
            The callback method before the given request is executed.
            </summary>
            <remarks>
            This implementation sets the 'Authorization' header.
            </remarks>
            <param name="request">The request context.</param>
        </member>
        <member name="T:YSWL.OAuth.v2.OAuth2Template">
            <summary>
            <see cref="T:YSWL.OAuth.v2.IOAuth2Operations"/> implementation that uses REST template to make the OAuth calls.
            </summary>
            <author>Keith Donald</author>
            <author>Roy Clarkson</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="P:YSWL.OAuth.v2.OAuth2Template.RestTemplate">
            <summary>
            Gets a reference to the REST client used to perform OAuth2 calls. 
            </summary>
        </member>
        <member name="P:YSWL.OAuth.v2.OAuth2Template.UseParametersForClientAuthentication">
            <summary>
            Gets a value indicating whether to pass client credentials to the provider as parameters 
            instead of using HTTP Basic authentication.
            </summary>
        </member>
        <member name="M:YSWL.OAuth.v2.OAuth2Template.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Creates an OAuth2Template for a given set of client credentials. 
            <para/>
            Assumes that the authorization URL is the same as the authentication URL.
            </summary>
            <param name="clientId">The client identifier.</param>
            <param name="clientSecret">The client password.</param>
            <param name="authorizeUrl">
            The base URL to redirect to when doing authorization code or implicit grant authorization.
            </param>
            <param name="accessTokenUrl">
            The URL at which an authorization code, refresh token, or user credentials may be exchanged for an access token.
            </param>
        </member>
        <member name="M:YSWL.OAuth.v2.OAuth2Template.#ctor(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Creates an OAuth2Template for a given set of client credentials. 
            <para/>
            Assumes that the authorization URL is the same as the authentication URL.
            </summary>
            <param name="clientId">The client identifier.</param>
            <param name="clientSecret">The client password.</param>
            <param name="authorizeUrl">
            The base URL to redirect to when doing authorization code or implicit grant authorization.
            </param>
            <param name="accessTokenUrl">
            The URL at which an authorization code, refresh token, or user credentials may be exchanged for an access token.
            </param>
            <param name="useParametersForClientAuthentication">
            A value indicating whether to pass client credentials to the provider as parameters 
            instead of using HTTP Basic authentication.
            </param>
        </member>
        <member name="M:YSWL.OAuth.v2.OAuth2Template.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates an OAuth2Template for a given set of client credentials. 
            </summary>
            <param name="clientId">The client identifier.</param>
            <param name="clientSecret">The client password.</param>
            <param name="authorizeUrl">
            The base URL to redirect to when doing authorization code or implicit grant authorization.
            </param>
            <param name="authenticateUrl">
            The URL to redirect to when doing authentication via authorization code grant.
            </param>
            <param name="accessTokenUrl">
            The URL at which an authorization code, refresh token, or user credentials may be exchanged for an access token.
            </param>
        </member>
        <member name="M:YSWL.OAuth.v2.OAuth2Template.#ctor(System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Creates an OAuth2Template for a given set of client credentials. 
            </summary>
            <param name="clientId">The client identifier.</param>
            <param name="clientSecret">The client password.</param>
            <param name="authorizeUrl">
            The base URL to redirect to when doing authorization code or implicit grant authorization.
            </param>
            <param name="authenticateUrl">
            The URL to redirect to when doing authentication via authorization code grant.
            </param>
            <param name="accessTokenUrl">
            The URL at which an authorization code, refresh token, or user credentials may be exchanged for an access token.
            </param>
            <param name="useParametersForClientAuthentication">
            A value indicating whether to pass client credentials to the provider as parameters 
            instead of using HTTP Basic authentication.
            </param>
        </member>
        <member name="M:YSWL.OAuth.v2.OAuth2Template.BuildAuthorizeUrl(YSWL.OAuth.v2.GrantType,YSWL.OAuth.v2.OAuth2Parameters)">
            <summary>
            Constructs the URL to redirect the user to for authorization.
            </summary>
            <param name="grantType">
            Specifies whether to use client-side or server-side OAuth flow.
            </param>
            <param name="parameters">
            Authorization parameters needed to build the URL. May be null.
            </param>
            <returns>
            The absolute authorize URL to redirect the user to for authorization.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.v2.OAuth2Template.BuildAuthenticateUrl(YSWL.OAuth.v2.GrantType,YSWL.OAuth.v2.OAuth2Parameters)">
            <summary>
            Constructs the URL to redirect the user to for authentication.
            <para/>
            The authenticate URL differs from the authorizationUrl slightly in that it does not require the user to authorize the app multiple times.
            This provides a better user experience for "Sign in with Provider" scenarios.
            </summary>
            <param name="grantType">
            Specifies whether to use client-side or server-side OAuth flow.
            </param>
            <param name="parameters">
            Authorization parameters needed to build the URL. May be null.
            </param>
            <returns>The absolute authenticate URL to redirect the user to for authorization.</returns>
        </member>
        <member name="M:YSWL.OAuth.v2.OAuth2Template.ExchangeForAccessAsync(System.String,System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Asynchronously exchanges the authorization code for an access grant.
            </summary>
            <param name="authorizationCode">
            The authorization code returned by the provider upon user authorization.
            </param>
            <param name="redirectUri">
            The authorization callback url; this value must match the redirectUri registered with the provider.
            </param>
            <param name="additionalParameters">
            Any additional parameters to be sent when exchanging the authorization code for an access grant. Should not be encoded.
            </param>
            <returns>
            A <code>Task&lt;T&gt;</code> that represents the asynchronous operation that can return the OAuth2 access token.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.v2.OAuth2Template.ExchangeCredentialsForAccessAsync(System.String,System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Asynchronously exchanges user credentials for an access grant using OAuth2's Resource Owner Credentials Grant (aka, "password" grant).
            </summary>
            <param name="username">The user's username on the provider.</param>
            <param name="password">The user's password on the provider.</param>
            <param name="additionalParameters">
            Any additional parameters to be sent when exchanging the credentials for an access grant. Should not be encoded.
            </param>
            <returns>
            A <code>Task&lt;T&gt;</code> that represents the asynchronous operation that can return the OAuth2 access token.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.v2.OAuth2Template.RefreshAccessAsync(System.String,System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Asynchronously refreshes a previous access grant.
            </summary>
            <param name="refreshToken">The refresh token from the previous access grant.</param>
            <param name="scope">
            Optional scope to narrow to when refreshing access; if null, the existing scope is preserved.
            </param>
            <param name="additionalParameters">
            Any additional parameters to be sent when refreshing a previous access grant. Should not be encoded.
            </param>
            <returns>
            A <code>Task&lt;T&gt;</code> that represents the asynchronous operation that can return the OAuth2 access token.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.v2.OAuth2Template.RefreshAccessAsync(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Asynchronously refreshes a previous access grant.
            </summary>
            <param name="refreshToken">The refresh token from the previous access grant.</param>
            <param name="additionalParameters">
            Any additional parameters to be sent when refreshing a previous access grant. Should not be encoded.
            </param>
            <returns>
            A <code>Task&lt;T&gt;</code> that represents the asynchronous operation that can return the OAuth2 access token.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.v2.OAuth2Template.AuthenticateClientAsync">
            <summary>
            Asynchronously retrieves the client access grant using OAuth 2 client credentials flow.
            </summary>
            <returns>
            A <code>Task&lt;T&gt;</code> that represents the asynchronous operation that can return 
            the OAuth2 access token when the client is acting on its own behalf.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.v2.OAuth2Template.AuthenticateClientAsync(System.String)">
            <summary>
            Asynchronously retrieves the client access grant using OAuth 2 client credentials flow.
            </summary>
            <param name="scope">The optional scope to get for the access grant.</param>
            <returns>
            A <code>Task&lt;T&gt;</code> that represents the asynchronous operation that can return 
            the OAuth2 access token when the client is acting on its own behalf.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.v2.OAuth2Template.CreateRestTemplate">
            <summary>
            Creates the <see cref="P:YSWL.OAuth.v2.OAuth2Template.RestTemplate"/> used to communicate with the provider's OAuth 2 API.
            </summary>
            <remarks>
            This implementation creates a RestTemplate with a minimal set of HTTP message converters: 
            <see cref="T:YSWL.OAuth.Http.Converters.FormHttpMessageConverter"/> and <see cref="T:YSWL.OAuth.Http.Converters.Json.SpringJsonHttpMessageConverter"/>. 
            May be overridden to customize how the RestTemplate is created. 
            For example, if the provider returns data in some format other than JSON for form-encoded, 
            you might override to register an appropriate message converter. 
            </remarks>
            <returns>The RestTemplate used to perform OAuth2 calls.</returns>
        </member>
        <member name="M:YSWL.OAuth.v2.OAuth2Template.PostForAccessGrantAsync(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Asynchronously posts the request for an access grant to the provider.
            </summary>
            <remarks>
            The default implementation uses RestTemplate to request the access token and expects a JSON response to be bound to a dictionary.
            The information in the dictionary will be used to create an <see cref="T:YSWL.OAuth.v2.AccessGrant"/>.
            Since the OAuth 2 specification indicates that an access token response should be in JSON format, there's often no need to override this method.
            If all you need to do is capture provider-specific data in the response, you should override CreateAccessGrant() instead.
            However, in the event of a provider whose access token response is non-JSON, 
            you may need to override this method to request that the response be bound to something other than a dictionary.
            For example, if the access token response is given as form-encoded, this method should be overridden to call RestTemplate.PostForObject() 
            asking for the response to be bound to a NameValueCollection (whose contents can then be used to create an <see cref="T:YSWL.OAuth.v2.AccessGrant"/>).
            </remarks>
            <param name="accessTokenUrl">The URL of the provider's access token endpoint.</param>
            <param name="request">The request data to post to the access token endpoint.</param>
            <returns>
            A <code>Task&lt;AccessGrant&gt;</code> that represents the asynchronous operation that can return the OAuth2 access token.
            </returns>
        </member>
        <member name="M:YSWL.OAuth.v2.OAuth2Template.CreateAccessGrant(System.String,System.String,System.String,System.Nullable{System.Int32},YSWL.OAuth.Json.JsonValue)">
            <summary>
            Creates an <see cref="T:YSWL.OAuth.v2.AccessGrant"/> given the response from the access token exchange with the provider.
            </summary>
            <remarks>
            May be overridden to create a custom AccessGrant that captures provider-specific information from the access token response. 
            </remarks>
            <param name="accessToken">The access token value received from the provider.</param>
            <param name="scope">The scope of the access token.</param>
            <param name="refreshToken">A refresh token value received from the provider.</param>
            <param name="expiresIn">The time (in seconds) remaining before the access token expires.</param>
            <param name="response">The JSON response received in the access token exchange.</param>
            <returns>The OAuth2 access token.</returns>
        </member>
        <member name="T:YSWL.OAuth.v2.OAuth2Version">
            <summary>
            Various versions of the OAuth 2 specification.
            </summary>
            <remarks>
            Used by <see cref="T:YSWL.OAuth.v2.OAuth2Template"/> to vary its behavior by the configured version.
            </remarks>
            <author>Keith Donald</author>
            <author>Craig Walls</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="F:YSWL.OAuth.v2.OAuth2Version.Bearer">
            <summary>
            OAuth Version 2.0 using bearer tokens (since Draft 12).
            </summary>
        </member>
        <member name="F:YSWL.OAuth.v2.OAuth2Version.Draft10">
            <summary>
            OAuth Version 2.0 Draft 10.
            </summary>
        </member>
        <member name="F:YSWL.OAuth.v2.OAuth2Version.Draft8">
            <summary>
            OAuth Version 2.0 Draft 8.
            </summary>
        </member>
        <member name="T:YSWL.OAuth.SocialException">
            <summary>
            The exception that is thrown when a problem occurred performing an operation against a service provider. 
            </summary>
            <remarks>
            This exception class is abstract, as it is too generic for actual use. 
            When a <see cref="T:YSWL.OAuth.SocialException"/> is thrown, it should be one of the more specific subclasses.
            </remarks>
            <author>Craig Walls</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="M:YSWL.OAuth.SocialException.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:YSWL.OAuth.SocialException"/> class.
            </summary>
            <param name="message">A message about the exception.</param>
        </member>
        <member name="M:YSWL.OAuth.SocialException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the <see cref="T:YSWL.OAuth.SocialException"/> class.
            </summary>
            <param name="message">A message about the exception.</param>
            <param name="innerException">The inner exception that is the cause of the current exception.</param>
        </member>
        <member name="M:YSWL.OAuth.SocialException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the <see cref="T:YSWL.OAuth.SocialException"/> class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
    </members>
</doc>
